{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"learn2proGrAME Grundlagentutorial Spiele programmieren mit C# in Unity - Grundlagentutorial WORK IN PROGRESS Was ist learn2proGrAME? Bei learn2proGrAME k\u00f6nnen Sch\u00fclerinnen und Sch\u00fcler durch Spiele programmieren das Programmieren mit einer text-basierten Programmiersprache in einer professionellen Spieleprogrammierumgebung lernen. Die learn2proGrAME Unterlagen - wie etwa dieses Tutorial - sind offen online zug\u00e4nglich . Viel Spass beim Spiele entwickeln! Was wirst du in diesem Tutorial lernen? In diesem Tutorial lernst du die Grundlagen zur Spieleprogrammierung in Unity mit der Programmiersprache C#. Dabei wirst du zuerst die Bedienoberfl\u00e4chen von Unity und Visual Studio erkunden. Danach schreibst du dein erstes Programm in C# . Wie gehen Programmiererinnen und Programmierer mit Fehlern um? Dar\u00fcber erf\u00e4hrst du mehr im Kapitel zu De-Bugging . Anschlie\u00dfend lernst du \u00fcber Variablen , Operatoren und Funkionen , um dein erstes Spiel, das allseits beliebte Krapfenklicker , zu entwickeln. Nachdem du die Unity Spielobjektkomponente Transform kennengelernt hast, kannst du eine Spielerweiterung f\u00fcr Krapfenklicker schreiben. Beim n\u00e4chsten selbstgeschriebenen Spiel - Ellis' gro\u00dfes Abenteuer - lernst du, mit Verzweigungen Spielzust\u00e4nde zu erzeugen und Figuren in einem Grafikprogramm namens GIMP zu zeichnen . Als Vorbereitung auf das Jump'n'Run artige Arcade Spiel BouncyFant wird letztlich die Schleife - insbesondere die Spielschleife - als wichtiger Aspekt der Spieleprogrammierung vorgestellt. Nach dem Tutorial... Im Anschluss an dieses Grundlagentutorial kannst du das BouncyFant Tutorial starten, in dem du ein Jump'n'Run-artiges Arcade Spiel entwickelst! Was wirst du im BouncyFant Tutorial lernen? Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2D Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Objekt-orienterte Programmierung: Vererbung, Kapselung Spiellogik Weiter zu BouncyFant ...","title":"Einleitung"},{"location":"#learn2programe-grundlagentutorial","text":"Spiele programmieren mit C# in Unity - Grundlagentutorial WORK IN PROGRESS","title":"learn2proGrAME Grundlagentutorial"},{"location":"#was-ist-learn2programe","text":"Bei learn2proGrAME k\u00f6nnen Sch\u00fclerinnen und Sch\u00fcler durch Spiele programmieren das Programmieren mit einer text-basierten Programmiersprache in einer professionellen Spieleprogrammierumgebung lernen. Die learn2proGrAME Unterlagen - wie etwa dieses Tutorial - sind offen online zug\u00e4nglich . Viel Spass beim Spiele entwickeln!","title":"Was ist learn2proGrAME?"},{"location":"#was-wirst-du-in-diesem-tutorial-lernen","text":"In diesem Tutorial lernst du die Grundlagen zur Spieleprogrammierung in Unity mit der Programmiersprache C#. Dabei wirst du zuerst die Bedienoberfl\u00e4chen von Unity und Visual Studio erkunden. Danach schreibst du dein erstes Programm in C# . Wie gehen Programmiererinnen und Programmierer mit Fehlern um? Dar\u00fcber erf\u00e4hrst du mehr im Kapitel zu De-Bugging . Anschlie\u00dfend lernst du \u00fcber Variablen , Operatoren und Funkionen , um dein erstes Spiel, das allseits beliebte Krapfenklicker , zu entwickeln. Nachdem du die Unity Spielobjektkomponente Transform kennengelernt hast, kannst du eine Spielerweiterung f\u00fcr Krapfenklicker schreiben. Beim n\u00e4chsten selbstgeschriebenen Spiel - Ellis' gro\u00dfes Abenteuer - lernst du, mit Verzweigungen Spielzust\u00e4nde zu erzeugen und Figuren in einem Grafikprogramm namens GIMP zu zeichnen . Als Vorbereitung auf das Jump'n'Run artige Arcade Spiel BouncyFant wird letztlich die Schleife - insbesondere die Spielschleife - als wichtiger Aspekt der Spieleprogrammierung vorgestellt.","title":"Was wirst du in diesem Tutorial lernen?"},{"location":"#nach-dem-tutorial","text":"Im Anschluss an dieses Grundlagentutorial kannst du das BouncyFant Tutorial starten, in dem du ein Jump'n'Run-artiges Arcade Spiel entwickelst! Was wirst du im BouncyFant Tutorial lernen? Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2D Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Objekt-orienterte Programmierung: Vererbung, Kapselung Spiellogik Weiter zu BouncyFant ...","title":"Nach dem Tutorial..."},{"location":"about/","text":"\u00dcber learn2proGrAME Das Projekt Unter welchen Bedingungen kann Computerspieleentwicklung das Programmierenlernen verbessern? Der Grundgedanke des Projekts lautet: Sch\u00fclerinnen und Sch\u00fcler erforschen das eigene Programmierenlernen im Zuge der Entwicklung von Computerspielen und k\u00f6nnen so \u00fcber Prozesse Erkenntnisse gewinnen, die den Forschenden, die bereits programmieren k\u00f6nnen, nicht mehr genuin zug\u00e4nglich sind (bzw. jenen Forschenden, die nicht planen programmieren zu lernen, \u00fcberhaupt nicht zug\u00e4nglich sind). Im Zuge des Lernprozesses nehmen die Sch\u00fclerinnen und Sch\u00fcler nicht nur die herk\u00f6mmliche Rolle von Lernenden ein, sondern reflektieren ihr Lernen aktiv im Austausch mit den anderen Beteiligten und leisten damit einen Beitrag zur Generierung von neuem Wissen. Programmieren lernen ist f\u00fcr die meisten Menschen eine gro\u00dfe Herausforderung und nicht selten mit zahlreichen Schwierigkeiten verbunden. Das gilt auch f\u00fcr f\u00fcnfzehnj\u00e4hrige Sch\u00fclerinnen und Sch\u00fcler. Im Projekt proGrAME soll das Programmierenlernen der Sch\u00fclerinnen und Sch\u00fcler der neunten Schulstufe (5. Klasse AHS) durch Computerspielentwicklung erfolgen und begleitend durch Wissenschaftlerinnen und Wissenschaftler, Sch\u00fclerinnen und Sch\u00fcler aus h\u00f6heren Schulstufen im Rahmen der Wahlpflichtf\u00e4cher Psychologie/Philosophie und Informatik und auch durch die Programmieren-Lernenden selbst, erforscht werden. In diesem Prozess entwickeln und erproben Wissenschaftlerinnen und Wissenschaftler gemeinsam mit den Lernenden, didaktische Szenarien mit Spieleentwicklungsumgebungen und identifizieren signifikante Erfahrungen sowie Probleme beim Programmieren lernen und erarbeiten gemeinsam nachhaltige L\u00f6sungen.\u201c Das Team","title":"\u00dcber learn2proGrAME"},{"location":"about/#uber-learn2programe","text":"","title":"\u00dcber learn2proGrAME"},{"location":"about/#das-projekt","text":"Unter welchen Bedingungen kann Computerspieleentwicklung das Programmierenlernen verbessern? Der Grundgedanke des Projekts lautet: Sch\u00fclerinnen und Sch\u00fcler erforschen das eigene Programmierenlernen im Zuge der Entwicklung von Computerspielen und k\u00f6nnen so \u00fcber Prozesse Erkenntnisse gewinnen, die den Forschenden, die bereits programmieren k\u00f6nnen, nicht mehr genuin zug\u00e4nglich sind (bzw. jenen Forschenden, die nicht planen programmieren zu lernen, \u00fcberhaupt nicht zug\u00e4nglich sind). Im Zuge des Lernprozesses nehmen die Sch\u00fclerinnen und Sch\u00fcler nicht nur die herk\u00f6mmliche Rolle von Lernenden ein, sondern reflektieren ihr Lernen aktiv im Austausch mit den anderen Beteiligten und leisten damit einen Beitrag zur Generierung von neuem Wissen. Programmieren lernen ist f\u00fcr die meisten Menschen eine gro\u00dfe Herausforderung und nicht selten mit zahlreichen Schwierigkeiten verbunden. Das gilt auch f\u00fcr f\u00fcnfzehnj\u00e4hrige Sch\u00fclerinnen und Sch\u00fcler. Im Projekt proGrAME soll das Programmierenlernen der Sch\u00fclerinnen und Sch\u00fcler der neunten Schulstufe (5. Klasse AHS) durch Computerspielentwicklung erfolgen und begleitend durch Wissenschaftlerinnen und Wissenschaftler, Sch\u00fclerinnen und Sch\u00fcler aus h\u00f6heren Schulstufen im Rahmen der Wahlpflichtf\u00e4cher Psychologie/Philosophie und Informatik und auch durch die Programmieren-Lernenden selbst, erforscht werden. In diesem Prozess entwickeln und erproben Wissenschaftlerinnen und Wissenschaftler gemeinsam mit den Lernenden, didaktische Szenarien mit Spieleentwicklungsumgebungen und identifizieren signifikante Erfahrungen sowie Probleme beim Programmieren lernen und erarbeiten gemeinsam nachhaltige L\u00f6sungen.\u201c","title":"Das Projekt"},{"location":"about/#das-team","text":"","title":"Das Team"},{"location":"adventure/","text":"Ellis' gro\u00dfes Abenteuer Ellis' gro\u00dfes Abenteuer - Ein Text-basiertes Adventurespiel","title":"Spiel - Ellis' gro\u00dfes Abenteuer"},{"location":"adventure/#ellis-groes-abenteuer","text":"","title":"Ellis' gro\u00dfes Abenteuer"},{"location":"adventure/#ellis-groes-abenteuer-ein-text-basiertes-adventurespiel","text":"","title":"Ellis' gro\u00dfes Abenteuer - Ein Text-basiertes Adventurespiel"},{"location":"classes/","text":"Objekt-orientiertes Programmieren - Grundlagen Klasse und Instanz Eigenschaften Funktionen Ein Beispiel Weiterf\u00fchrende Informationen BouncyFant - Intro Nach dem Grundlagentutorial hast du genug Infos und Programmiererfahrung gesammelt, um das BouncyFant Tutorial zu beginnen. Nat\u00fcrlich kannst du jederzeit auf das Grundlagentutorial zur\u00fcckgreifen, wenn du es brauchst. Was wirst du im BouncyFant Tutorial lernen? Mehr zu Objekt-orienterter Programmierung: Vererbung, Kapselung und auch Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2d Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Spiellogik","title":"Objekt-orientiertes Programmieren - Grundlagen"},{"location":"classes/#objekt-orientiertes-programmieren-grundlagen","text":"","title":"Objekt-orientiertes Programmieren - Grundlagen"},{"location":"classes/#klasse-und-instanz","text":"","title":"Klasse und Instanz"},{"location":"classes/#eigenschaften","text":"","title":"Eigenschaften"},{"location":"classes/#funktionen","text":"","title":"Funktionen"},{"location":"classes/#ein-beispiel","text":"","title":"Ein Beispiel"},{"location":"classes/#weiterfuhrende-informationen","text":"","title":"Weiterf\u00fchrende Informationen"},{"location":"classes/#bouncyfant-intro","text":"Nach dem Grundlagentutorial hast du genug Infos und Programmiererfahrung gesammelt, um das BouncyFant Tutorial zu beginnen. Nat\u00fcrlich kannst du jederzeit auf das Grundlagentutorial zur\u00fcckgreifen, wenn du es brauchst. Was wirst du im BouncyFant Tutorial lernen? Mehr zu Objekt-orienterter Programmierung: Vererbung, Kapselung und auch Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2d Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Spiellogik","title":"BouncyFant - Intro"},{"location":"conditionals/","text":"Verzweigungen Wenn - Dann Vergleichsoperatoren Ein Beispiel Weiterf\u00fchrende Resourcen","title":"Verzweigungen"},{"location":"conditionals/#verzweigungen","text":"","title":"Verzweigungen"},{"location":"conditionals/#wenn-dann","text":"","title":"Wenn - Dann"},{"location":"conditionals/#vergleichsoperatoren","text":"","title":"Vergleichsoperatoren"},{"location":"conditionals/#ein-beispiel","text":"","title":"Ein Beispiel"},{"location":"conditionals/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"debugging/","text":"Fehler und De-Bugging Lernziele Hier lernst du, wie du etwas in Unity \"r\u00fcckg\u00e4ngig machen\" kannst. Au\u00dferdem lernst du den Begriff \"De-Bugging\" kennen. Du lernst, wo dir in Unity Programmierfehler angezeigt werden und wie du damit umgehen kannst. Das Sch\u00f6ne am Programmieren ist: Fehler machen geh\u00f6rt dazu! Fehler sind super Lernm\u00f6glichkeiten! Auch Profis machen Fehler. Es klappt nicht! Was nun? Was kann man tun, wenn was nicht klappt? Wenn du dich vertippt hast oder unabsichtlich was gel\u00f6scht hast, kannst du das in Unity r\u00fcckg\u00e4ngig machen. Tipp R\u00fcckg\u00e4ngig machen kannst du mit der Tastenkombination: strg + z Ok... aber was, wenn du auf Start dr\u00fcckst, aber nichts passiert? Schau in der Konsole nach, was da geschrieben steht. Unity gibt in der Konsole Warnungen und Fehlermeldungen aus, sobald du das Spiel gestartet hast. Warnungen und Fehlermeldungen beinhalten \u00fcblicherweise je eine Fehlerbeschreibung (auf Englisch) UND eine Zeilenangabe , auf welcher Zeile (und in welchem Skript) der Fehler aufgetreten ist. De-Bugging in Unity? Hast du eine Fehlerbeschreibung , aber verstehst noch nicht, was da steht? Lese im Grundlagentutorial nach, ob da was zu deinem Fehler steht (Es gibt auch eine Suchfunktion!) Frag eineN KollegIn Wenn es ein Hilfeforum gibt: Schreib deinen Fehler in das Forum Frag eineN erfahreneN LernerIn (etwa eineN TutorIn oder eine Lehrperson) Im Internet gibt es auch Hilfeforen: etwa das Unity Forum oder StackOverflow De-Bugging bedeutet, dass du Computer-Programm-Fehler (Bugs) ausbesserst. Hier ist ein Bild vom ersten echten \"Bug\", der jemals in einem Computerprogramm gefunden wurde! ;) De-Bugging in Visual Studio Hast du eine Fehlerbeschreibung und eine Zeilenangabe , kannst du die Zeile in deinem C # Skript in Visual Studio suchen. Vielleicht hast du nur einen ; (Strichpunkt) vergessen? Oder Gro\u00df- und Kleinschreibung bei Bezeichnungen nicht eingehalten? Arbeitsauftrag F\u00fcge folgenden Programm-Teil in deinem halloelli.cs Skript nach void OnDisable() { Debug.Log (\"Hallo Elli!\"); } ein: void OnEnable() { Debug.Log(\"Elli ist wieder sichtbar!\") } Finde den Fehler und verbessere den Quellcode. Breakpoints Um zu sehen, was sich in deinem Skript abspielt, wenn du in Unity auf Start dr\u00fcckst, k\u00f6nnen Breakpoints (Haltepunkte) gesetzt werden. Hierf\u00fcr klickst du in Visual Studio links neben die Zeilennummer, wo du einen Haltepunkt setzen willst. Anschlie\u00dfend kannst du dein Spiel in Unity starten. Sobald die Ausf\u00fchrung deines Programms an die Stelle kommt, wo dein Haltepunkt gesetzt ist, bleibt es stehen. Nun kannst du die Inhalte von Variablen im aktuellen Zustand beim Haltepunkt einsehen, indem du den Mauszeiger auf die Variable bewegst. Mit der Taste \"N\u00e4chste Anweisung anzeigen\" kannst das Programm nach einem Haltepunkt weiterlaufen lassen. Weiterf\u00fchrende Resourcen Unity Forum Unity User Manual StackOverflow Tutorial f\u00fcr Fortgeschrittene zum De-Buggen in Visual Studio (englisch)","title":"Fehler und De-Bugging"},{"location":"debugging/#fehler-und-de-bugging","text":"Lernziele Hier lernst du, wie du etwas in Unity \"r\u00fcckg\u00e4ngig machen\" kannst. Au\u00dferdem lernst du den Begriff \"De-Bugging\" kennen. Du lernst, wo dir in Unity Programmierfehler angezeigt werden und wie du damit umgehen kannst. Das Sch\u00f6ne am Programmieren ist: Fehler machen geh\u00f6rt dazu! Fehler sind super Lernm\u00f6glichkeiten! Auch Profis machen Fehler.","title":"Fehler und De-Bugging"},{"location":"debugging/#es-klappt-nicht-was-nun","text":"Was kann man tun, wenn was nicht klappt? Wenn du dich vertippt hast oder unabsichtlich was gel\u00f6scht hast, kannst du das in Unity r\u00fcckg\u00e4ngig machen. Tipp R\u00fcckg\u00e4ngig machen kannst du mit der Tastenkombination: strg + z Ok... aber was, wenn du auf Start dr\u00fcckst, aber nichts passiert? Schau in der Konsole nach, was da geschrieben steht. Unity gibt in der Konsole Warnungen und Fehlermeldungen aus, sobald du das Spiel gestartet hast. Warnungen und Fehlermeldungen beinhalten \u00fcblicherweise je eine Fehlerbeschreibung (auf Englisch) UND eine Zeilenangabe , auf welcher Zeile (und in welchem Skript) der Fehler aufgetreten ist.","title":"Es klappt nicht! Was nun?"},{"location":"debugging/#de-bugging-in-unity","text":"Hast du eine Fehlerbeschreibung , aber verstehst noch nicht, was da steht? Lese im Grundlagentutorial nach, ob da was zu deinem Fehler steht (Es gibt auch eine Suchfunktion!) Frag eineN KollegIn Wenn es ein Hilfeforum gibt: Schreib deinen Fehler in das Forum Frag eineN erfahreneN LernerIn (etwa eineN TutorIn oder eine Lehrperson) Im Internet gibt es auch Hilfeforen: etwa das Unity Forum oder StackOverflow De-Bugging bedeutet, dass du Computer-Programm-Fehler (Bugs) ausbesserst. Hier ist ein Bild vom ersten echten \"Bug\", der jemals in einem Computerprogramm gefunden wurde! ;)","title":"De-Bugging in Unity?"},{"location":"debugging/#de-bugging-in-visual-studio","text":"Hast du eine Fehlerbeschreibung und eine Zeilenangabe , kannst du die Zeile in deinem C # Skript in Visual Studio suchen. Vielleicht hast du nur einen ; (Strichpunkt) vergessen? Oder Gro\u00df- und Kleinschreibung bei Bezeichnungen nicht eingehalten? Arbeitsauftrag F\u00fcge folgenden Programm-Teil in deinem halloelli.cs Skript nach void OnDisable() { Debug.Log (\"Hallo Elli!\"); } ein: void OnEnable() { Debug.Log(\"Elli ist wieder sichtbar!\") } Finde den Fehler und verbessere den Quellcode.","title":"De-Bugging in Visual Studio"},{"location":"debugging/#breakpoints","text":"Um zu sehen, was sich in deinem Skript abspielt, wenn du in Unity auf Start dr\u00fcckst, k\u00f6nnen Breakpoints (Haltepunkte) gesetzt werden. Hierf\u00fcr klickst du in Visual Studio links neben die Zeilennummer, wo du einen Haltepunkt setzen willst. Anschlie\u00dfend kannst du dein Spiel in Unity starten. Sobald die Ausf\u00fchrung deines Programms an die Stelle kommt, wo dein Haltepunkt gesetzt ist, bleibt es stehen. Nun kannst du die Inhalte von Variablen im aktuellen Zustand beim Haltepunkt einsehen, indem du den Mauszeiger auf die Variable bewegst. Mit der Taste \"N\u00e4chste Anweisung anzeigen\" kannst das Programm nach einem Haltepunkt weiterlaufen lassen.","title":"Breakpoints"},{"location":"debugging/#weiterfuhrende-resourcen","text":"Unity Forum Unity User Manual StackOverflow Tutorial f\u00fcr Fortgeschrittene zum De-Buggen in Visual Studio (englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"donutclicker/","text":"Krapfenklicker - Das Spiel","title":"Spiel - Krapfenklicker"},{"location":"donutclicker/#krapfenklicker-das-spiel","text":"","title":"Krapfenklicker - Das Spiel"},{"location":"drawingingimp/","text":"Figuren zeichnen in GIMP Gimp - \u00dcberblick Erste Schritte Character-Design in GIMP Ellis' Abenteuer 2 Weiterf\u00fchrende Resourcen","title":"Figuren zeichnen in GIMP"},{"location":"drawingingimp/#figuren-zeichnen-in-gimp","text":"","title":"Figuren zeichnen in GIMP"},{"location":"drawingingimp/#gimp-uberblick","text":"","title":"Gimp - \u00dcberblick"},{"location":"drawingingimp/#erste-schritte","text":"","title":"Erste Schritte"},{"location":"drawingingimp/#character-design-in-gimp","text":"","title":"Character-Design in GIMP"},{"location":"drawingingimp/#ellis-abenteuer-2","text":"","title":"Ellis' Abenteuer 2"},{"location":"drawingingimp/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"firststeps/","text":"Erste Schritte Lernziele In diesem Kapitel lernst du, was ein Algorithmus ist. Du unterscheidest Spielobjekte und deren Komponenten in Unity. Du organisierst Projektdateien zu deinem Spiel. Und: Du schreibst dein erstes Programm in C # . Was ist ein Algorithmus? Informatikerinnen und Informatiker besch\u00e4ftigen sich mit Algorithmen. Aber was ist das eigentlich - ein Algorithmus? Programmieren k\u00f6nnte man als Probleml\u00f6severfahren beschreiben. In unserem Fall ist das \"Problem\" etwa, dass wir ein Spiel erstellen wollen. Wir l\u00f6sen es durch Einsatz von Unity und C # . Dabei kann man festhalten, dass nach einer bestimmten Zeit ein Resultat - also ein Spiel - entstehen sollte. Ein bisschen allgemeiner k\u00f6nnte man daher sagen: Ein Algorithmus ist ein Probleml\u00f6severfahren in endlich vielen Schritten. \u00dcbung Schreibe in Stichworten einen Algorithmus f\u00fcr Z\u00e4hne putzen. Erste Schritte in Unity Spielobjekte und Komponenten In Unity besteht eine Szene aus einem oder mehreren Spielobjekt(en). Diese werden GameObject(s) genannt. Auch die Kamera, die eine Szene \"filmt\", ist ein GameObject. Spielobjekte k\u00f6nnen von unterschiedlicher Art sein. Die Art wird in einer Klasse festgelegt. Die Eigenschaften eines Spielobjekts werden durch Komponenten (Components) bestimmt. Jedes Spielobjekt hat etwa die Komponente Transform , mit Hilfe derer die Position, die Rotation und die Gr\u00f6\u00dfe (oder Skalierung) des Spielobjekts bestimmt werden kann. Auch physikalische Eigenschaften werden einem Spielobjekt durch eine Komponente verliehen. Bei 2D-Spielen hei\u00dft diese Rigidbody2D. Ebenso werden Grenzen eines Spielobjekts (f\u00fcr Kollisionsabfragen) durch eine Komponente - Collider - angegeben. C # -Skripte werden einem Spielobjekt \u00fcber \"Add Component\" \"New Script\" \"angeheftet\". Das besondere an Skripten ist, dass du darin auf andere Komponenten des Spielobjekts oder \u00fcberhaupt auf andere Spielobjekte in einer Szene zugreifen kannst. Weiters k\u00f6nnen Eingaben durch Keyboard, Maus oder GamePad verwendet oder andere Aspekte der Unity Spiel-Engine ver\u00e4ndert werden. Somit kannst du gezielt die Spiellogik f\u00fcr dein Spiel programmieren. \u00dcbung Beschreibe in eigenen Worten, wof\u00fcr die Spielobjekt-Komponenten im obigen Bild verwendet werden. SpriteRenderer ist bereits beschrieben. Projektdateien Projektdateien findest du in Unity unter \"Project\" \"Assets\" . Mit \"Create\" kannst du dort neue Ordner und Dateien anlegen. Nat\u00fcrlich kannst du in Unity auch mit Drag and Drop Dateien importieren. Um sich \u00dcbersicht \u00fcber die verwendeten Dateien zu verschaffen, k\u00f6nnen Ordner angelegt werden. Arbeitsauftrag Lege folgende Ordner im \"Assets\"-Bereich von Unity an: Sprites : f\u00fcr alle 2D Grafiken Scripts : f\u00fcr alle C # Programm-Skripte Vorlagen : f\u00fcr Spielobjekte, die als Vorlage erstellt und verwendet werden Material : f\u00fcr physikalische Materialeigenschaften Tipp Du gelangst per Rechtsklick auf den \"Assets\" -Ordner zu einem Men\u00fc, in dem du ebenso \"Create\" findest. Um ein neues Script f\u00fcr ein GameObject zu erstellen, mache folgendes: Arbeitsauftrag Lege die Sprite-Datei elef.png im Ordner \"Sprites\" in deinem Unity Projekt ab. Ziehe das neue Sprite anschlie\u00dfend vom Project Panel in das Hierarchy Panel. Nenne das neue GameObject \"Elli\". Hefte dem neu erzeugten GameObject Elli ein C#-Skript namens \"HalloElli\" an. Tipp Ein Sprite ist eine 2D Grafik. Das hei\u00dft, diese Grafik hat 2 Dimensionen. Sie kann auf der x- und der y-Achse positioniert und skaliert(=vergr\u00f6\u00dfert und verkleinert) werden. Eine Tiefendimension (z-Achse), die man etwa bei 3D-Spielen verwendet, fehlt. Erste Schritte in C # C # (C Sharp) ist (in erster Linie) eine objektorientierte Programmiersprache. Unity-Skripte kann man in C # (oder in Javascript ) schreiben. Hallo Elli! Arbeitsauftrag \u00d6ffne das C#-Skript \"HalloElli.cs\" in Visual Studio per Doppelklick auf diese Datei im Unity Projekt Panel. Bist du bereit f\u00fcr dein erstes C # -Skript? Kopiere nachfolgenden Programmcode nach \"HalloElli.cs\" und ersetze dessen Inhalte. using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class halloelli : MonoBehaviour { int punkte = 1 ; string troeten = Tr\u00f6\u00f6\u00f6t. ; void OnDisable () { Debug . Log ( Hallo Elli! ); } } Tipp Du kannst die Tastenkombination strg + c (gleichzeitig dr\u00fccken) zum Kopieren und strg + v zum Einf\u00fcgen verwenden. Zur\u00fcck in Unity, dr\u00fccke auf Start. Anschlie\u00dfend, \u00f6ffne das Console Panel . In diesem werden R\u00fcckmeldungen des Programms, wie etwa Debug -Nachrichten ausgegeben. Nun, klicke das GameObject Elli an. Im Inspector findest du neben dem GameObject Namen eine Tick-Box. Klicke die Tick-Box an. Arbeitsauftrag Notiere die Ausgabe in der Konsole. Programmstruktur in C # Nachfolgend findest du die typische Programmstruktur eines C # -Skripts (mit Erkl\u00e4rungen): //BIBLIOTHEKEN = PROGRAMMTEILE, DIE IN DAS SCRIPT IMPORTIERT WERDEN using System ; //using = EIN SCHL\u00dcSSELWORT IN C#; using System HEI\u00dfT: verwende alle Klassen im Namespace(= Programmateil) System using System.Collections ; using System.Collections.Generic ; using UnityEngine ; //DIESE BIBLIOTHEK ERM\u00d6GLICHT ETWA DEN ZUGRIFF AUF DIE UNITY SPIEL-ENGINE //EINE KLASSE = class bezeichnung {... Inhalte der Klasse ...} public class halloelli : MonoBehaviour //DIESE KLASSE ERBT VON MonoBehaviour - IST ALSO F\u00dcR EIN GAMEOBJECT { //KLASSEN-ATTRIBUTE (EIGENSCHAFTEN) WERDEN IN VARIABLEN GEFASST int punkte = 1 ; string troeten = Tr\u00f6\u00f6\u00f6t. ; //FUNKTION(EN) DER KLASSE void OnDisable () { //STATEMENT(S) - AUSDR\u00dcCKE Debug . Log ( Hallo Elli! ); /* Dies * ist ein * mehrzeiliges * Kommentar */ //Dies ist ein einzeiliges Kommentar } } ACHTUNG Gro\u00df- und Kleinschreibung wird beachtet! Alle Statements und Ausdr\u00fccke werden mit ; beendet! Jedes C # -Programm startet mit einer main-Funktion! (Diese wird von Unity im Hintergrund aufgerufen, wenn du dein Spiel startest.) Weiterf\u00fchrende Resourcen Grundlagen der Sprache C # (aus dem Visual C # Handbuch) Introduction to Unity Tutorial Teil 1 (Ray Wenderlich, Englisch) Introduction to Unity Tutorial Teil 2 (Ray Wenderlich, Englisch)","title":"Erste Schritte"},{"location":"firststeps/#erste-schritte","text":"Lernziele In diesem Kapitel lernst du, was ein Algorithmus ist. Du unterscheidest Spielobjekte und deren Komponenten in Unity. Du organisierst Projektdateien zu deinem Spiel. Und: Du schreibst dein erstes Programm in C # .","title":"Erste Schritte"},{"location":"firststeps/#was-ist-ein-algorithmus","text":"Informatikerinnen und Informatiker besch\u00e4ftigen sich mit Algorithmen. Aber was ist das eigentlich - ein Algorithmus? Programmieren k\u00f6nnte man als Probleml\u00f6severfahren beschreiben. In unserem Fall ist das \"Problem\" etwa, dass wir ein Spiel erstellen wollen. Wir l\u00f6sen es durch Einsatz von Unity und C # . Dabei kann man festhalten, dass nach einer bestimmten Zeit ein Resultat - also ein Spiel - entstehen sollte. Ein bisschen allgemeiner k\u00f6nnte man daher sagen: Ein Algorithmus ist ein Probleml\u00f6severfahren in endlich vielen Schritten. \u00dcbung Schreibe in Stichworten einen Algorithmus f\u00fcr Z\u00e4hne putzen.","title":"Was ist ein Algorithmus?"},{"location":"firststeps/#erste-schritte-in-unity","text":"","title":"Erste Schritte in Unity"},{"location":"firststeps/#spielobjekte-und-komponenten","text":"In Unity besteht eine Szene aus einem oder mehreren Spielobjekt(en). Diese werden GameObject(s) genannt. Auch die Kamera, die eine Szene \"filmt\", ist ein GameObject. Spielobjekte k\u00f6nnen von unterschiedlicher Art sein. Die Art wird in einer Klasse festgelegt. Die Eigenschaften eines Spielobjekts werden durch Komponenten (Components) bestimmt. Jedes Spielobjekt hat etwa die Komponente Transform , mit Hilfe derer die Position, die Rotation und die Gr\u00f6\u00dfe (oder Skalierung) des Spielobjekts bestimmt werden kann. Auch physikalische Eigenschaften werden einem Spielobjekt durch eine Komponente verliehen. Bei 2D-Spielen hei\u00dft diese Rigidbody2D. Ebenso werden Grenzen eines Spielobjekts (f\u00fcr Kollisionsabfragen) durch eine Komponente - Collider - angegeben. C # -Skripte werden einem Spielobjekt \u00fcber \"Add Component\" \"New Script\" \"angeheftet\". Das besondere an Skripten ist, dass du darin auf andere Komponenten des Spielobjekts oder \u00fcberhaupt auf andere Spielobjekte in einer Szene zugreifen kannst. Weiters k\u00f6nnen Eingaben durch Keyboard, Maus oder GamePad verwendet oder andere Aspekte der Unity Spiel-Engine ver\u00e4ndert werden. Somit kannst du gezielt die Spiellogik f\u00fcr dein Spiel programmieren. \u00dcbung Beschreibe in eigenen Worten, wof\u00fcr die Spielobjekt-Komponenten im obigen Bild verwendet werden. SpriteRenderer ist bereits beschrieben.","title":"Spielobjekte und Komponenten"},{"location":"firststeps/#projektdateien","text":"Projektdateien findest du in Unity unter \"Project\" \"Assets\" . Mit \"Create\" kannst du dort neue Ordner und Dateien anlegen. Nat\u00fcrlich kannst du in Unity auch mit Drag and Drop Dateien importieren. Um sich \u00dcbersicht \u00fcber die verwendeten Dateien zu verschaffen, k\u00f6nnen Ordner angelegt werden. Arbeitsauftrag Lege folgende Ordner im \"Assets\"-Bereich von Unity an: Sprites : f\u00fcr alle 2D Grafiken Scripts : f\u00fcr alle C # Programm-Skripte Vorlagen : f\u00fcr Spielobjekte, die als Vorlage erstellt und verwendet werden Material : f\u00fcr physikalische Materialeigenschaften Tipp Du gelangst per Rechtsklick auf den \"Assets\" -Ordner zu einem Men\u00fc, in dem du ebenso \"Create\" findest. Um ein neues Script f\u00fcr ein GameObject zu erstellen, mache folgendes: Arbeitsauftrag Lege die Sprite-Datei elef.png im Ordner \"Sprites\" in deinem Unity Projekt ab. Ziehe das neue Sprite anschlie\u00dfend vom Project Panel in das Hierarchy Panel. Nenne das neue GameObject \"Elli\". Hefte dem neu erzeugten GameObject Elli ein C#-Skript namens \"HalloElli\" an. Tipp Ein Sprite ist eine 2D Grafik. Das hei\u00dft, diese Grafik hat 2 Dimensionen. Sie kann auf der x- und der y-Achse positioniert und skaliert(=vergr\u00f6\u00dfert und verkleinert) werden. Eine Tiefendimension (z-Achse), die man etwa bei 3D-Spielen verwendet, fehlt.","title":"Projektdateien"},{"location":"firststeps/#erste-schritte-in-c","text":"C # (C Sharp) ist (in erster Linie) eine objektorientierte Programmiersprache. Unity-Skripte kann man in C # (oder in Javascript ) schreiben.","title":"Erste Schritte in C#"},{"location":"firststeps/#hallo-elli","text":"Arbeitsauftrag \u00d6ffne das C#-Skript \"HalloElli.cs\" in Visual Studio per Doppelklick auf diese Datei im Unity Projekt Panel. Bist du bereit f\u00fcr dein erstes C # -Skript? Kopiere nachfolgenden Programmcode nach \"HalloElli.cs\" und ersetze dessen Inhalte. using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class halloelli : MonoBehaviour { int punkte = 1 ; string troeten = Tr\u00f6\u00f6\u00f6t. ; void OnDisable () { Debug . Log ( Hallo Elli! ); } } Tipp Du kannst die Tastenkombination strg + c (gleichzeitig dr\u00fccken) zum Kopieren und strg + v zum Einf\u00fcgen verwenden. Zur\u00fcck in Unity, dr\u00fccke auf Start. Anschlie\u00dfend, \u00f6ffne das Console Panel . In diesem werden R\u00fcckmeldungen des Programms, wie etwa Debug -Nachrichten ausgegeben. Nun, klicke das GameObject Elli an. Im Inspector findest du neben dem GameObject Namen eine Tick-Box. Klicke die Tick-Box an. Arbeitsauftrag Notiere die Ausgabe in der Konsole.","title":"Hallo Elli!"},{"location":"firststeps/#programmstruktur-in-c","text":"Nachfolgend findest du die typische Programmstruktur eines C # -Skripts (mit Erkl\u00e4rungen): //BIBLIOTHEKEN = PROGRAMMTEILE, DIE IN DAS SCRIPT IMPORTIERT WERDEN using System ; //using = EIN SCHL\u00dcSSELWORT IN C#; using System HEI\u00dfT: verwende alle Klassen im Namespace(= Programmateil) System using System.Collections ; using System.Collections.Generic ; using UnityEngine ; //DIESE BIBLIOTHEK ERM\u00d6GLICHT ETWA DEN ZUGRIFF AUF DIE UNITY SPIEL-ENGINE //EINE KLASSE = class bezeichnung {... Inhalte der Klasse ...} public class halloelli : MonoBehaviour //DIESE KLASSE ERBT VON MonoBehaviour - IST ALSO F\u00dcR EIN GAMEOBJECT { //KLASSEN-ATTRIBUTE (EIGENSCHAFTEN) WERDEN IN VARIABLEN GEFASST int punkte = 1 ; string troeten = Tr\u00f6\u00f6\u00f6t. ; //FUNKTION(EN) DER KLASSE void OnDisable () { //STATEMENT(S) - AUSDR\u00dcCKE Debug . Log ( Hallo Elli! ); /* Dies * ist ein * mehrzeiliges * Kommentar */ //Dies ist ein einzeiliges Kommentar } } ACHTUNG Gro\u00df- und Kleinschreibung wird beachtet! Alle Statements und Ausdr\u00fccke werden mit ; beendet! Jedes C # -Programm startet mit einer main-Funktion! (Diese wird von Unity im Hintergrund aufgerufen, wenn du dein Spiel startest.)","title":"Programmstruktur in C#"},{"location":"firststeps/#weiterfuhrende-resourcen","text":"Grundlagen der Sprache C # (aus dem Visual C # Handbuch) Introduction to Unity Tutorial Teil 1 (Ray Wenderlich, Englisch) Introduction to Unity Tutorial Teil 2 (Ray Wenderlich, Englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"functions/","text":"Funktionen Funktionen ohne R\u00fcckgabewert Funktionen mit R\u00fcckgabewert Weiterf\u00fchrende Resourcen","title":"Funktionen"},{"location":"functions/#funktionen","text":"","title":"Funktionen"},{"location":"functions/#funktionen-ohne-ruckgabewert","text":"","title":"Funktionen ohne R\u00fcckgabewert"},{"location":"functions/#funktionen-mit-ruckgabewert","text":"","title":"Funktionen mit R\u00fcckgabewert"},{"location":"functions/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"gameloop/","text":"Die Spielschleife Was ist eine Spielschleife? In einer Spielschleife werden neben Kollisionsabfragen und der Bewegungsteuerung sogar noch viel grundlegendere Dinge, wie etwa das Zeichnen des Spieleinhalts erledigt. Eine Spielschleife ist eine Schleife, die fortlaufend wieder wiederholt wird und eine Handvoll wichtiger Grundfunktionen f\u00fcr ein Spiel beinhaltet. Eine typische Spielschleife sieht vom Konzept her etwa folgenderma\u00dfen aus: Weshalb ben\u00f6tigt man eine Spielschleife? Die Spielschleife sorgt daf\u00fcr, dass Ereignisse, die zum Spiel geh\u00f6ren, fortlaufend stattfinden. Frage: \"Kann man die Spielschleife nicht einfach selbst mit einer While-Schleife implementieren?\" Antwort: \"M\u00f6glich ist das schon, aber die Spielschleife von Spieleentwicklungswerkzeugen beinhaltet auch Geschwindigkeitsoptimierungen, d.h. sie tr\u00e4gt die Verantwortung daf\u00fcr, dass Spiele in der uns bekannten Geschwindigkeit auf g\u00e4ngiger Hardware ablaufen k\u00f6nnen. Mit einer selbstgemachten, nicht-optimierten Spielschleife, kann es leicht passieren, dass Spieler und Spielerinnen in einem halbwegs komplexen Spiel gerade mal alle 30 Sekunden einen Schritt machen k\u00f6nnen - Nicht gerade der gr\u00f6\u00dfte Spielspa\u00df!\" Ein weiteres Problem ist, dass das Spiel auf unterschiedlicher Hardware unterschiedlich schnell l\u00e4uft. Um eine professionelle Implementierung einer Spielschleife kommt man in der Spieleentwicklung nicht herum. Einklinken in die Spielschleife in Unity Folgende Funktionen eines Spielobjekt-Skripts werden in der Unity-Spielschleife ausgef\u00fchrt: Eine genaue Beschreibung der Funktionen findest du in der offiziellen Unity Programmier-Referenz .","title":"Die Spiel-Schleife"},{"location":"gameloop/#die-spielschleife","text":"","title":"Die Spielschleife"},{"location":"gameloop/#was-ist-eine-spielschleife","text":"In einer Spielschleife werden neben Kollisionsabfragen und der Bewegungsteuerung sogar noch viel grundlegendere Dinge, wie etwa das Zeichnen des Spieleinhalts erledigt. Eine Spielschleife ist eine Schleife, die fortlaufend wieder wiederholt wird und eine Handvoll wichtiger Grundfunktionen f\u00fcr ein Spiel beinhaltet. Eine typische Spielschleife sieht vom Konzept her etwa folgenderma\u00dfen aus:","title":"Was ist eine Spielschleife?"},{"location":"gameloop/#weshalb-benotigt-man-eine-spielschleife","text":"Die Spielschleife sorgt daf\u00fcr, dass Ereignisse, die zum Spiel geh\u00f6ren, fortlaufend stattfinden. Frage: \"Kann man die Spielschleife nicht einfach selbst mit einer While-Schleife implementieren?\" Antwort: \"M\u00f6glich ist das schon, aber die Spielschleife von Spieleentwicklungswerkzeugen beinhaltet auch Geschwindigkeitsoptimierungen, d.h. sie tr\u00e4gt die Verantwortung daf\u00fcr, dass Spiele in der uns bekannten Geschwindigkeit auf g\u00e4ngiger Hardware ablaufen k\u00f6nnen. Mit einer selbstgemachten, nicht-optimierten Spielschleife, kann es leicht passieren, dass Spieler und Spielerinnen in einem halbwegs komplexen Spiel gerade mal alle 30 Sekunden einen Schritt machen k\u00f6nnen - Nicht gerade der gr\u00f6\u00dfte Spielspa\u00df!\" Ein weiteres Problem ist, dass das Spiel auf unterschiedlicher Hardware unterschiedlich schnell l\u00e4uft. Um eine professionelle Implementierung einer Spielschleife kommt man in der Spieleentwicklung nicht herum.","title":"Weshalb ben\u00f6tigt man eine Spielschleife?"},{"location":"gameloop/#einklinken-in-die-spielschleife-in-unity","text":"Folgende Funktionen eines Spielobjekt-Skripts werden in der Unity-Spielschleife ausgef\u00fchrt: Eine genaue Beschreibung der Funktionen findest du in der offiziellen Unity Programmier-Referenz .","title":"Einklinken in die Spielschleife in Unity"},{"location":"loops/","text":"Schleifen for-Schleife while-Schleife Schl\u00fcsselw\u00f6rter \"break\" (Abbrechen) und \"continue\" (Weitermachen) Weiterf\u00fchrende Resourcen","title":"Schleifen"},{"location":"loops/#schleifen","text":"","title":"Schleifen"},{"location":"loops/#for-schleife","text":"","title":"for-Schleife"},{"location":"loops/#while-schleife","text":"","title":"while-Schleife"},{"location":"loops/#schlusselworter-break-abbrechen-und-continue-weitermachen","text":"","title":"Schl\u00fcsselw\u00f6rter \"break\" (Abbrechen) und \"continue\" (Weitermachen)"},{"location":"loops/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"operators/","text":"Operatoren Arithmetische Operatoren Logische Operatoren Weiterf\u00fchrende Resourcen","title":"Operatoren"},{"location":"operators/#operatoren","text":"","title":"Operatoren"},{"location":"operators/#arithmetische-operatoren","text":"","title":"Arithmetische Operatoren"},{"location":"operators/#logische-operatoren","text":"","title":"Logische Operatoren"},{"location":"operators/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"teachers/","text":"F\u00fcr Lehrpersonen Lernergebnis Strukturmodell Voraussetzungen: DigiKomp(DK) 31., 3.3 Inhalte: Objekt-orientierte Programmierung Datenstrukturen Variablen Datentypen Operatoren Kontrollstrukturen Verzweigungen Schleifen Bereiche und Zugriffskontrolle Objekte Funktionen Klassen (Erzeugung, Kapselung, Vererbung) Automatentheorie Objekt-Zust\u00e4nde Pr\u00e4sentation Programmierstil Bedeutungsvolle Bezeichnungen Programmierkonventionen Kognitive Prozesse Probleml\u00f6sungsorientierung Verwendung von Algorithmen Testen De-Buggen Lesen (Interpretation von Programmfunktionalit\u00e4t) Implementierung (Entwicklung von ausf\u00fchrbaren Programmen) Meta-Kognitive Prozesse Teamarbeit Gemeinsam Probleme l\u00f6sen Gemeinsam Ideen umsetzen Arbeitsteilung Selbstbestimmung Weiterf\u00fchrende Entwicklung von Anwendungen Verwendung von Dokumentation Kreativit\u00e4t Originalit\u00e4t Ergebnisse: DK 1.4, 4.1, 4.2, 4.3, 4.4 Siehe auch: Kramer, M., Hubwieser, P., Brinda, T. (2016). A competency structure model of object-oriented programming. In Learning and Teaching in Computing and Engineering (LaTICE), 2016 International Conference on (pp. 1-8). IEEE. Unterrichtsmethoden Case Studies","title":"F\u00fcr Lehrpersonen"},{"location":"teachers/#fur-lehrpersonen","text":"","title":"F\u00fcr Lehrpersonen"},{"location":"teachers/#lernergebnis-strukturmodell","text":"Voraussetzungen: DigiKomp(DK) 31., 3.3 Inhalte: Objekt-orientierte Programmierung Datenstrukturen Variablen Datentypen Operatoren Kontrollstrukturen Verzweigungen Schleifen Bereiche und Zugriffskontrolle Objekte Funktionen Klassen (Erzeugung, Kapselung, Vererbung) Automatentheorie Objekt-Zust\u00e4nde Pr\u00e4sentation Programmierstil Bedeutungsvolle Bezeichnungen Programmierkonventionen Kognitive Prozesse Probleml\u00f6sungsorientierung Verwendung von Algorithmen Testen De-Buggen Lesen (Interpretation von Programmfunktionalit\u00e4t) Implementierung (Entwicklung von ausf\u00fchrbaren Programmen) Meta-Kognitive Prozesse Teamarbeit Gemeinsam Probleme l\u00f6sen Gemeinsam Ideen umsetzen Arbeitsteilung Selbstbestimmung Weiterf\u00fchrende Entwicklung von Anwendungen Verwendung von Dokumentation Kreativit\u00e4t Originalit\u00e4t Ergebnisse: DK 1.4, 4.1, 4.2, 4.3, 4.4 Siehe auch: Kramer, M., Hubwieser, P., Brinda, T. (2016). A competency structure model of object-oriented programming. In Learning and Teaching in Computing and Engineering (LaTICE), 2016 International Conference on (pp. 1-8). IEEE.","title":"Lernergebnis Strukturmodell"},{"location":"teachers/#unterrichtsmethoden","text":"","title":"Unterrichtsmethoden"},{"location":"teachers/#case-studies","text":"","title":"Case Studies"},{"location":"transform/","text":"Unity Transform Spielobjektkomponente Eigenschaften von Transform Krapfenklicker Erweiterung","title":"Transform Spielobjektkomponente"},{"location":"transform/#unity-transform-spielobjektkomponente","text":"","title":"Unity Transform Spielobjektkomponente"},{"location":"transform/#eigenschaften-von-transform","text":"","title":"Eigenschaften von Transform"},{"location":"transform/#krapfenklicker-erweiterung","text":"","title":"Krapfenklicker Erweiterung"},{"location":"userinterface/","text":"Bedienoberfl\u00e4chen Lernziele F\u00fcr die Spieleprogrammierung wirst du vorwiegend zwei Anwendungsprogramme verwenden: Unity zur Entwicklung von Spielszenen und Visual Studio zum Schreiben von Programm-Scripts. In diesem Kapitel lernst du die Bedienoberfl\u00e4chen von Unity und Visual Studio kennen. Du lernst auch, worauf du beim Anlegen eines neuen Projekts und beim Speichern in Unity achten musst. Unity Bedienoberfl\u00e4che Als Analogie f\u00fcr das Erschaffen eines Spiels kannst du dir vorstellen, einen Film zu machen. Unity besteht aus Men\u00fcs und Panels (=Bedienfelder), die verschiedene Aspekte des Spiel-projekts umfassen. Wie im Film bestehen in Unity Spiele aus einer oder mehrerer Szene(n) . Im Hierarchy Panel findest du alle GameObjects - Requisiten -, die du in der Szene, an der du gerade arbeitest, verwendest. Diese sind hierarchisch - nach Zugeh\u00f6rigkeit und nach der Reihe - geordnet. Die Reihenfolge kannst du per Drag and Drop ver\u00e4ndern. Im Inspector Panel kannst du Eigenschaften eines GameObjects ver\u00e4ndern, sowie Komponenten an ein GameObject \"anheften\". Die Szene, an der du momentan arbeitest, wird im Scene Panel angezeigt. Hier kannst du Requisiten aus dem Hierarchie-Panel in der Szene anordnen. Das Game Panel zeigt deine aktuelle Szene aus der Kameraperspektive. In diesem Panel kannst du dein Spiel testen, sobald du es startest. Wie es beim Filme-machen ein Requisiten-Lager gibt, so bietet Unity das Project Panel . Hier sind alle Assets - alle \"G\u00fcter\" oder Resourcen - deines Spiel-projekts auffindbar. Das Projekt-Panel ist als Dateisystem organisiert. Hier sammelst du alle Grafiken f\u00fcr dein Spiel, sowie alle Soundeffekte, Spielobjekt-Prototypen oder Szenenaufbauten deiner Spiel-Szenen. Um mehr \u00dcbersicht zu haben, k\u00f6nnen Assets in Ordnern gespeichert werden. Assets werden als GameObjects, Komponenten oder Komponenteneigenschaften in einer Szene verwendet. Szenen in Unity sind hierarchisch - in Ebenen - organisiert. Prinzipiell werden GameObjects in der Folge angezeigt, in der sie erzeugt werden. Per Drag and Drop k\u00f6nnen diese neu angeordnet werden oder gruppiert werden. Tipp Sowohl das Szenen-Panel wie auch das Projekt-Panel haben eine Suchfunktion. Neues Projekt anlegen Arbeitsauftrag Lege ein neues Projekt in Unity an. Es ist ein 2D-Spiel. Nenne es \"Hallo Elli\". ACHTUNG Merke dir, wo du dein Projekt am Computer anlegst. Wenn du wei\u00dft, wo dein Projekt ist, kannst du es leicht kopieren oder auf deinem USB Stick speichern. TIPP Du kannst auch in Unity \u00fcber den Men\u00fcpunkt \"Assets\" \"Im Dateimanager anzeigen\" die Dateien deines Projekts im Dateisystem auf deinem Computer anzeigen lassen. Spiel starten (und stoppen) ACHTUNG Alle \u00c4nderungen, die du in Unity vornimmst, w\u00e4hrend das Spiel gestartet ist, werden NICHT \u00fcbernommen, sobald du das Spiel wieder stoppst! Speichern In Unity k\u00f6nnen Szeneneinstellungen mit \"Save Scene\" gespeichert werden. Projekteinstellungen werden mit \"Save Project\" gespeichert. Visual Studio Bedienoberfl\u00e4che Visual Studio ist eine Programmierumgebung. C # -Skripte k\u00f6nnen in Visual Studio geschrieben werden. Damit geschriebener Code in Unity ausgef\u00fchrt werden kann, musst du dein Skript in Visual Studio speichern. Tipp Eine Tastenkombination f\u00fcr Speichern (in Visual Studio) ist: strg + s Weiterf\u00fchrende Resourcen Unity User Interface (englisch) Unity Hauptfenster (englisch) Visual Studio Grundlagen","title":"Bedienoberfl\u00e4chen"},{"location":"userinterface/#bedienoberflachen","text":"Lernziele F\u00fcr die Spieleprogrammierung wirst du vorwiegend zwei Anwendungsprogramme verwenden: Unity zur Entwicklung von Spielszenen und Visual Studio zum Schreiben von Programm-Scripts. In diesem Kapitel lernst du die Bedienoberfl\u00e4chen von Unity und Visual Studio kennen. Du lernst auch, worauf du beim Anlegen eines neuen Projekts und beim Speichern in Unity achten musst.","title":"Bedienoberfl\u00e4chen"},{"location":"userinterface/#unity-bedienoberflache","text":"Als Analogie f\u00fcr das Erschaffen eines Spiels kannst du dir vorstellen, einen Film zu machen. Unity besteht aus Men\u00fcs und Panels (=Bedienfelder), die verschiedene Aspekte des Spiel-projekts umfassen. Wie im Film bestehen in Unity Spiele aus einer oder mehrerer Szene(n) . Im Hierarchy Panel findest du alle GameObjects - Requisiten -, die du in der Szene, an der du gerade arbeitest, verwendest. Diese sind hierarchisch - nach Zugeh\u00f6rigkeit und nach der Reihe - geordnet. Die Reihenfolge kannst du per Drag and Drop ver\u00e4ndern. Im Inspector Panel kannst du Eigenschaften eines GameObjects ver\u00e4ndern, sowie Komponenten an ein GameObject \"anheften\". Die Szene, an der du momentan arbeitest, wird im Scene Panel angezeigt. Hier kannst du Requisiten aus dem Hierarchie-Panel in der Szene anordnen. Das Game Panel zeigt deine aktuelle Szene aus der Kameraperspektive. In diesem Panel kannst du dein Spiel testen, sobald du es startest. Wie es beim Filme-machen ein Requisiten-Lager gibt, so bietet Unity das Project Panel . Hier sind alle Assets - alle \"G\u00fcter\" oder Resourcen - deines Spiel-projekts auffindbar. Das Projekt-Panel ist als Dateisystem organisiert. Hier sammelst du alle Grafiken f\u00fcr dein Spiel, sowie alle Soundeffekte, Spielobjekt-Prototypen oder Szenenaufbauten deiner Spiel-Szenen. Um mehr \u00dcbersicht zu haben, k\u00f6nnen Assets in Ordnern gespeichert werden. Assets werden als GameObjects, Komponenten oder Komponenteneigenschaften in einer Szene verwendet. Szenen in Unity sind hierarchisch - in Ebenen - organisiert. Prinzipiell werden GameObjects in der Folge angezeigt, in der sie erzeugt werden. Per Drag and Drop k\u00f6nnen diese neu angeordnet werden oder gruppiert werden. Tipp Sowohl das Szenen-Panel wie auch das Projekt-Panel haben eine Suchfunktion.","title":"Unity Bedienoberfl\u00e4che"},{"location":"userinterface/#neues-projekt-anlegen","text":"Arbeitsauftrag Lege ein neues Projekt in Unity an. Es ist ein 2D-Spiel. Nenne es \"Hallo Elli\". ACHTUNG Merke dir, wo du dein Projekt am Computer anlegst. Wenn du wei\u00dft, wo dein Projekt ist, kannst du es leicht kopieren oder auf deinem USB Stick speichern. TIPP Du kannst auch in Unity \u00fcber den Men\u00fcpunkt \"Assets\" \"Im Dateimanager anzeigen\" die Dateien deines Projekts im Dateisystem auf deinem Computer anzeigen lassen.","title":"Neues Projekt anlegen"},{"location":"userinterface/#spiel-starten-und-stoppen","text":"ACHTUNG Alle \u00c4nderungen, die du in Unity vornimmst, w\u00e4hrend das Spiel gestartet ist, werden NICHT \u00fcbernommen, sobald du das Spiel wieder stoppst!","title":"Spiel starten (und stoppen)"},{"location":"userinterface/#speichern","text":"In Unity k\u00f6nnen Szeneneinstellungen mit \"Save Scene\" gespeichert werden. Projekteinstellungen werden mit \"Save Project\" gespeichert.","title":"Speichern"},{"location":"userinterface/#visual-studio-bedienoberflache","text":"Visual Studio ist eine Programmierumgebung. C # -Skripte k\u00f6nnen in Visual Studio geschrieben werden. Damit geschriebener Code in Unity ausgef\u00fchrt werden kann, musst du dein Skript in Visual Studio speichern. Tipp Eine Tastenkombination f\u00fcr Speichern (in Visual Studio) ist: strg + s","title":"Visual Studio Bedienoberfl\u00e4che"},{"location":"userinterface/#weiterfuhrende-resourcen","text":"Unity User Interface (englisch) Unity Hauptfenster (englisch) Visual Studio Grundlagen","title":"Weiterf\u00fchrende Resourcen"},{"location":"variables/","text":"Variablen Lernziele In diesem Kapitel lernst du was Variablen beim Programmieren sind. Du lernst, wie du eine Variable erzeugen kannst durch Deklarieren und Initialisieren . Au\u00dferdem lernst du, was Datentypen sind. Das bedeutet: Der Integer-Variable \"meineVariable\" wird der Wert 1 zugewiesen. Man kann auch sagen: Die Integer-Variable \"meineVariable\" wird mit dem Wert 1 initialisiert. Wozu Variablen? Mit Variablen kannst du Daten speichern und \u00e4ndern. Ein Beispiel: int x = 1 ; int y = 2 ; int z = x + y ; \u00dcbung Welchen Wert hat z? Letztlich bezeichnen Variablen einen Speicherplatz. Man kann sich das etwa wie ein Postfach vorstellen, auf dem eine Address-Bezeichnung steht. Diesem Speicherplatz k\u00f6nnen Werte (also Daten) zugewiesen werden. Zuweisen kann man in C # mit dem Zuweisungs-Operator = . Deklarieren und Initialisieren Deklarieren bedeutet, dass man eine Variable benennt und ihr einen Datentyp zuordnet. Datentypen bezeichnen die Form der Daten, also was die Nullen und Einser in einer Bit-Folge jeweils bedeuten. Tipp Ein Bit ist die kleinste Einheit, mit der Computer rechnen. Ein Bit ist entweder 0 oder 1. Mit Bits kann man im Bin\u00e4rsystem rechnen . Initialisieren bedeutet, dass man einer Variable das erste Mal einen Wert zuweist. \u00dcbung Analysiere folgenden Quellcode. In welcher Zeile wird eine Variable deklariert? Wo wird eine Variable deklariert und initialisiert? int x; int y = 2; Datentypen Datentypen zeigen an, welche Art von Daten einer Variable zugewiesen werden k\u00f6nnen. Sie zeigen an, wie Daten (also Folgen von Nullen und Einsen) interpretiert werden sollen. Wichtige Datentypen sind: Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 32-bit Float (Gleitkommazahlen) -3,4mal10hoch38 bis 3,4mal10hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,0mal10hoch-324 bis (+/-)1,7mal10hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Skript halloelli.cs um zwei Variablen: string spiel und int preis . Weise der Variable \"spiel\" den Wert \"Elli Dance\" zu. Weise der Variable \"preis\" den Wert 5 zu. Erg\u00e4nze Debug.Log() um folgenden string: \"Das Spiel\" + spiel + \"kostet\" + preis + \"Euro.\" Tipp + ist der Additions-Operator. Bei Zahlen addiert dieser, strings werden durch diesen zusammengef\u00fcgt. Umwandlung von Datentypen Datentypen k\u00f6nnen manchmal in andere Datentypen umgewandelt werden. Folgende Funktionen erm\u00f6glichen neben anderen eine Typ-Umwandlung: .ToInt(), .ToBool(), .ToString() Ein Beispiel: int i = 75 ; string zahl = i . ToString (); Variablen-Bereich (Scope) Variablen, die au\u00dferhalb eines Code-Blocks (ist gekennzeichnet durch { ... } ) deklariert (also angegeben) werden, k\u00f6nnen im Code-Block verwendet werden. Variablen, die im Code-Block angegeben werden, k\u00f6nnen nur dort verwendet werden. Wird einer Variable bei der Deklarierung das Schl\u00fcsselwort public vorgesetzt, so k\u00f6nnen auch Objekte darauf zugreifen, denen das Skript nicht \"angeheftet\" ist. Wenn eine Variable private ist, so kann nur das GameObject, dem das Skript angeheftet ist, darauf zugreifen. Weiterf\u00fchrende Resourcen","title":"Variablen"},{"location":"variables/#variablen","text":"Lernziele In diesem Kapitel lernst du was Variablen beim Programmieren sind. Du lernst, wie du eine Variable erzeugen kannst durch Deklarieren und Initialisieren . Au\u00dferdem lernst du, was Datentypen sind. Das bedeutet: Der Integer-Variable \"meineVariable\" wird der Wert 1 zugewiesen. Man kann auch sagen: Die Integer-Variable \"meineVariable\" wird mit dem Wert 1 initialisiert.","title":"Variablen"},{"location":"variables/#wozu-variablen","text":"Mit Variablen kannst du Daten speichern und \u00e4ndern. Ein Beispiel: int x = 1 ; int y = 2 ; int z = x + y ; \u00dcbung Welchen Wert hat z? Letztlich bezeichnen Variablen einen Speicherplatz. Man kann sich das etwa wie ein Postfach vorstellen, auf dem eine Address-Bezeichnung steht. Diesem Speicherplatz k\u00f6nnen Werte (also Daten) zugewiesen werden. Zuweisen kann man in C # mit dem Zuweisungs-Operator = .","title":"Wozu Variablen?"},{"location":"variables/#deklarieren-und-initialisieren","text":"Deklarieren bedeutet, dass man eine Variable benennt und ihr einen Datentyp zuordnet. Datentypen bezeichnen die Form der Daten, also was die Nullen und Einser in einer Bit-Folge jeweils bedeuten. Tipp Ein Bit ist die kleinste Einheit, mit der Computer rechnen. Ein Bit ist entweder 0 oder 1. Mit Bits kann man im Bin\u00e4rsystem rechnen . Initialisieren bedeutet, dass man einer Variable das erste Mal einen Wert zuweist. \u00dcbung Analysiere folgenden Quellcode. In welcher Zeile wird eine Variable deklariert? Wo wird eine Variable deklariert und initialisiert? int x; int y = 2;","title":"Deklarieren und Initialisieren"},{"location":"variables/#datentypen","text":"Datentypen zeigen an, welche Art von Daten einer Variable zugewiesen werden k\u00f6nnen. Sie zeigen an, wie Daten (also Folgen von Nullen und Einsen) interpretiert werden sollen. Wichtige Datentypen sind: Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 32-bit Float (Gleitkommazahlen) -3,4mal10hoch38 bis 3,4mal10hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,0mal10hoch-324 bis (+/-)1,7mal10hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Skript halloelli.cs um zwei Variablen: string spiel und int preis . Weise der Variable \"spiel\" den Wert \"Elli Dance\" zu. Weise der Variable \"preis\" den Wert 5 zu. Erg\u00e4nze Debug.Log() um folgenden string: \"Das Spiel\" + spiel + \"kostet\" + preis + \"Euro.\" Tipp + ist der Additions-Operator. Bei Zahlen addiert dieser, strings werden durch diesen zusammengef\u00fcgt.","title":"Datentypen"},{"location":"variables/#umwandlung-von-datentypen","text":"Datentypen k\u00f6nnen manchmal in andere Datentypen umgewandelt werden. Folgende Funktionen erm\u00f6glichen neben anderen eine Typ-Umwandlung: .ToInt(), .ToBool(), .ToString() Ein Beispiel: int i = 75 ; string zahl = i . ToString ();","title":"Umwandlung von Datentypen"},{"location":"variables/#variablen-bereich-scope","text":"Variablen, die au\u00dferhalb eines Code-Blocks (ist gekennzeichnet durch { ... } ) deklariert (also angegeben) werden, k\u00f6nnen im Code-Block verwendet werden. Variablen, die im Code-Block angegeben werden, k\u00f6nnen nur dort verwendet werden. Wird einer Variable bei der Deklarierung das Schl\u00fcsselwort public vorgesetzt, so k\u00f6nnen auch Objekte darauf zugreifen, denen das Skript nicht \"angeheftet\" ist. Wenn eine Variable private ist, so kann nur das GameObject, dem das Skript angeheftet ist, darauf zugreifen.","title":"Variablen-Bereich (Scope)"},{"location":"variables/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"tables/datatypes/","text":"Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 31-bit Float (Gleitkommazahlen) -3,4 10hoch38 bis 3,4 10hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,0 10hoch-324 bis (+/-)1,7 10hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null","title":"Datatypes"}]}