{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"learn2proGrAME Grundlagentutorial Spiele programmieren mit C# in Unity - Grundlagentutorial WORK IN PROGRESS Was ist learn2proGrAME? Bei learn2proGrAME k\u00f6nnen Sch\u00fclerinnen und Sch\u00fcler durch Spiele programmieren das Programmieren mit einer text-basierten Programmiersprache in einer professionellen Spieleprogrammierumgebung lernen. Die learn2proGrAME Unterlagen - wie etwa dieses Tutorial - sind offen online zug\u00e4nglich . Viel Spass beim Spiele entwickeln! Was wirst du in diesem Tutorial lernen? In diesem Tutorial lernst du die Grundlagen zur Spieleprogrammierung in Unity mit der Programmiersprache C#. Dabei wirst du zuerst die Bedienoberfl\u00e4chen von Unity und Visual Studio erkunden. Danach schreibst du dein erstes Programm in C# . Wie gehen Programmiererinnen und Programmierer mit Fehlern um? Dar\u00fcber erf\u00e4hrst du mehr im Kapitel zu De-Bugging . Anschlie\u00dfend lernst du \u00fcber Variablen , Operatoren und Funkionen , um dein erstes Spiel, das allseits beliebte Krapfenklicker , zu entwickeln. Nachdem du die Unity Spielobjektkomponente Transform kennengelernt hast, kannst du eine Spielerweiterung f\u00fcr Krapfenklicker schreiben. Beim n\u00e4chsten selbstgeschriebenen Spiel - Ellis' gro\u00dfes Abenteuer - lernst du, mit Verzweigungen Spielzust\u00e4nde zu erzeugen und Figuren in einem Grafikprogramm namens GIMP zu zeichnen . Als Vorbereitung auf das Jump'n'Run artige Arcade Spiel BouncyFant wird letztlich die Schleife - insbesondere die Spielschleife - als wichtiger Aspekt der Spieleprogrammierung vorgestellt. Nach dem Tutorial... Im Anschluss an dieses Grundlagentutorial kannst du das BouncyFant Tutorial starten, in dem du ein Jump'n'Run-artiges Arcade Spiel entwickelst! Was wirst du im BouncyFant Tutorial lernen? Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2D Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Objekt-orienterte Programmierung: Vererbung, Kapselung Spiellogik Weiter zu BouncyFant ...","title":"Einleitung"},{"location":"#learn2programe-grundlagentutorial","text":"Spiele programmieren mit C# in Unity - Grundlagentutorial WORK IN PROGRESS","title":"learn2proGrAME Grundlagentutorial"},{"location":"#was-ist-learn2programe","text":"Bei learn2proGrAME k\u00f6nnen Sch\u00fclerinnen und Sch\u00fcler durch Spiele programmieren das Programmieren mit einer text-basierten Programmiersprache in einer professionellen Spieleprogrammierumgebung lernen. Die learn2proGrAME Unterlagen - wie etwa dieses Tutorial - sind offen online zug\u00e4nglich . Viel Spass beim Spiele entwickeln!","title":"Was ist learn2proGrAME?"},{"location":"#was-wirst-du-in-diesem-tutorial-lernen","text":"In diesem Tutorial lernst du die Grundlagen zur Spieleprogrammierung in Unity mit der Programmiersprache C#. Dabei wirst du zuerst die Bedienoberfl\u00e4chen von Unity und Visual Studio erkunden. Danach schreibst du dein erstes Programm in C# . Wie gehen Programmiererinnen und Programmierer mit Fehlern um? Dar\u00fcber erf\u00e4hrst du mehr im Kapitel zu De-Bugging . Anschlie\u00dfend lernst du \u00fcber Variablen , Operatoren und Funkionen , um dein erstes Spiel, das allseits beliebte Krapfenklicker , zu entwickeln. Nachdem du die Unity Spielobjektkomponente Transform kennengelernt hast, kannst du eine Spielerweiterung f\u00fcr Krapfenklicker schreiben. Beim n\u00e4chsten selbstgeschriebenen Spiel - Ellis' gro\u00dfes Abenteuer - lernst du, mit Verzweigungen Spielzust\u00e4nde zu erzeugen und Figuren in einem Grafikprogramm namens GIMP zu zeichnen . Als Vorbereitung auf das Jump'n'Run artige Arcade Spiel BouncyFant wird letztlich die Schleife - insbesondere die Spielschleife - als wichtiger Aspekt der Spieleprogrammierung vorgestellt.","title":"Was wirst du in diesem Tutorial lernen?"},{"location":"#nach-dem-tutorial","text":"Im Anschluss an dieses Grundlagentutorial kannst du das BouncyFant Tutorial starten, in dem du ein Jump'n'Run-artiges Arcade Spiel entwickelst! Was wirst du im BouncyFant Tutorial lernen? Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2D Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Objekt-orienterte Programmierung: Vererbung, Kapselung Spiellogik Weiter zu BouncyFant ...","title":"Nach dem Tutorial..."},{"location":"about/","text":"\u00dcber learn2proGrAME Das Projekt Unter welchen Bedingungen kann Computerspieleentwicklung das Programmierenlernen verbessern? Der Grundgedanke des Projekts lautet: Sch\u00fclerinnen und Sch\u00fcler erforschen das eigene Programmierenlernen im Zuge der Entwicklung von Computerspielen und k\u00f6nnen so \u00fcber Prozesse Erkenntnisse gewinnen, die den Forschenden, die bereits programmieren k\u00f6nnen, nicht mehr genuin zug\u00e4nglich sind (bzw. jenen Forschenden, die nicht planen programmieren zu lernen, \u00fcberhaupt nicht zug\u00e4nglich sind). Im Zuge des Lernprozesses nehmen die Sch\u00fclerinnen und Sch\u00fcler nicht nur die herk\u00f6mmliche Rolle von Lernenden ein, sondern reflektieren ihr Lernen aktiv im Austausch mit den anderen Beteiligten und leisten damit einen Beitrag zur Generierung von neuem Wissen. Programmieren lernen ist f\u00fcr die meisten Menschen eine gro\u00dfe Herausforderung und nicht selten mit zahlreichen Schwierigkeiten verbunden. Das gilt auch f\u00fcr f\u00fcnfzehnj\u00e4hrige Sch\u00fclerinnen und Sch\u00fcler. Im Projekt proGrAME soll das Programmierenlernen der Sch\u00fclerinnen und Sch\u00fcler der neunten Schulstufe (5. Klasse AHS) durch Computerspielentwicklung erfolgen und begleitend durch Wissenschaftlerinnen und Wissenschaftler, Sch\u00fclerinnen und Sch\u00fcler aus h\u00f6heren Schulstufen im Rahmen der Wahlpflichtf\u00e4cher Psychologie/Philosophie und Informatik und auch durch die Programmieren-Lernenden selbst, erforscht werden. In diesem Prozess entwickeln und erproben Wissenschaftlerinnen und Wissenschaftler gemeinsam mit den Lernenden, didaktische Szenarien mit Spieleentwicklungsumgebungen und identifizieren signifikante Erfahrungen sowie Probleme beim Programmieren lernen und erarbeiten gemeinsam nachhaltige L\u00f6sungen.\u201c Das Team","title":"\u00dcber learn2proGrAME"},{"location":"about/#uber-learn2programe","text":"","title":"\u00dcber learn2proGrAME"},{"location":"about/#das-projekt","text":"Unter welchen Bedingungen kann Computerspieleentwicklung das Programmierenlernen verbessern? Der Grundgedanke des Projekts lautet: Sch\u00fclerinnen und Sch\u00fcler erforschen das eigene Programmierenlernen im Zuge der Entwicklung von Computerspielen und k\u00f6nnen so \u00fcber Prozesse Erkenntnisse gewinnen, die den Forschenden, die bereits programmieren k\u00f6nnen, nicht mehr genuin zug\u00e4nglich sind (bzw. jenen Forschenden, die nicht planen programmieren zu lernen, \u00fcberhaupt nicht zug\u00e4nglich sind). Im Zuge des Lernprozesses nehmen die Sch\u00fclerinnen und Sch\u00fcler nicht nur die herk\u00f6mmliche Rolle von Lernenden ein, sondern reflektieren ihr Lernen aktiv im Austausch mit den anderen Beteiligten und leisten damit einen Beitrag zur Generierung von neuem Wissen. Programmieren lernen ist f\u00fcr die meisten Menschen eine gro\u00dfe Herausforderung und nicht selten mit zahlreichen Schwierigkeiten verbunden. Das gilt auch f\u00fcr f\u00fcnfzehnj\u00e4hrige Sch\u00fclerinnen und Sch\u00fcler. Im Projekt proGrAME soll das Programmierenlernen der Sch\u00fclerinnen und Sch\u00fcler der neunten Schulstufe (5. Klasse AHS) durch Computerspielentwicklung erfolgen und begleitend durch Wissenschaftlerinnen und Wissenschaftler, Sch\u00fclerinnen und Sch\u00fcler aus h\u00f6heren Schulstufen im Rahmen der Wahlpflichtf\u00e4cher Psychologie/Philosophie und Informatik und auch durch die Programmieren-Lernenden selbst, erforscht werden. In diesem Prozess entwickeln und erproben Wissenschaftlerinnen und Wissenschaftler gemeinsam mit den Lernenden, didaktische Szenarien mit Spieleentwicklungsumgebungen und identifizieren signifikante Erfahrungen sowie Probleme beim Programmieren lernen und erarbeiten gemeinsam nachhaltige L\u00f6sungen.\u201c","title":"Das Projekt"},{"location":"about/#das-team","text":"","title":"Das Team"},{"location":"adventure/","text":"Ellis' gro\u00dfes Abenteuer Ellis' gro\u00dfes Abenteuer - Ein Text-basiertes Adventurespiel","title":"Spiel - Ellis' gro\u00dfes Abenteuer"},{"location":"adventure/#ellis-groes-abenteuer","text":"","title":"Ellis' gro\u00dfes Abenteuer"},{"location":"adventure/#ellis-groes-abenteuer-ein-text-basiertes-adventurespiel","text":"","title":"Ellis' gro\u00dfes Abenteuer - Ein Text-basiertes Adventurespiel"},{"location":"classes/","text":"Objekt-orientiertes Programmieren - Grundlagen Klasse und Instanz Eigenschaften Funktionen Ein Beispiel Weiterf\u00fchrende Informationen BouncyFant - Intro Nach dem Grundlagentutorial hast du genug Infos und Programmiererfahrung gesammelt, um das BouncyFant Tutorial zu beginnen. Nat\u00fcrlich kannst du jederzeit auf das Grundlagentutorial zur\u00fcckgreifen, wenn du es brauchst. Was wirst du im BouncyFant Tutorial lernen? Mehr zu Objekt-orienterter Programmierung: Vererbung, Kapselung und auch Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2d Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Spiellogik","title":"Objekt-orientiertes Programmieren - Grundlagen"},{"location":"classes/#objekt-orientiertes-programmieren-grundlagen","text":"","title":"Objekt-orientiertes Programmieren - Grundlagen"},{"location":"classes/#klasse-und-instanz","text":"","title":"Klasse und Instanz"},{"location":"classes/#eigenschaften","text":"","title":"Eigenschaften"},{"location":"classes/#funktionen","text":"","title":"Funktionen"},{"location":"classes/#ein-beispiel","text":"","title":"Ein Beispiel"},{"location":"classes/#weiterfuhrende-informationen","text":"","title":"Weiterf\u00fchrende Informationen"},{"location":"classes/#bouncyfant-intro","text":"Nach dem Grundlagentutorial hast du genug Infos und Programmiererfahrung gesammelt, um das BouncyFant Tutorial zu beginnen. Nat\u00fcrlich kannst du jederzeit auf das Grundlagentutorial zur\u00fcckgreifen, wenn du es brauchst. Was wirst du im BouncyFant Tutorial lernen? Mehr zu Objekt-orienterter Programmierung: Vererbung, Kapselung und auch Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2d Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Spiellogik","title":"BouncyFant - Intro"},{"location":"conditionals/","text":"Verzweigungen Wenn - Dann Vergleichsoperatoren Ein Beispiel Weiterf\u00fchrende Resourcen","title":"Verzweigungen"},{"location":"conditionals/#verzweigungen","text":"","title":"Verzweigungen"},{"location":"conditionals/#wenn-dann","text":"","title":"Wenn - Dann"},{"location":"conditionals/#vergleichsoperatoren","text":"","title":"Vergleichsoperatoren"},{"location":"conditionals/#ein-beispiel","text":"","title":"Ein Beispiel"},{"location":"conditionals/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"debugging/","text":"De-Bugging Was ist De-Bugging? De-Bugging in Unity? De-Bugging in Visual Studio Ein Beispiel","title":"Debugging"},{"location":"debugging/#de-bugging","text":"","title":"De-Bugging"},{"location":"debugging/#was-ist-de-bugging","text":"","title":"Was ist De-Bugging?"},{"location":"debugging/#de-bugging-in-unity","text":"","title":"De-Bugging in Unity?"},{"location":"debugging/#de-bugging-in-visual-studio","text":"","title":"De-Bugging in Visual Studio"},{"location":"debugging/#ein-beispiel","text":"","title":"Ein Beispiel"},{"location":"donutclicker/","text":"Krapfenklicker - Das Spiel","title":"Spiel - Krapfenklicker"},{"location":"donutclicker/#krapfenklicker-das-spiel","text":"","title":"Krapfenklicker - Das Spiel"},{"location":"drawingingimp/","text":"Figuren zeichnen in GIMP Gimp - \u00dcberblick Erste Schritte Character-Design in GIMP Ellis' Abenteuer 2 Weiterf\u00fchrende Resourcen","title":"Figuren zeichnen in GIMP"},{"location":"drawingingimp/#figuren-zeichnen-in-gimp","text":"","title":"Figuren zeichnen in GIMP"},{"location":"drawingingimp/#gimp-uberblick","text":"","title":"Gimp - \u00dcberblick"},{"location":"drawingingimp/#erste-schritte","text":"","title":"Erste Schritte"},{"location":"drawingingimp/#character-design-in-gimp","text":"","title":"Character-Design in GIMP"},{"location":"drawingingimp/#ellis-abenteuer-2","text":"","title":"Ellis' Abenteuer 2"},{"location":"drawingingimp/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"firststeps/","text":"Erste Schritte Lernziele In diesem Kapitel lernst du, was ein Algorithmus ist. Du unterscheidest Spielobjekte und deren Komponenten in Unity. Du organisierst Projektdateien zu deinem Spiel. Und: Du schreibst dein erstes Programm in C # . Was ist ein Algorithmus? Informatikerinnen und Informatiker besch\u00e4ftigen sich mit Algorithmen. Aber was ist das eigentlich - ein Algorithmus? Programmieren k\u00f6nnte man als Probleml\u00f6severfahren beschreiben. In unserem Fall ist das \"Problem\" etwa, dass wir ein Spiel erstellen wollen. Wir l\u00f6sen es durch Einsatz von Unity und C # . Dabei kann man festhalten, dass nach einer bestimmten Zeit ein Resultat - also ein Spiel - entstehen sollte. Ein bisschen allgemeiner k\u00f6nnte man daher sagen: Ein Algorithmus ist ein Probleml\u00f6severfahren in endlich vielen Schritten. \u00dcbung Schreibe in Stichworten einen Algorithmus f\u00fcr Z\u00e4hne putzen. Erste Schritte in Unity Spielobjekte und Komponenten In Unity besteht eine Szene aus einem oder mehreren Spielobjekt(en). Diese werden GameObject(s) genannt. Auch die Kamera, die eine Szene \"filmt\", ist ein GameObject. Spielobjekte k\u00f6nnen von unterschiedlicher Art sein. Die Art wird in einer Klasse festgelegt. Die Eigenschaften eines Spielobjekts werden durch Komponenten (Components) bestimmt. Jedes Spielobjekt hat etwa die Komponente Transform , mit Hilfe derer die Position, die Rotation und die Gr\u00f6\u00dfe (oder Skalierung) des Spielobjekts bestimmt werden kann. Auch physikalische Eigenschaften werden einem Spielobjekt durch eine Komponente verliehen. Bei 2D-Spielen hei\u00dft diese Rigidbody2D. Ebenso werden Grenzen eines Spielobjekts (f\u00fcr Kollisionsabfragen) durch eine Komponente - Collider - angegeben. C # -Skripte werden einem Spielobjekt \u00fcber \"Add Component\" \"New Script\" \"angeheftet\". Das besondere an Skripten ist, dass du darin auf andere Komponenten des Spielobjekts oder \u00fcberhaupt auf andere Spielobjekte in einer Szene zugreifen kannst. Weiters k\u00f6nnen Eingaben durch Keyboard, Maus oder GamePad verwendet oder andere Aspekte der Unity Spiel-Engine ver\u00e4ndert werden. Somit kannst du gezielt die Spiellogik f\u00fcr dein Spiel programmieren. Projektdateien Projektdateien findest du in Unity unter \"Project\" \"Assets\" . Mit \"Create\" kannst du dort neue Ordner und Dateien anlegen. Nat\u00fcrlich kannst du in Unity auch mit Drag and Drop Dateien importieren. Um sich \u00dcbersicht \u00fcber die verwendeten Dateien zu verschaffen, k\u00f6nnen Ordner angelegt werden. Arbeitsauftrag Lege folgende Ordner im \"Assets\"-Bereich von Unity an: Sprites : f\u00fcr alle 2D Grafiken Scripts : f\u00fcr alle C # Programm-Skripte Vorlagen : f\u00fcr Spielobjekte, die als Vorlage erstellt und verwendet werden Material : f\u00fcr physikalische Materialeigenschaften Tipp Du gelangst per Rechtsklick auf den \"Assets\" -Ordner zu einem Men\u00fc, in dem du ebenso \"Create\" findest. Arbeitsauftrag Lege die Datei elef.png im Ordner \"Sprites\" ab. Erste Schritte in C # Hallo Elli! Programmstruktur in C # Weiterf\u00fchrende Resourcen","title":"Erste Schritte"},{"location":"firststeps/#erste-schritte","text":"Lernziele In diesem Kapitel lernst du, was ein Algorithmus ist. Du unterscheidest Spielobjekte und deren Komponenten in Unity. Du organisierst Projektdateien zu deinem Spiel. Und: Du schreibst dein erstes Programm in C # .","title":"Erste Schritte"},{"location":"firststeps/#was-ist-ein-algorithmus","text":"Informatikerinnen und Informatiker besch\u00e4ftigen sich mit Algorithmen. Aber was ist das eigentlich - ein Algorithmus? Programmieren k\u00f6nnte man als Probleml\u00f6severfahren beschreiben. In unserem Fall ist das \"Problem\" etwa, dass wir ein Spiel erstellen wollen. Wir l\u00f6sen es durch Einsatz von Unity und C # . Dabei kann man festhalten, dass nach einer bestimmten Zeit ein Resultat - also ein Spiel - entstehen sollte. Ein bisschen allgemeiner k\u00f6nnte man daher sagen: Ein Algorithmus ist ein Probleml\u00f6severfahren in endlich vielen Schritten. \u00dcbung Schreibe in Stichworten einen Algorithmus f\u00fcr Z\u00e4hne putzen.","title":"Was ist ein Algorithmus?"},{"location":"firststeps/#erste-schritte-in-unity","text":"","title":"Erste Schritte in Unity"},{"location":"firststeps/#spielobjekte-und-komponenten","text":"In Unity besteht eine Szene aus einem oder mehreren Spielobjekt(en). Diese werden GameObject(s) genannt. Auch die Kamera, die eine Szene \"filmt\", ist ein GameObject. Spielobjekte k\u00f6nnen von unterschiedlicher Art sein. Die Art wird in einer Klasse festgelegt. Die Eigenschaften eines Spielobjekts werden durch Komponenten (Components) bestimmt. Jedes Spielobjekt hat etwa die Komponente Transform , mit Hilfe derer die Position, die Rotation und die Gr\u00f6\u00dfe (oder Skalierung) des Spielobjekts bestimmt werden kann. Auch physikalische Eigenschaften werden einem Spielobjekt durch eine Komponente verliehen. Bei 2D-Spielen hei\u00dft diese Rigidbody2D. Ebenso werden Grenzen eines Spielobjekts (f\u00fcr Kollisionsabfragen) durch eine Komponente - Collider - angegeben. C # -Skripte werden einem Spielobjekt \u00fcber \"Add Component\" \"New Script\" \"angeheftet\". Das besondere an Skripten ist, dass du darin auf andere Komponenten des Spielobjekts oder \u00fcberhaupt auf andere Spielobjekte in einer Szene zugreifen kannst. Weiters k\u00f6nnen Eingaben durch Keyboard, Maus oder GamePad verwendet oder andere Aspekte der Unity Spiel-Engine ver\u00e4ndert werden. Somit kannst du gezielt die Spiellogik f\u00fcr dein Spiel programmieren.","title":"Spielobjekte und Komponenten"},{"location":"firststeps/#projektdateien","text":"Projektdateien findest du in Unity unter \"Project\" \"Assets\" . Mit \"Create\" kannst du dort neue Ordner und Dateien anlegen. Nat\u00fcrlich kannst du in Unity auch mit Drag and Drop Dateien importieren. Um sich \u00dcbersicht \u00fcber die verwendeten Dateien zu verschaffen, k\u00f6nnen Ordner angelegt werden. Arbeitsauftrag Lege folgende Ordner im \"Assets\"-Bereich von Unity an: Sprites : f\u00fcr alle 2D Grafiken Scripts : f\u00fcr alle C # Programm-Skripte Vorlagen : f\u00fcr Spielobjekte, die als Vorlage erstellt und verwendet werden Material : f\u00fcr physikalische Materialeigenschaften Tipp Du gelangst per Rechtsklick auf den \"Assets\" -Ordner zu einem Men\u00fc, in dem du ebenso \"Create\" findest. Arbeitsauftrag Lege die Datei elef.png im Ordner \"Sprites\" ab.","title":"Projektdateien"},{"location":"firststeps/#erste-schritte-in-c","text":"","title":"Erste Schritte in C#"},{"location":"firststeps/#hallo-elli","text":"","title":"Hallo Elli!"},{"location":"firststeps/#programmstruktur-in-c","text":"","title":"Programmstruktur in C#"},{"location":"firststeps/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"functions/","text":"Funktionen Funktionen ohne R\u00fcckgabewert Funktionen mit R\u00fcckgabewert Weiterf\u00fchrende Resourcen","title":"Funktionen"},{"location":"functions/#funktionen","text":"","title":"Funktionen"},{"location":"functions/#funktionen-ohne-ruckgabewert","text":"","title":"Funktionen ohne R\u00fcckgabewert"},{"location":"functions/#funktionen-mit-ruckgabewert","text":"","title":"Funktionen mit R\u00fcckgabewert"},{"location":"functions/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"gameloop/","text":"Die Spielschleife Was ist eine Spielschleife? In einer Spielschleife werden neben Kollisionsabfragen und der Bewegungsteuerung sogar noch viel grundlegendere Dinge, wie etwa das Zeichnen des Spieleinhalts erledigt. Eine Spielschleife ist eine Schleife, die fortlaufend wieder wiederholt wird und eine Handvoll wichtiger Grundfunktionen f\u00fcr ein Spiel beinhaltet. Eine typische Spielschleife sieht vom Konzept her etwa folgenderma\u00dfen aus: Weshalb ben\u00f6tigt man eine Spielschleife? Die Spielschleife sorgt daf\u00fcr, dass Ereignisse, die zum Spiel geh\u00f6ren, fortlaufend stattfinden. Frage: \"Kann man die Spielschleife nicht einfach selbst mit einer While-Schleife implementieren?\" Antwort: \"M\u00f6glich ist das schon, aber die Spielschleife von Spieleentwicklungswerkzeugen beinhaltet auch Geschwindigkeitsoptimierungen, d.h. sie tr\u00e4gt die Verantwortung daf\u00fcr, dass Spiele in der uns bekannten Geschwindigkeit auf g\u00e4ngiger Hardware ablaufen k\u00f6nnen. Mit einer selbstgemachten, nicht-optimierten Spielschleife, kann es leicht passieren, dass Spieler und Spielerinnen in einem halbwegs komplexen Spiel gerade mal alle 30 Sekunden einen Schritt machen k\u00f6nnen - Nicht gerade der gr\u00f6\u00dfte Spielspa\u00df!\" Ein weiteres Problem ist, dass das Spiel auf unterschiedlicher Hardware unterschiedlich schnell l\u00e4uft. Um eine professionelle Implementierung einer Spielschleife kommt man in der Spieleentwicklung nicht herum.","title":"Die Spiel-Schleife"},{"location":"gameloop/#die-spielschleife","text":"","title":"Die Spielschleife"},{"location":"gameloop/#was-ist-eine-spielschleife","text":"In einer Spielschleife werden neben Kollisionsabfragen und der Bewegungsteuerung sogar noch viel grundlegendere Dinge, wie etwa das Zeichnen des Spieleinhalts erledigt. Eine Spielschleife ist eine Schleife, die fortlaufend wieder wiederholt wird und eine Handvoll wichtiger Grundfunktionen f\u00fcr ein Spiel beinhaltet. Eine typische Spielschleife sieht vom Konzept her etwa folgenderma\u00dfen aus:","title":"Was ist eine Spielschleife?"},{"location":"gameloop/#weshalb-benotigt-man-eine-spielschleife","text":"Die Spielschleife sorgt daf\u00fcr, dass Ereignisse, die zum Spiel geh\u00f6ren, fortlaufend stattfinden. Frage: \"Kann man die Spielschleife nicht einfach selbst mit einer While-Schleife implementieren?\" Antwort: \"M\u00f6glich ist das schon, aber die Spielschleife von Spieleentwicklungswerkzeugen beinhaltet auch Geschwindigkeitsoptimierungen, d.h. sie tr\u00e4gt die Verantwortung daf\u00fcr, dass Spiele in der uns bekannten Geschwindigkeit auf g\u00e4ngiger Hardware ablaufen k\u00f6nnen. Mit einer selbstgemachten, nicht-optimierten Spielschleife, kann es leicht passieren, dass Spieler und Spielerinnen in einem halbwegs komplexen Spiel gerade mal alle 30 Sekunden einen Schritt machen k\u00f6nnen - Nicht gerade der gr\u00f6\u00dfte Spielspa\u00df!\" Ein weiteres Problem ist, dass das Spiel auf unterschiedlicher Hardware unterschiedlich schnell l\u00e4uft. Um eine professionelle Implementierung einer Spielschleife kommt man in der Spieleentwicklung nicht herum.","title":"Weshalb ben\u00f6tigt man eine Spielschleife?"},{"location":"loops/","text":"Schleifen for-Schleife while-Schleife Schl\u00fcsselw\u00f6rter \"break\" (Abbrechen) und \"continue\" (Weitermachen) Weiterf\u00fchrende Resourcen","title":"Schleifen"},{"location":"loops/#schleifen","text":"","title":"Schleifen"},{"location":"loops/#for-schleife","text":"","title":"for-Schleife"},{"location":"loops/#while-schleife","text":"","title":"while-Schleife"},{"location":"loops/#schlusselworter-break-abbrechen-und-continue-weitermachen","text":"","title":"Schl\u00fcsselw\u00f6rter \"break\" (Abbrechen) und \"continue\" (Weitermachen)"},{"location":"loops/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"operators/","text":"Operatoren Arithmetische Operatoren Logische Operatoren Weiterf\u00fchrende Resourcen","title":"Operatoren"},{"location":"operators/#operatoren","text":"","title":"Operatoren"},{"location":"operators/#arithmetische-operatoren","text":"","title":"Arithmetische Operatoren"},{"location":"operators/#logische-operatoren","text":"","title":"Logische Operatoren"},{"location":"operators/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"teachers/","text":"F\u00fcr Lehrpersonen Lernergebnis Strukturmodell Voraussetzungen: DigiKomp(DK) 31., 3.3 Inhalte: Objekt-orientierte Programmierung Datenstrukturen Variablen Datentypen Operatoren Kontrollstrukturen Verzweigungen Schleifen Bereiche und Zugriffskontrolle Objekte Funktionen Klassen (Erzeugung, Kapselung, Vererbung) Automatentheorie Objekt-Zust\u00e4nde Pr\u00e4sentation Programmierstil Bedeutungsvolle Bezeichnungen Programmierkonventionen Kognitive Prozesse Probleml\u00f6sungsorientierung Verwendung von Algorithmen Testen De-Buggen Lesen (Interpretation von Programmfunktionalit\u00e4t) Implementierung (Entwicklung von ausf\u00fchrbaren Programmen) Meta-Kognitive Prozesse Teamarbeit Gemeinsam Probleme l\u00f6sen Gemeinsam Ideen umsetzen Arbeitsteilung Selbstbestimmung Weiterf\u00fchrende Entwicklung von Anwendungen Verwendung von Dokumentation Kreativit\u00e4t Originalit\u00e4t Ergebnisse: DK 1.4, 4.1, 4.2, 4.3, 4.4 Siehe auch: Kramer, M., Hubwieser, P., Brinda, T. (2016). A competency structure model of object-oriented programming. In Learning and Teaching in Computing and Engineering (LaTICE), 2016 International Conference on (pp. 1-8). IEEE. Unterrichtsmethoden Case Studies","title":"F\u00fcr Lehrpersonen"},{"location":"teachers/#fur-lehrpersonen","text":"","title":"F\u00fcr Lehrpersonen"},{"location":"teachers/#lernergebnis-strukturmodell","text":"Voraussetzungen: DigiKomp(DK) 31., 3.3 Inhalte: Objekt-orientierte Programmierung Datenstrukturen Variablen Datentypen Operatoren Kontrollstrukturen Verzweigungen Schleifen Bereiche und Zugriffskontrolle Objekte Funktionen Klassen (Erzeugung, Kapselung, Vererbung) Automatentheorie Objekt-Zust\u00e4nde Pr\u00e4sentation Programmierstil Bedeutungsvolle Bezeichnungen Programmierkonventionen Kognitive Prozesse Probleml\u00f6sungsorientierung Verwendung von Algorithmen Testen De-Buggen Lesen (Interpretation von Programmfunktionalit\u00e4t) Implementierung (Entwicklung von ausf\u00fchrbaren Programmen) Meta-Kognitive Prozesse Teamarbeit Gemeinsam Probleme l\u00f6sen Gemeinsam Ideen umsetzen Arbeitsteilung Selbstbestimmung Weiterf\u00fchrende Entwicklung von Anwendungen Verwendung von Dokumentation Kreativit\u00e4t Originalit\u00e4t Ergebnisse: DK 1.4, 4.1, 4.2, 4.3, 4.4 Siehe auch: Kramer, M., Hubwieser, P., Brinda, T. (2016). A competency structure model of object-oriented programming. In Learning and Teaching in Computing and Engineering (LaTICE), 2016 International Conference on (pp. 1-8). IEEE.","title":"Lernergebnis Strukturmodell"},{"location":"teachers/#unterrichtsmethoden","text":"","title":"Unterrichtsmethoden"},{"location":"teachers/#case-studies","text":"","title":"Case Studies"},{"location":"transform/","text":"Unity Transform Spielobjektkomponente Eigenschaften von Transform Krapfenklicker Erweiterung","title":"Transform Spielobjektkomponente"},{"location":"transform/#unity-transform-spielobjektkomponente","text":"","title":"Unity Transform Spielobjektkomponente"},{"location":"transform/#eigenschaften-von-transform","text":"","title":"Eigenschaften von Transform"},{"location":"transform/#krapfenklicker-erweiterung","text":"","title":"Krapfenklicker Erweiterung"},{"location":"userinterface/","text":"Bedienoberfl\u00e4chen Lernziele F\u00fcr die Spieleprogrammierung wirst du vorwiegend zwei Anwendungsprogramme verwenden: Unity zur Entwicklung von Spielszenen und Visual Studio zum Schreiben von Programm-Scripts. In diesem Kapitel lernst du die Bedienoberfl\u00e4chen von Unity und Visual Studio kennen. Du lernst auch, worauf du beim Anlegen eines neuen Projekts und beim Speichern in Unity achten musst. Unity Bedienoberfl\u00e4che Ebenen Neues Projekt anlegen Arbeitsauftrag Lege ein neues Projekt in Unity an. Es ist ein 2D-Spiel. Nenne es \"Hallo Elli\". ACHTUNG Merke dir, wo du dein Projekt am Computer anlegst. Wenn du wei\u00dft, wo dein Projekt ist, kannst du es leicht kopieren oder auf deinem USB Stick speichern. TIPP Du kannst auch in Unity \u00fcber den Men\u00fcpunkt \"Assets\" \"Im Dateimanager anzeigen\" die Dateien deines Projekts im Dateisystem auf deinem Computer anzeigen lassen. Spiel starten (und stoppen) ACHTUNG Alle \u00c4nderungen, die du in Unity vornimmst, w\u00e4hrend das Spiel gestartet ist, werden NICHT \u00fcbernommen, sobald du das Spiel wieder stoppst! Speichern Visual Studio Bedienoberfl\u00e4che Weiterf\u00fchrende Resourcen","title":"Bedienoberfl\u00e4chen"},{"location":"userinterface/#bedienoberflachen","text":"Lernziele F\u00fcr die Spieleprogrammierung wirst du vorwiegend zwei Anwendungsprogramme verwenden: Unity zur Entwicklung von Spielszenen und Visual Studio zum Schreiben von Programm-Scripts. In diesem Kapitel lernst du die Bedienoberfl\u00e4chen von Unity und Visual Studio kennen. Du lernst auch, worauf du beim Anlegen eines neuen Projekts und beim Speichern in Unity achten musst.","title":"Bedienoberfl\u00e4chen"},{"location":"userinterface/#unity-bedienoberflache","text":"","title":"Unity Bedienoberfl\u00e4che"},{"location":"userinterface/#ebenen","text":"","title":"Ebenen"},{"location":"userinterface/#neues-projekt-anlegen","text":"Arbeitsauftrag Lege ein neues Projekt in Unity an. Es ist ein 2D-Spiel. Nenne es \"Hallo Elli\". ACHTUNG Merke dir, wo du dein Projekt am Computer anlegst. Wenn du wei\u00dft, wo dein Projekt ist, kannst du es leicht kopieren oder auf deinem USB Stick speichern. TIPP Du kannst auch in Unity \u00fcber den Men\u00fcpunkt \"Assets\" \"Im Dateimanager anzeigen\" die Dateien deines Projekts im Dateisystem auf deinem Computer anzeigen lassen.","title":"Neues Projekt anlegen"},{"location":"userinterface/#spiel-starten-und-stoppen","text":"ACHTUNG Alle \u00c4nderungen, die du in Unity vornimmst, w\u00e4hrend das Spiel gestartet ist, werden NICHT \u00fcbernommen, sobald du das Spiel wieder stoppst!","title":"Spiel starten (und stoppen)"},{"location":"userinterface/#speichern","text":"","title":"Speichern"},{"location":"userinterface/#visual-studio-bedienoberflache","text":"","title":"Visual Studio Bedienoberfl\u00e4che"},{"location":"userinterface/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"variables/","text":"Variablen Deklarieren und Initialisieren Datentypen Umwandlung von Datentypen Variablen-Bereich (Scope) Weiterf\u00fchrende Resourcen","title":"Variablen"},{"location":"variables/#variablen","text":"","title":"Variablen"},{"location":"variables/#deklarieren-und-initialisieren","text":"","title":"Deklarieren und Initialisieren"},{"location":"variables/#datentypen","text":"","title":"Datentypen"},{"location":"variables/#umwandlung-von-datentypen","text":"","title":"Umwandlung von Datentypen"},{"location":"variables/#variablen-bereich-scope","text":"","title":"Variablen-Bereich (Scope)"},{"location":"variables/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"}]}