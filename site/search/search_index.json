{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"learn2proGrAME Grundlagentutorial \u00b6 Spiele programmieren mit C# in Unity - Grundlagentutorial WORK IN PROGRESS Was ist learn2proGrAME? \u00b6 Bei learn2proGrAME k\u00f6nnen Sch\u00fclerinnen und Sch\u00fcler durch Spiele programmieren das Programmieren mit einer text-basierten Programmiersprache in einer professionellen Spieleprogrammierumgebung lernen. Die learn2proGrAME Unterlagen - wie etwa dieses Tutorial - sind offen online zug\u00e4nglich . Viel Spass beim Spiele entwickeln! Was wirst du in diesem Tutorial lernen? \u00b6 In diesem Tutorial lernst du die Grundlagen zur Spieleprogrammierung in Unity mit der Programmiersprache C#. Dabei wirst du zuerst die Bedienoberfl\u00e4chen von Unity und Visual Studio erkunden. Danach schreibst du dein erstes Programm in C# . Wie gehen Programmiererinnen und Programmierer mit Fehlern um? Dar\u00fcber erf\u00e4hrst du mehr im Kapitel zu De-Bugging . Anschlie\u00dfend lernst du \u00fcber Variablen , Operatoren und Funkionen , um dein erstes Spiel, das allseits beliebte Krapfenklicker , zu entwickeln. Nachdem du die Unity Spielobjektkomponente Transform kennengelernt hast, kannst du eine Spielerweiterung f\u00fcr Krapfenklicker schreiben. Beim n\u00e4chsten selbstgeschriebenen Spiel - Ellis' gro\u00dfes Abenteuer - lernst du, mit Verzweigungen Spielzust\u00e4nde zu erzeugen und Figuren in einem Grafikprogramm namens GIMP zu zeichnen . Als Vorbereitung auf das Jump'n'Run artige Arcade Spiel BouncyFant wird letztlich die Schleife - insbesondere die Spielschleife - als wichtiger Aspekt der Spieleprogrammierung vorgestellt. Nach dem Tutorial... \u00b6 Im Anschluss an dieses Grundlagentutorial kannst du das BouncyFant Tutorial starten, in dem du ein Jump'n'Run-artiges Arcade Spiel entwickelst! Was wirst du im BouncyFant Tutorial lernen? Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2D Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Objekt-orienterte Programmierung: Vererbung, Kapselung Spiellogik Weiter zu BouncyFant ...","title":"Einleitung"},{"location":"#learn2programe-grundlagentutorial","text":"Spiele programmieren mit C# in Unity - Grundlagentutorial WORK IN PROGRESS","title":"learn2proGrAME Grundlagentutorial"},{"location":"#was-ist-learn2programe","text":"Bei learn2proGrAME k\u00f6nnen Sch\u00fclerinnen und Sch\u00fcler durch Spiele programmieren das Programmieren mit einer text-basierten Programmiersprache in einer professionellen Spieleprogrammierumgebung lernen. Die learn2proGrAME Unterlagen - wie etwa dieses Tutorial - sind offen online zug\u00e4nglich . Viel Spass beim Spiele entwickeln!","title":"Was ist learn2proGrAME?"},{"location":"#was-wirst-du-in-diesem-tutorial-lernen","text":"In diesem Tutorial lernst du die Grundlagen zur Spieleprogrammierung in Unity mit der Programmiersprache C#. Dabei wirst du zuerst die Bedienoberfl\u00e4chen von Unity und Visual Studio erkunden. Danach schreibst du dein erstes Programm in C# . Wie gehen Programmiererinnen und Programmierer mit Fehlern um? Dar\u00fcber erf\u00e4hrst du mehr im Kapitel zu De-Bugging . Anschlie\u00dfend lernst du \u00fcber Variablen , Operatoren und Funkionen , um dein erstes Spiel, das allseits beliebte Krapfenklicker , zu entwickeln. Nachdem du die Unity Spielobjektkomponente Transform kennengelernt hast, kannst du eine Spielerweiterung f\u00fcr Krapfenklicker schreiben. Beim n\u00e4chsten selbstgeschriebenen Spiel - Ellis' gro\u00dfes Abenteuer - lernst du, mit Verzweigungen Spielzust\u00e4nde zu erzeugen und Figuren in einem Grafikprogramm namens GIMP zu zeichnen . Als Vorbereitung auf das Jump'n'Run artige Arcade Spiel BouncyFant wird letztlich die Schleife - insbesondere die Spielschleife - als wichtiger Aspekt der Spieleprogrammierung vorgestellt.","title":"Was wirst du in diesem Tutorial lernen?"},{"location":"#nach-dem-tutorial","text":"Im Anschluss an dieses Grundlagentutorial kannst du das BouncyFant Tutorial starten, in dem du ein Jump'n'Run-artiges Arcade Spiel entwickelst! Was wirst du im BouncyFant Tutorial lernen? Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2D Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Objekt-orienterte Programmierung: Vererbung, Kapselung Spiellogik Weiter zu BouncyFant ...","title":"Nach dem Tutorial..."},{"location":"about/","text":"\u00dcber learn2proGrAME \u00b6 Das Projekt \u00b6 Unter welchen Bedingungen kann Computerspieleentwicklung das Programmierenlernen verbessern? Der Grundgedanke des Projekts lautet: Sch\u00fclerinnen und Sch\u00fcler erforschen das eigene Programmierenlernen im Zuge der Entwicklung von Computerspielen und k\u00f6nnen so \u00fcber Prozesse Erkenntnisse gewinnen, die den Forschenden, die bereits programmieren k\u00f6nnen, nicht mehr genuin zug\u00e4nglich sind (bzw. jenen Forschenden, die nicht planen programmieren zu lernen, \u00fcberhaupt nicht zug\u00e4nglich sind). Im Zuge des Lernprozesses nehmen die Sch\u00fclerinnen und Sch\u00fcler nicht nur die herk\u00f6mmliche Rolle von Lernenden ein, sondern reflektieren ihr Lernen aktiv im Austausch mit den anderen Beteiligten und leisten damit einen Beitrag zur Generierung von neuem Wissen. Programmieren lernen ist f\u00fcr die meisten Menschen eine gro\u00dfe Herausforderung und nicht selten mit zahlreichen Schwierigkeiten verbunden. Das gilt auch f\u00fcr f\u00fcnfzehnj\u00e4hrige Sch\u00fclerinnen und Sch\u00fcler. Im Projekt proGrAME soll das Programmierenlernen der Sch\u00fclerinnen und Sch\u00fcler der neunten Schulstufe (5. Klasse AHS) durch Computerspielentwicklung erfolgen und begleitend durch Wissenschaftlerinnen und Wissenschaftler, Sch\u00fclerinnen und Sch\u00fcler aus h\u00f6heren Schulstufen im Rahmen der Wahlpflichtf\u00e4cher Psychologie/Philosophie und Informatik und auch durch die Programmieren-Lernenden selbst, erforscht werden. In diesem Prozess entwickeln und erproben Wissenschaftlerinnen und Wissenschaftler gemeinsam mit den Lernenden, didaktische Szenarien mit Spieleentwicklungsumgebungen und identifizieren signifikante Erfahrungen sowie Probleme beim Programmieren lernen und erarbeiten gemeinsam nachhaltige L\u00f6sungen.\u201c Das Team \u00b6","title":"\u00dcber learn2proGrAME"},{"location":"about/#uber-learn2programe","text":"","title":"\u00dcber learn2proGrAME"},{"location":"about/#das-projekt","text":"Unter welchen Bedingungen kann Computerspieleentwicklung das Programmierenlernen verbessern? Der Grundgedanke des Projekts lautet: Sch\u00fclerinnen und Sch\u00fcler erforschen das eigene Programmierenlernen im Zuge der Entwicklung von Computerspielen und k\u00f6nnen so \u00fcber Prozesse Erkenntnisse gewinnen, die den Forschenden, die bereits programmieren k\u00f6nnen, nicht mehr genuin zug\u00e4nglich sind (bzw. jenen Forschenden, die nicht planen programmieren zu lernen, \u00fcberhaupt nicht zug\u00e4nglich sind). Im Zuge des Lernprozesses nehmen die Sch\u00fclerinnen und Sch\u00fcler nicht nur die herk\u00f6mmliche Rolle von Lernenden ein, sondern reflektieren ihr Lernen aktiv im Austausch mit den anderen Beteiligten und leisten damit einen Beitrag zur Generierung von neuem Wissen. Programmieren lernen ist f\u00fcr die meisten Menschen eine gro\u00dfe Herausforderung und nicht selten mit zahlreichen Schwierigkeiten verbunden. Das gilt auch f\u00fcr f\u00fcnfzehnj\u00e4hrige Sch\u00fclerinnen und Sch\u00fcler. Im Projekt proGrAME soll das Programmierenlernen der Sch\u00fclerinnen und Sch\u00fcler der neunten Schulstufe (5. Klasse AHS) durch Computerspielentwicklung erfolgen und begleitend durch Wissenschaftlerinnen und Wissenschaftler, Sch\u00fclerinnen und Sch\u00fcler aus h\u00f6heren Schulstufen im Rahmen der Wahlpflichtf\u00e4cher Psychologie/Philosophie und Informatik und auch durch die Programmieren-Lernenden selbst, erforscht werden. In diesem Prozess entwickeln und erproben Wissenschaftlerinnen und Wissenschaftler gemeinsam mit den Lernenden, didaktische Szenarien mit Spieleentwicklungsumgebungen und identifizieren signifikante Erfahrungen sowie Probleme beim Programmieren lernen und erarbeiten gemeinsam nachhaltige L\u00f6sungen.\u201c","title":"Das Projekt"},{"location":"about/#das-team","text":"","title":"Das Team"},{"location":"accessmodifiers/","text":"Zugriffsmodifikatoren (access modifiers) \u00b6 Lernziele In diesem Kapitel lernst du, was Zugriffsmodifikatoren von Variablen und Funktionen (Methoden) sind und wann du welche Art verwenden solltest. Klassenvariablen \u00b6 Klassenvariablen sind Variablen , die in einer Klasse au\u00dferhalb von Funktionen deklariert werden. Hier sind minGeschwindigkeit und maxGeschwindigkeit Klassenvariablen . rotationsgeschwindigkeit ist keine Klassenvariable, da sie in der Funktion Start() deklariert wurde. Sie ist eine lokale Variable , die nur innerhalb der Methode verf\u00fcgbar ist. Was sind Zugriffsmodifikatoren? \u00b6 Zugriffsmodifikatoren legen fest von wo aus man auf eine Klassenvariable oder eine Funktion zugreifen kann. Die drei wichtigsten Zugriffsmodifikatoren sind: public - Zugriff von \u00fcberall private - Zugriff nur innerhalb der Klasse protected - Zugriff innerhalb der Klasse und von allen Klassen die von dieser Klasse erben. (Mehr zu Vererbung unter Objektorientierte Programmierung ) Tipp public Variablen k\u00f6nnen in Unity auch im Inspector eingesehen und ver\u00e4ndert werden. Zum Beispiel: public class Player { private int hitpoints = 10 ; public void NimmSchaden ( int schaden ){ hitpoints = hitpoints - schaden ; } } public class Enemy { public int damage ; private void Attack ( Player player ){ player . NimmSchaden ( damage ); } } hitpoints aus der Klasse Player ist private und kann somit aus der Klasse Enemy nicht direkt ver\u00e4ndert werde. Die Methode NimmSchaden() ist aber public . Somit kann man aus der Klasse Enemy mithilfe dieser Methode die Hitpoints eines Player Objekts ver\u00e4ndern. damage in Enemy ist public . Das hei\u00dft in Unity scheint diese Variable im Inspector auf und du kannst direkt im Inspector den Schaden eines Gegners einstellen. Au\u00dferdem kann man auch sonst von \u00fcberall auf damage zugreifen. Du k\u00f6nntest z.B. Player folgenderma\u00dfen erweitern: public class Player { private int hitpoints = 10 ; public void NimmSchaden ( int schaden ){ hitpoints = hitpoints - schaden ; } private void MacheGegnerHarmlos ( Enemy enemy ){ enemy . damage = 0 ; } } Achtung Wenn man f\u00fcr Klassenvariablen oder Methoden keine Zugriffsmodifikatoren angibt, werden diese implizit auf private gesetzt. Faustregel Zugriffsmodifikatoren sollten, wenn m\u00f6glich immer m\u00f6glichst restriktiv verwendet werden. Das hei\u00dft public sollte man nur dann verwenden, wenn man einen guten Grund daf\u00fcr hat. Ein Programm wird n\u00e4mlich sehr schnell sehr un\u00fcbersichtlich, wenn Variablen von vielen verschiedenen Stellen aus bearbeitet werden. Dadurch kommt es leichter zu Bugs. Au\u00dferdem sind diese Bugs dann auch schwerer zu finden. Weiterf\u00fchrende Resourcen \u00b6 Scope and Access Control in Unity Tutorial (englisch)","title":"Zugriffsmodifikatoren"},{"location":"accessmodifiers/#zugriffsmodifikatoren-access-modifiers","text":"Lernziele In diesem Kapitel lernst du, was Zugriffsmodifikatoren von Variablen und Funktionen (Methoden) sind und wann du welche Art verwenden solltest.","title":"Zugriffsmodifikatoren (access modifiers)"},{"location":"accessmodifiers/#klassenvariablen","text":"Klassenvariablen sind Variablen , die in einer Klasse au\u00dferhalb von Funktionen deklariert werden. Hier sind minGeschwindigkeit und maxGeschwindigkeit Klassenvariablen . rotationsgeschwindigkeit ist keine Klassenvariable, da sie in der Funktion Start() deklariert wurde. Sie ist eine lokale Variable , die nur innerhalb der Methode verf\u00fcgbar ist.","title":"Klassenvariablen"},{"location":"accessmodifiers/#was-sind-zugriffsmodifikatoren","text":"Zugriffsmodifikatoren legen fest von wo aus man auf eine Klassenvariable oder eine Funktion zugreifen kann. Die drei wichtigsten Zugriffsmodifikatoren sind: public - Zugriff von \u00fcberall private - Zugriff nur innerhalb der Klasse protected - Zugriff innerhalb der Klasse und von allen Klassen die von dieser Klasse erben. (Mehr zu Vererbung unter Objektorientierte Programmierung ) Tipp public Variablen k\u00f6nnen in Unity auch im Inspector eingesehen und ver\u00e4ndert werden. Zum Beispiel: public class Player { private int hitpoints = 10 ; public void NimmSchaden ( int schaden ){ hitpoints = hitpoints - schaden ; } } public class Enemy { public int damage ; private void Attack ( Player player ){ player . NimmSchaden ( damage ); } } hitpoints aus der Klasse Player ist private und kann somit aus der Klasse Enemy nicht direkt ver\u00e4ndert werde. Die Methode NimmSchaden() ist aber public . Somit kann man aus der Klasse Enemy mithilfe dieser Methode die Hitpoints eines Player Objekts ver\u00e4ndern. damage in Enemy ist public . Das hei\u00dft in Unity scheint diese Variable im Inspector auf und du kannst direkt im Inspector den Schaden eines Gegners einstellen. Au\u00dferdem kann man auch sonst von \u00fcberall auf damage zugreifen. Du k\u00f6nntest z.B. Player folgenderma\u00dfen erweitern: public class Player { private int hitpoints = 10 ; public void NimmSchaden ( int schaden ){ hitpoints = hitpoints - schaden ; } private void MacheGegnerHarmlos ( Enemy enemy ){ enemy . damage = 0 ; } } Achtung Wenn man f\u00fcr Klassenvariablen oder Methoden keine Zugriffsmodifikatoren angibt, werden diese implizit auf private gesetzt. Faustregel Zugriffsmodifikatoren sollten, wenn m\u00f6glich immer m\u00f6glichst restriktiv verwendet werden. Das hei\u00dft public sollte man nur dann verwenden, wenn man einen guten Grund daf\u00fcr hat. Ein Programm wird n\u00e4mlich sehr schnell sehr un\u00fcbersichtlich, wenn Variablen von vielen verschiedenen Stellen aus bearbeitet werden. Dadurch kommt es leichter zu Bugs. Au\u00dferdem sind diese Bugs dann auch schwerer zu finden.","title":"Was sind Zugriffsmodifikatoren?"},{"location":"accessmodifiers/#weiterfuhrende-resourcen","text":"Scope and Access Control in Unity Tutorial (englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"adventure/","text":"Ellis' gro\u00dfes Abenteuer \u00b6 Ellis' gro\u00dfes Abenteuer - Ein Text-basiertes Adventurespiel \u00b6","title":"Spiel - Ellis' gro\u00dfes Abenteuer"},{"location":"adventure/#ellis-groes-abenteuer","text":"","title":"Ellis' gro\u00dfes Abenteuer"},{"location":"adventure/#ellis-groes-abenteuer-ein-text-basiertes-adventurespiel","text":"","title":"Ellis' gro\u00dfes Abenteuer - Ein Text-basiertes Adventurespiel"},{"location":"classes/","text":"Objekt-orientiertes Programmieren - Grundlagen \u00b6 Klasse und Instanz \u00b6 Eigenschaften \u00b6 Funktionen \u00b6 Ein Beispiel \u00b6 Weiterf\u00fchrende Informationen \u00b6 BouncyFant - Intro \u00b6 Nach dem Grundlagentutorial hast du genug Infos und Programmiererfahrung gesammelt, um das BouncyFant Tutorial zu beginnen. Nat\u00fcrlich kannst du jederzeit auf das Grundlagentutorial zur\u00fcckgreifen, wenn du es brauchst. Was wirst du im BouncyFant Tutorial lernen? Mehr zu Objekt-orienterter Programmierung: Vererbung, Kapselung und auch Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2d Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Spiellogik","title":"Objekt-orientiertes Programmieren - Grundlagen"},{"location":"classes/#objekt-orientiertes-programmieren-grundlagen","text":"","title":"Objekt-orientiertes Programmieren - Grundlagen"},{"location":"classes/#klasse-und-instanz","text":"","title":"Klasse und Instanz"},{"location":"classes/#eigenschaften","text":"","title":"Eigenschaften"},{"location":"classes/#funktionen","text":"","title":"Funktionen"},{"location":"classes/#ein-beispiel","text":"","title":"Ein Beispiel"},{"location":"classes/#weiterfuhrende-informationen","text":"","title":"Weiterf\u00fchrende Informationen"},{"location":"classes/#bouncyfant-intro","text":"Nach dem Grundlagentutorial hast du genug Infos und Programmiererfahrung gesammelt, um das BouncyFant Tutorial zu beginnen. Nat\u00fcrlich kannst du jederzeit auf das Grundlagentutorial zur\u00fcckgreifen, wenn du es brauchst. Was wirst du im BouncyFant Tutorial lernen? Mehr zu Objekt-orienterter Programmierung: Vererbung, Kapselung und auch Dateimanagement in Unity Spielobjekt-Animation in Unity Spielobjektkomponente Rigidbody2d Spielobjekte bewegen Springen mit Hilfe von Vektoren Kollisionsabfrage in Unity Spiellogik","title":"BouncyFant - Intro"},{"location":"conditionals/","text":"Verzweigungen \u00b6 Lernziele In diesem Kapitel lernst du Verzweigungen kennen. If (Wenn) Abfragen erlauben, den Programmfluss zu steuern. Du lernst, wie diese Kontrollstruktur erzeugt werden kann, und wie Bedingungen formuliert werden. Wenn (if) - Sonst (else) \u00b6 if ( Bedingung ) //kann wahr oder falsch sein { //Hier schreibst du, was passieren soll, wenn die Bedingung wahr ist } else { //Hier schreibst du, was passieren soll, wenn die Bedingung falsch ist } Ein Beispiel \u00b6 String passwort = \"meinPasswort\" ; if ( passwort == \"PASS\" ) { Debug . Log ( \"Access granted.\" ); } else { Debug . Log ( \"Access denied.\" ); } Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Projekt \"HalloElli\" in \"HalloElli.cs\" mit oben angef\u00fchrtem Beispiel. Ver\u00e4ndere den Programmcode, sodass in der Konsole beim Ausf\u00fchren der Funktion \"Access granted.\" steht. Vergleichsoperatoren \u00b6 Um als Bedingung zwei Ausdr\u00fccke miteinander zu vergleichen, k\u00f6nnen Vergleichsoperatoren verwendet werden. In C # kannst du folgende Vergleichsoperatoren verwenden: Vergleichsoperator Bedeutung == ist gleich != ist ungleich > ist gr\u00f6\u00dfer als > ist kleiner als >= ist gr\u00f6\u00dfer gleich <= ist kleiner gleich ACHTUNG Ein Vergleich gibt als Ergebnis einen Wahrheitswert (wahr/falsch) - einen Boolean - zur\u00fcck. Logische Operatoren \u00b6 Logische Operatoren erm\u00f6glichen komplexere Bedingungen, indem Verkn\u00fcpfungen von Wahrheitswerten erstellt werden k\u00f6nnen. H\u00e4ufig verwendete logische Operatoren sind: Logische Operatoren Bedeutung ! nicht && und || oder Verkn\u00fcpfungen von Bedingungen - Beispiel \u00b6 int elefantenAnzahl ; //die Variable \"elefantenAnzahl\" wird deklariert elefantenAnzahl = 8 ; //die Variable \"elefantenAnzahl\" wird mit dem Integer-Wert 8 initialisiert. void OnDisable () //Funkionsdefinition { if ( elefantenAnzahl > - 1 && elefantenAnzahl < 5 ) { if ( elefantenAnzahl == 0 ) { Debug . Log ( \"Keine Elefanten hier.\" ); } else if ( elefantenAnzahl == 1 ) //Ein oder mehrere Else If k\u00f6nnen eine If-Abfrage erg\u00e4nzen. { Debug . Log ( \"Ein Elefant im Spiel.\" ); } else { Debug . Log ( \"Juhu! Endlich mehrere Elefanten!\" ); } } else { Debug . Log ( \"Bisher k\u00f6nnen nur 0 bis 4 Elefanten im Spiel sein.\" ); } } \u00dcbung Was ist der Unterschied zwischen mehreren if -Abfragen hintereinander und mehreren else if -Abfragen hintereinander nach einem if ? Verschachtelte Bedingungen - Beispiel \u00b6 bool ersterWahrheitswert = true ; bool zweiterWahrheitswert = false ; int spielerInnen = 4 ; //In der nachfolgenden Verzweigung ist der \"ersterWahrheitswert\" die erste Bedingung der ODER-Verkn\u00fcpfung, die Klammer der zweite. //Nur wenn sowohl \"zweiterWahrheitswert\" wahr ist und \"spielerInnen\" gr\u00f6\u00dfer 1 ist, ist die zweite Bedingung wahr. //ODER bedeutet, dass eine der beiden Bedingungen wahr sein muss, damit die Verkn\u00fcpfung wahr ist. if ( ersterWahrheitswert || ( zweiterWahrheitswert && spielerInnen > 1 )) { Debug . Log ( \"Stimmt!\" ); } Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Projekt \"HalloElli\" in \"HalloElli.cs\" mit oben angef\u00fchrtem Beispiel. Ver\u00e4ndere den Programmcode. Arbeitsauftrag De-Bugge folgenden Quellcode, sodass auf der Konsole 42 ausgegeben wird. bool sollFortsetzen = true ; void OnDisable () { int wert = 46 ; bool sollFortsetzen = false ; if ( sollFortsetzen ) { int neuerWert = 6 ; } Debug . Log (( wert + neuerWert ) + \" = 42.\" ); } ACHTUNG Beachte den G\u00fcltigkeits-Bereich der Varialben! Siehe dazu auch Variablen-Bereich (Scope) . Weiterf\u00fchrende Resourcen \u00b6 IF-Statements Video-Tutorial in Unity (englisch)","title":"Verzweigungen"},{"location":"conditionals/#verzweigungen","text":"Lernziele In diesem Kapitel lernst du Verzweigungen kennen. If (Wenn) Abfragen erlauben, den Programmfluss zu steuern. Du lernst, wie diese Kontrollstruktur erzeugt werden kann, und wie Bedingungen formuliert werden.","title":"Verzweigungen"},{"location":"conditionals/#wenn-if-sonst-else","text":"if ( Bedingung ) //kann wahr oder falsch sein { //Hier schreibst du, was passieren soll, wenn die Bedingung wahr ist } else { //Hier schreibst du, was passieren soll, wenn die Bedingung falsch ist }","title":"Wenn (if) - Sonst (else)"},{"location":"conditionals/#ein-beispiel","text":"String passwort = \"meinPasswort\" ; if ( passwort == \"PASS\" ) { Debug . Log ( \"Access granted.\" ); } else { Debug . Log ( \"Access denied.\" ); } Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Projekt \"HalloElli\" in \"HalloElli.cs\" mit oben angef\u00fchrtem Beispiel. Ver\u00e4ndere den Programmcode, sodass in der Konsole beim Ausf\u00fchren der Funktion \"Access granted.\" steht.","title":"Ein Beispiel"},{"location":"conditionals/#vergleichsoperatoren","text":"Um als Bedingung zwei Ausdr\u00fccke miteinander zu vergleichen, k\u00f6nnen Vergleichsoperatoren verwendet werden. In C # kannst du folgende Vergleichsoperatoren verwenden: Vergleichsoperator Bedeutung == ist gleich != ist ungleich > ist gr\u00f6\u00dfer als > ist kleiner als >= ist gr\u00f6\u00dfer gleich <= ist kleiner gleich ACHTUNG Ein Vergleich gibt als Ergebnis einen Wahrheitswert (wahr/falsch) - einen Boolean - zur\u00fcck.","title":"Vergleichsoperatoren"},{"location":"conditionals/#logische-operatoren","text":"Logische Operatoren erm\u00f6glichen komplexere Bedingungen, indem Verkn\u00fcpfungen von Wahrheitswerten erstellt werden k\u00f6nnen. H\u00e4ufig verwendete logische Operatoren sind: Logische Operatoren Bedeutung ! nicht && und || oder","title":"Logische Operatoren"},{"location":"conditionals/#verknupfungen-von-bedingungen-beispiel","text":"int elefantenAnzahl ; //die Variable \"elefantenAnzahl\" wird deklariert elefantenAnzahl = 8 ; //die Variable \"elefantenAnzahl\" wird mit dem Integer-Wert 8 initialisiert. void OnDisable () //Funkionsdefinition { if ( elefantenAnzahl > - 1 && elefantenAnzahl < 5 ) { if ( elefantenAnzahl == 0 ) { Debug . Log ( \"Keine Elefanten hier.\" ); } else if ( elefantenAnzahl == 1 ) //Ein oder mehrere Else If k\u00f6nnen eine If-Abfrage erg\u00e4nzen. { Debug . Log ( \"Ein Elefant im Spiel.\" ); } else { Debug . Log ( \"Juhu! Endlich mehrere Elefanten!\" ); } } else { Debug . Log ( \"Bisher k\u00f6nnen nur 0 bis 4 Elefanten im Spiel sein.\" ); } } \u00dcbung Was ist der Unterschied zwischen mehreren if -Abfragen hintereinander und mehreren else if -Abfragen hintereinander nach einem if ?","title":"Verkn\u00fcpfungen von Bedingungen - Beispiel"},{"location":"conditionals/#verschachtelte-bedingungen-beispiel","text":"bool ersterWahrheitswert = true ; bool zweiterWahrheitswert = false ; int spielerInnen = 4 ; //In der nachfolgenden Verzweigung ist der \"ersterWahrheitswert\" die erste Bedingung der ODER-Verkn\u00fcpfung, die Klammer der zweite. //Nur wenn sowohl \"zweiterWahrheitswert\" wahr ist und \"spielerInnen\" gr\u00f6\u00dfer 1 ist, ist die zweite Bedingung wahr. //ODER bedeutet, dass eine der beiden Bedingungen wahr sein muss, damit die Verkn\u00fcpfung wahr ist. if ( ersterWahrheitswert || ( zweiterWahrheitswert && spielerInnen > 1 )) { Debug . Log ( \"Stimmt!\" ); } Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Projekt \"HalloElli\" in \"HalloElli.cs\" mit oben angef\u00fchrtem Beispiel. Ver\u00e4ndere den Programmcode. Arbeitsauftrag De-Bugge folgenden Quellcode, sodass auf der Konsole 42 ausgegeben wird. bool sollFortsetzen = true ; void OnDisable () { int wert = 46 ; bool sollFortsetzen = false ; if ( sollFortsetzen ) { int neuerWert = 6 ; } Debug . Log (( wert + neuerWert ) + \" = 42.\" ); } ACHTUNG Beachte den G\u00fcltigkeits-Bereich der Varialben! Siehe dazu auch Variablen-Bereich (Scope) .","title":"Verschachtelte Bedingungen - Beispiel"},{"location":"conditionals/#weiterfuhrende-resourcen","text":"IF-Statements Video-Tutorial in Unity (englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"debugging/","text":"Fehler und De-Bugging \u00b6 Lernziele Hier lernst du, wie du etwas in Unity \"r\u00fcckg\u00e4ngig machen\" kannst. Au\u00dferdem lernst du den Begriff \"De-Bugging\" kennen. Du lernst, wo dir in Unity Programmierfehler angezeigt werden und wie du damit umgehen kannst. Das Sch\u00f6ne am Programmieren ist: Fehler machen geh\u00f6rt dazu! Fehler sind super Lernm\u00f6glichkeiten! Auch Profis machen Fehler. Es klappt nicht! Was nun? \u00b6 Was kann man tun, wenn was nicht klappt? Wenn du dich vertippt hast oder unabsichtlich was gel\u00f6scht hast, kannst du das in Unity r\u00fcckg\u00e4ngig machen. Tipp R\u00fcckg\u00e4ngig machen kannst du mit der Tastenkombination: strg + z Ok... aber was, wenn du auf Start dr\u00fcckst, aber nichts passiert? Schau in der Konsole nach, was da geschrieben steht. Unity gibt in der Konsole Warnungen und Fehlermeldungen aus, sobald du das Spiel gestartet hast. Warnungen und Fehlermeldungen beinhalten \u00fcblicherweise je eine Fehlerbeschreibung (auf Englisch) UND eine Zeilenangabe , auf welcher Zeile (und in welchem Skript) der Fehler aufgetreten ist. De-Bugging in Unity? \u00b6 Hast du eine Fehlerbeschreibung , aber verstehst noch nicht, was da steht? Lese im Grundlagentutorial nach, ob da was zu deinem Fehler steht (Es gibt auch eine Suchfunktion!) Frag eineN KollegIn Wenn es ein Hilfeforum gibt: Schreib deinen Fehler in das Forum Frag eineN erfahreneN LernerIn (etwa eineN TutorIn oder eine Lehrperson) Im Internet gibt es auch Hilfeforen: etwa das Unity Forum oder StackOverflow De-Bugging bedeutet, dass du Computer-Programm-Fehler (Bugs) ausbesserst. Hier ist ein Bild vom ersten echten \"Bug\", der jemals in einem Computerprogramm gefunden wurde! ;) De-Bugging in Visual Studio \u00b6 Hast du eine Fehlerbeschreibung und eine Zeilenangabe , kannst du die Zeile in deinem C # Skript in Visual Studio suchen. Vielleicht hast du nur einen ; (Strichpunkt) vergessen? Oder Gro\u00df- und Kleinschreibung bei Bezeichnungen nicht eingehalten? Arbeitsauftrag F\u00fcge folgenden Programm-Teil in deinem halloelli.cs Skript nach void OnDisable() { Debug.Log (\"Hallo Elli!\"); } ein: void OnEnable() { Debug.Log(\"Elli ist wieder sichtbar!\") } Finde den Fehler und verbessere den Quellcode. Breakpoints \u00b6 Um zu sehen, was sich in deinem Skript abspielt, wenn du in Unity auf Start dr\u00fcckst, k\u00f6nnen Breakpoints (Haltepunkte) gesetzt werden. Hierf\u00fcr klickst du in Visual Studio links neben die Zeilennummer, wo du einen Haltepunkt setzen willst. Anschlie\u00dfend kannst du dein Spiel in Unity starten. Sobald die Ausf\u00fchrung deines Programms an die Stelle kommt, wo dein Haltepunkt gesetzt ist, bleibt es stehen. Nun kannst du die Inhalte von Variablen im aktuellen Zustand beim Haltepunkt einsehen, indem du den Mauszeiger auf die Variable bewegst. Mit der Taste \"N\u00e4chste Anweisung anzeigen\" kannst das Programm nach einem Haltepunkt weiterlaufen lassen. Weiterf\u00fchrende Resourcen \u00b6 Unity Forum Unity User Manual StackOverflow Tutorial f\u00fcr Fortgeschrittene zum De-Buggen in Visual Studio (englisch)","title":"Fehler und De-Bugging"},{"location":"debugging/#fehler-und-de-bugging","text":"Lernziele Hier lernst du, wie du etwas in Unity \"r\u00fcckg\u00e4ngig machen\" kannst. Au\u00dferdem lernst du den Begriff \"De-Bugging\" kennen. Du lernst, wo dir in Unity Programmierfehler angezeigt werden und wie du damit umgehen kannst. Das Sch\u00f6ne am Programmieren ist: Fehler machen geh\u00f6rt dazu! Fehler sind super Lernm\u00f6glichkeiten! Auch Profis machen Fehler.","title":"Fehler und De-Bugging"},{"location":"debugging/#es-klappt-nicht-was-nun","text":"Was kann man tun, wenn was nicht klappt? Wenn du dich vertippt hast oder unabsichtlich was gel\u00f6scht hast, kannst du das in Unity r\u00fcckg\u00e4ngig machen. Tipp R\u00fcckg\u00e4ngig machen kannst du mit der Tastenkombination: strg + z Ok... aber was, wenn du auf Start dr\u00fcckst, aber nichts passiert? Schau in der Konsole nach, was da geschrieben steht. Unity gibt in der Konsole Warnungen und Fehlermeldungen aus, sobald du das Spiel gestartet hast. Warnungen und Fehlermeldungen beinhalten \u00fcblicherweise je eine Fehlerbeschreibung (auf Englisch) UND eine Zeilenangabe , auf welcher Zeile (und in welchem Skript) der Fehler aufgetreten ist.","title":"Es klappt nicht! Was nun?"},{"location":"debugging/#de-bugging-in-unity","text":"Hast du eine Fehlerbeschreibung , aber verstehst noch nicht, was da steht? Lese im Grundlagentutorial nach, ob da was zu deinem Fehler steht (Es gibt auch eine Suchfunktion!) Frag eineN KollegIn Wenn es ein Hilfeforum gibt: Schreib deinen Fehler in das Forum Frag eineN erfahreneN LernerIn (etwa eineN TutorIn oder eine Lehrperson) Im Internet gibt es auch Hilfeforen: etwa das Unity Forum oder StackOverflow De-Bugging bedeutet, dass du Computer-Programm-Fehler (Bugs) ausbesserst. Hier ist ein Bild vom ersten echten \"Bug\", der jemals in einem Computerprogramm gefunden wurde! ;)","title":"De-Bugging in Unity?"},{"location":"debugging/#de-bugging-in-visual-studio","text":"Hast du eine Fehlerbeschreibung und eine Zeilenangabe , kannst du die Zeile in deinem C # Skript in Visual Studio suchen. Vielleicht hast du nur einen ; (Strichpunkt) vergessen? Oder Gro\u00df- und Kleinschreibung bei Bezeichnungen nicht eingehalten? Arbeitsauftrag F\u00fcge folgenden Programm-Teil in deinem halloelli.cs Skript nach void OnDisable() { Debug.Log (\"Hallo Elli!\"); } ein: void OnEnable() { Debug.Log(\"Elli ist wieder sichtbar!\") } Finde den Fehler und verbessere den Quellcode.","title":"De-Bugging in Visual Studio"},{"location":"debugging/#breakpoints","text":"Um zu sehen, was sich in deinem Skript abspielt, wenn du in Unity auf Start dr\u00fcckst, k\u00f6nnen Breakpoints (Haltepunkte) gesetzt werden. Hierf\u00fcr klickst du in Visual Studio links neben die Zeilennummer, wo du einen Haltepunkt setzen willst. Anschlie\u00dfend kannst du dein Spiel in Unity starten. Sobald die Ausf\u00fchrung deines Programms an die Stelle kommt, wo dein Haltepunkt gesetzt ist, bleibt es stehen. Nun kannst du die Inhalte von Variablen im aktuellen Zustand beim Haltepunkt einsehen, indem du den Mauszeiger auf die Variable bewegst. Mit der Taste \"N\u00e4chste Anweisung anzeigen\" kannst das Programm nach einem Haltepunkt weiterlaufen lassen.","title":"Breakpoints"},{"location":"debugging/#weiterfuhrende-resourcen","text":"Unity Forum Unity User Manual StackOverflow Tutorial f\u00fcr Fortgeschrittene zum De-Buggen in Visual Studio (englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"donutclicker/","text":"Krapfenklicker - Das Spiel \u00b6 Lernziele In diesem Kapitel erstellst du dein erstes Spiel - Krapfenklicker. Du lernst, wie du Variablen, Operatoren und Funktionen f\u00fcr das Programmieren der Spiellogik einsetzen kannst. Das Spielprinzip von Krapfenklicker ist: SpielerInnen dr\u00fccken so schnell sie k\u00f6nnen auf einen Knopf (Button) und erhalten daf\u00fcr Punkte. Szenenaufbau \u00b6 Unity bietet Spielobjekte (GameObjects) f\u00fcr BenutzerInnen-Schnittstellen (User Interfaces), etwa Text, Benutzereingabe oder Buttons. Um ein User Interface Spielobjekt einzuf\u00fcgen, machst du einen Rechtsklick auf das Hierarchie Panel. Im Kontextmen\u00fc w\u00e4hlst du UI . Dort findest du die User Interface GameObjects. F\u00fcr Krapfenklicker brauchen wir einen \"Button\" . W\u00e4hle also \"UI\">\"Button\" aus dem Kontextmen\u00fc. Nenne den Button \"ClickButton\". Platziere den Button in der Mitte der Szene. Weiters brauchst du noch einen Text f\u00fcr die Punkteanzeige. W\u00e4hle hierf\u00fcr im Hierarchie Panel Kontextmen\u00fc \"UI\">\"Text\" . Platziere den Text am linken oberen Rand der Szene. Du kannst das Button Bild austauschen, indem du in der \"Image\" -Komponente des ClickButtons das \"Source Image\" \u00e4nderst. Lade etwa das Bild krapfen.png auf deinen Computer und speichere es im \"Sprites\" -Ordner (Diesen Ordner kannst du im \"Assets\" -Ordner anlegen). Ziehe anschlie\u00dfend das \"krapfen\" -Sprite per Drag and Drop auf das \"Source Image\" deines Buttons. Ver\u00e4ndere die Gr\u00f6\u00dfe des Buttons, sodass dieser etwa zwei Drittel der Szene gro\u00df ist. Spiellogik \u00b6 F\u00fcr die Spiellogik kannst du in Krapfenklicker ein leeres GameObject einf\u00fcgen. Daf\u00fcr machst du wieder einen Rechtsklick auf das Hierarchie Panel und w\u00e4hlst \"Create Empty\" . Nenne das GameObject \"GameController\" . F\u00fcge dem GameController GameObject ein Skript hinzu. Nenne das Skript ebenfalls \"GameController\" . \u00dcberschreibe den Quellcode in der Datei \"GameController.cs\" mit: using System.Collections ; using System.Collections.Generic ; using UnityEngine ; using UnityEngine.UI ; public class GameController : MonoBehaviour { public Text meinHighscore ; //DIES IST DIE VARIABLE, DURCH DIE DAS TEXTFELD VERWENDET WERDEN KANN public Button clickButton ; //DIES IST DIE VARIABLE, DURCH DIE DER BUTTON IM SKRIPT VERWENDET WERDEN KANN //HIER DIE VARIABLE F\u00dcR DEN PUNKTESTAND private int //ERG\u00c4NZE HIER //DIESE FUNKTION WIRD AUSGEF\u00dcHRT, WENN DER BUTTON GEKLICKT WIRD. public void buttonclick () { highscore = //ERG\u00c4NZE HIER meinHighscore . text = \"Highscore: \" + //ERG\u00c4NZE HIER: ACHTUNG DATENTYP-UMWANDLUNG NOTWENDIG } } Arbeitsauftrag Erg\u00e4nze die fehlenden Code-Teile. ACHTUNG Damit die buttonclick() Funktion ausgef\u00fchrt wird, muss diese dem GameObject \"ClickButton\" zugewiesen werden. Wie kannst du buttonclick() deinem Button zuweisen? W\u00e4hle im Hierarchie Panel den Button (namens \"ClickButton\" ) aus. Im Inspektor findest du eine GameObject Komponente \"Button (Script)\" . Dort ist eine Liste, in der du Funktionen angeben kannst, die ausgef\u00fchrt werden sollen, wenn der Button gedr\u00fcckt wird. Das funktioniert so: Dr\u00fccke auf \"+\" . W\u00e4hle im ersten Men\u00fc \"Runtime Only\" . Ziehe das GameObject \"GameController\" aus dem Hierarchie Panel unter \"Runtime Only\" . W\u00e4hle zuletzt die Funktion \"buttonclick\" aus dem \"GameController\"-Men\u00fc im Men\u00fc neben \"Runtime Only\" . Fertigstellen \u00b6 Abschlie\u00dfend sollen die Punkte in der Punkteanzeige angezeigt werden. Damit du im \"GameController\"-Skript auf dein Textfeld zugreifen kannst, musst du das Textfeld per Drag and Drop an die \"meinHighscore\" -Variable anheften. Fertig!!!! Und jetzt Punkte sammeln :)","title":"Spiel - Krapfenklicker"},{"location":"donutclicker/#krapfenklicker-das-spiel","text":"Lernziele In diesem Kapitel erstellst du dein erstes Spiel - Krapfenklicker. Du lernst, wie du Variablen, Operatoren und Funktionen f\u00fcr das Programmieren der Spiellogik einsetzen kannst. Das Spielprinzip von Krapfenklicker ist: SpielerInnen dr\u00fccken so schnell sie k\u00f6nnen auf einen Knopf (Button) und erhalten daf\u00fcr Punkte.","title":"Krapfenklicker - Das Spiel"},{"location":"donutclicker/#szenenaufbau","text":"Unity bietet Spielobjekte (GameObjects) f\u00fcr BenutzerInnen-Schnittstellen (User Interfaces), etwa Text, Benutzereingabe oder Buttons. Um ein User Interface Spielobjekt einzuf\u00fcgen, machst du einen Rechtsklick auf das Hierarchie Panel. Im Kontextmen\u00fc w\u00e4hlst du UI . Dort findest du die User Interface GameObjects. F\u00fcr Krapfenklicker brauchen wir einen \"Button\" . W\u00e4hle also \"UI\">\"Button\" aus dem Kontextmen\u00fc. Nenne den Button \"ClickButton\". Platziere den Button in der Mitte der Szene. Weiters brauchst du noch einen Text f\u00fcr die Punkteanzeige. W\u00e4hle hierf\u00fcr im Hierarchie Panel Kontextmen\u00fc \"UI\">\"Text\" . Platziere den Text am linken oberen Rand der Szene. Du kannst das Button Bild austauschen, indem du in der \"Image\" -Komponente des ClickButtons das \"Source Image\" \u00e4nderst. Lade etwa das Bild krapfen.png auf deinen Computer und speichere es im \"Sprites\" -Ordner (Diesen Ordner kannst du im \"Assets\" -Ordner anlegen). Ziehe anschlie\u00dfend das \"krapfen\" -Sprite per Drag and Drop auf das \"Source Image\" deines Buttons. Ver\u00e4ndere die Gr\u00f6\u00dfe des Buttons, sodass dieser etwa zwei Drittel der Szene gro\u00df ist.","title":"Szenenaufbau"},{"location":"donutclicker/#spiellogik","text":"F\u00fcr die Spiellogik kannst du in Krapfenklicker ein leeres GameObject einf\u00fcgen. Daf\u00fcr machst du wieder einen Rechtsklick auf das Hierarchie Panel und w\u00e4hlst \"Create Empty\" . Nenne das GameObject \"GameController\" . F\u00fcge dem GameController GameObject ein Skript hinzu. Nenne das Skript ebenfalls \"GameController\" . \u00dcberschreibe den Quellcode in der Datei \"GameController.cs\" mit: using System.Collections ; using System.Collections.Generic ; using UnityEngine ; using UnityEngine.UI ; public class GameController : MonoBehaviour { public Text meinHighscore ; //DIES IST DIE VARIABLE, DURCH DIE DAS TEXTFELD VERWENDET WERDEN KANN public Button clickButton ; //DIES IST DIE VARIABLE, DURCH DIE DER BUTTON IM SKRIPT VERWENDET WERDEN KANN //HIER DIE VARIABLE F\u00dcR DEN PUNKTESTAND private int //ERG\u00c4NZE HIER //DIESE FUNKTION WIRD AUSGEF\u00dcHRT, WENN DER BUTTON GEKLICKT WIRD. public void buttonclick () { highscore = //ERG\u00c4NZE HIER meinHighscore . text = \"Highscore: \" + //ERG\u00c4NZE HIER: ACHTUNG DATENTYP-UMWANDLUNG NOTWENDIG } } Arbeitsauftrag Erg\u00e4nze die fehlenden Code-Teile. ACHTUNG Damit die buttonclick() Funktion ausgef\u00fchrt wird, muss diese dem GameObject \"ClickButton\" zugewiesen werden. Wie kannst du buttonclick() deinem Button zuweisen? W\u00e4hle im Hierarchie Panel den Button (namens \"ClickButton\" ) aus. Im Inspektor findest du eine GameObject Komponente \"Button (Script)\" . Dort ist eine Liste, in der du Funktionen angeben kannst, die ausgef\u00fchrt werden sollen, wenn der Button gedr\u00fcckt wird. Das funktioniert so: Dr\u00fccke auf \"+\" . W\u00e4hle im ersten Men\u00fc \"Runtime Only\" . Ziehe das GameObject \"GameController\" aus dem Hierarchie Panel unter \"Runtime Only\" . W\u00e4hle zuletzt die Funktion \"buttonclick\" aus dem \"GameController\"-Men\u00fc im Men\u00fc neben \"Runtime Only\" .","title":"Spiellogik"},{"location":"donutclicker/#fertigstellen","text":"Abschlie\u00dfend sollen die Punkte in der Punkteanzeige angezeigt werden. Damit du im \"GameController\"-Skript auf dein Textfeld zugreifen kannst, musst du das Textfeld per Drag and Drop an die \"meinHighscore\" -Variable anheften. Fertig!!!! Und jetzt Punkte sammeln :)","title":"Fertigstellen"},{"location":"drawingingimp/","text":"Figuren zeichnen in GIMP \u00b6 Gimp - \u00dcberblick \u00b6 Erste Schritte \u00b6 Character-Design in GIMP \u00b6 Ellis' Abenteuer 2 \u00b6 Weiterf\u00fchrende Resourcen \u00b6","title":"Figuren zeichnen in GIMP"},{"location":"drawingingimp/#figuren-zeichnen-in-gimp","text":"","title":"Figuren zeichnen in GIMP"},{"location":"drawingingimp/#gimp-uberblick","text":"","title":"Gimp - \u00dcberblick"},{"location":"drawingingimp/#erste-schritte","text":"","title":"Erste Schritte"},{"location":"drawingingimp/#character-design-in-gimp","text":"","title":"Character-Design in GIMP"},{"location":"drawingingimp/#ellis-abenteuer-2","text":"","title":"Ellis' Abenteuer 2"},{"location":"drawingingimp/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"firststeps/","text":"Erste Schritte \u00b6 Lernziele In diesem Kapitel lernst du, was ein Algorithmus ist. Du unterscheidest Spielobjekte und deren Komponenten in Unity. Du organisierst Projektdateien zu deinem Spiel. Und: Du schreibst dein erstes Programm in C # . Was ist ein Algorithmus? \u00b6 Informatikerinnen und Informatiker besch\u00e4ftigen sich mit Algorithmen. Aber was ist das eigentlich - ein Algorithmus? Programmieren k\u00f6nnte man als Probleml\u00f6severfahren beschreiben. In unserem Fall ist das \"Problem\" etwa, dass wir ein Spiel erstellen wollen. Wir l\u00f6sen es durch Einsatz von Unity und C # . Dabei kann man festhalten, dass nach einer bestimmten Zeit ein Resultat - also ein Spiel - entstehen sollte. Ein bisschen allgemeiner k\u00f6nnte man daher sagen: Ein Algorithmus ist ein Probleml\u00f6severfahren in endlich vielen Schritten. \u00dcbung Schreibe in Stichworten einen Algorithmus f\u00fcr Z\u00e4hne putzen. Erste Schritte in Unity \u00b6 Spielobjekte und Komponenten \u00b6 In Unity besteht eine Szene aus einem oder mehreren Spielobjekt(en). Diese werden GameObject(s) genannt. Auch die Kamera, die eine Szene \"filmt\", ist ein GameObject. Spielobjekte k\u00f6nnen von unterschiedlicher Art sein. Die Art wird in einer Klasse festgelegt. Die Eigenschaften eines Spielobjekts werden durch Komponenten (Components) bestimmt. Jedes Spielobjekt hat etwa die Komponente Transform , mit Hilfe derer die Position, die Rotation und die Gr\u00f6\u00dfe (oder Skalierung) des Spielobjekts bestimmt werden kann. Auch physikalische Eigenschaften werden einem Spielobjekt durch eine Komponente verliehen. Bei 2D-Spielen hei\u00dft diese Rigidbody2D. Ebenso werden Grenzen eines Spielobjekts (f\u00fcr Kollisionsabfragen) durch eine Komponente - Collider - angegeben. C # -Skripte werden einem Spielobjekt \u00fcber \"Add Component\" > \"New Script\" \"angeheftet\". Das besondere an Skripten ist, dass du darin auf andere Komponenten des Spielobjekts oder \u00fcberhaupt auf andere Spielobjekte in einer Szene zugreifen kannst. Weiters k\u00f6nnen Eingaben durch Keyboard, Maus oder GamePad verwendet oder andere Aspekte der Unity Spiel-Engine ver\u00e4ndert werden. Somit kannst du gezielt die Spiellogik f\u00fcr dein Spiel programmieren. \u00dcbung Beschreibe in eigenen Worten, wof\u00fcr die Spielobjekt-Komponenten im obigen Bild verwendet werden. SpriteRenderer ist bereits beschrieben. Projektdateien \u00b6 Projektdateien findest du in Unity unter \"Project\" > \"Assets\" . Mit \"Create\" kannst du dort neue Ordner und Dateien anlegen. Nat\u00fcrlich kannst du in Unity auch mit Drag and Drop Dateien importieren. Um sich \u00dcbersicht \u00fcber die verwendeten Dateien zu verschaffen, k\u00f6nnen Ordner angelegt werden. Arbeitsauftrag Lege folgende Ordner im \"Assets\"-Bereich von Unity an: Sprites : f\u00fcr alle 2D Grafiken Scripts : f\u00fcr alle C # Programm-Skripte Vorlagen : f\u00fcr Spielobjekte, die als Vorlage erstellt und verwendet werden Material : f\u00fcr physikalische Materialeigenschaften Tipp Du gelangst per Rechtsklick auf den \"Assets\" -Ordner zu einem Men\u00fc, in dem du ebenso \"Create\" findest. Um ein neues Script f\u00fcr ein GameObject zu erstellen, mache folgendes: Arbeitsauftrag Lege die Sprite-Datei elef.png im Ordner \"Sprites\" in deinem Unity Projekt ab. Ziehe das neue Sprite anschlie\u00dfend vom Project Panel in das Hierarchy Panel. Nenne das neue GameObject \"Elli\". Hefte dem neu erzeugten GameObject Elli ein C#-Skript namens \"HalloElli\" an. Tipp Ein Sprite ist eine 2D Grafik. Das hei\u00dft, diese Grafik hat 2 Dimensionen. Sie kann auf der x- und der y-Achse positioniert und skaliert(=vergr\u00f6\u00dfert und verkleinert) werden. Eine Tiefendimension (z-Achse), die man etwa bei 3D-Spielen verwendet, fehlt. Erste Schritte in C # \u00b6 C # (C Sharp) ist (in erster Linie) eine objektorientierte Programmiersprache. Unity-Skripte kann man in C # (oder in Javascript ) schreiben. Hallo Elli! \u00b6 Arbeitsauftrag \u00d6ffne das C#-Skript \"HalloElli.cs\" in Visual Studio per Doppelklick auf diese Datei im Unity Projekt Panel. Bist du bereit f\u00fcr dein erstes C # -Skript? Kopiere nachfolgenden Programmcode nach \"HalloElli.cs\" und ersetze dessen Inhalte. using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class halloelli : MonoBehaviour { int punkte = 1 ; string troeten = \"Tr\u00f6\u00f6\u00f6t.\" ; void OnDisable () { Debug . Log ( \"Hallo Elli!\" ); } } Tipp Du kannst die Tastenkombination strg + c (gleichzeitig dr\u00fccken) zum Kopieren und strg + v zum Einf\u00fcgen verwenden. Zur\u00fcck in Unity, dr\u00fccke auf Start. Anschlie\u00dfend, \u00f6ffne das Console Panel . In diesem werden R\u00fcckmeldungen des Programms, wie etwa Debug -Nachrichten ausgegeben. Nun, klicke das GameObject Elli an. Im Inspector findest du neben dem GameObject Namen eine Tick-Box. Klicke die Tick-Box an. Arbeitsauftrag Notiere die Ausgabe in der Konsole. Programmstruktur in C # \u00b6 Nachfolgend findest du die typische Programmstruktur eines C # -Skripts (mit Erkl\u00e4rungen): //BIBLIOTHEKEN = PROGRAMMTEILE, DIE IN DAS SCRIPT IMPORTIERT WERDEN using System ; //using = EIN SCHL\u00dcSSELWORT IN C#; using System HEI\u00dfT: verwende alle Klassen im Namespace(= Programmateil) System using System.Collections ; using System.Collections.Generic ; using UnityEngine ; //DIESE BIBLIOTHEK ERM\u00d6GLICHT ETWA DEN ZUGRIFF AUF DIE UNITY SPIEL-ENGINE //EINE KLASSE = class bezeichnung {... Inhalte der Klasse ...} public class halloelli : MonoBehaviour //DIESE KLASSE \"ERBT\" VON MonoBehaviour - IST ALSO F\u00dcR EIN GAMEOBJECT { //KLASSEN-ATTRIBUTE (EIGENSCHAFTEN) WERDEN IN VARIABLEN GEFASST int punkte = 1 ; string troeten = \"Tr\u00f6\u00f6\u00f6t.\" ; //FUNKTION(EN) DER KLASSE void OnDisable () { //STATEMENT(S) - AUSDR\u00dcCKE Debug . Log ( \"Hallo Elli!\" ); /* Dies * ist ein * mehrzeiliges * Kommentar */ //Dies ist ein einzeiliges Kommentar } } ACHTUNG Gro\u00df- und Kleinschreibung wird beachtet! Alle Statements und Ausdr\u00fccke werden mit ; beendet! Jedes C # -Programm startet mit einer main-Funktion! (Diese wird von Unity im Hintergrund aufgerufen, wenn du dein Spiel startest.) Weiterf\u00fchrende Resourcen \u00b6 Grundlagen der Sprache C # (aus dem Visual C # Handbuch) Introduction to Unity Tutorial Teil 1 (Ray Wenderlich, Englisch) Introduction to Unity Tutorial Teil 2 (Ray Wenderlich, Englisch)","title":"Erste Schritte"},{"location":"firststeps/#erste-schritte","text":"Lernziele In diesem Kapitel lernst du, was ein Algorithmus ist. Du unterscheidest Spielobjekte und deren Komponenten in Unity. Du organisierst Projektdateien zu deinem Spiel. Und: Du schreibst dein erstes Programm in C # .","title":"Erste Schritte"},{"location":"firststeps/#was-ist-ein-algorithmus","text":"Informatikerinnen und Informatiker besch\u00e4ftigen sich mit Algorithmen. Aber was ist das eigentlich - ein Algorithmus? Programmieren k\u00f6nnte man als Probleml\u00f6severfahren beschreiben. In unserem Fall ist das \"Problem\" etwa, dass wir ein Spiel erstellen wollen. Wir l\u00f6sen es durch Einsatz von Unity und C # . Dabei kann man festhalten, dass nach einer bestimmten Zeit ein Resultat - also ein Spiel - entstehen sollte. Ein bisschen allgemeiner k\u00f6nnte man daher sagen: Ein Algorithmus ist ein Probleml\u00f6severfahren in endlich vielen Schritten. \u00dcbung Schreibe in Stichworten einen Algorithmus f\u00fcr Z\u00e4hne putzen.","title":"Was ist ein Algorithmus?"},{"location":"firststeps/#erste-schritte-in-unity","text":"","title":"Erste Schritte in Unity"},{"location":"firststeps/#spielobjekte-und-komponenten","text":"In Unity besteht eine Szene aus einem oder mehreren Spielobjekt(en). Diese werden GameObject(s) genannt. Auch die Kamera, die eine Szene \"filmt\", ist ein GameObject. Spielobjekte k\u00f6nnen von unterschiedlicher Art sein. Die Art wird in einer Klasse festgelegt. Die Eigenschaften eines Spielobjekts werden durch Komponenten (Components) bestimmt. Jedes Spielobjekt hat etwa die Komponente Transform , mit Hilfe derer die Position, die Rotation und die Gr\u00f6\u00dfe (oder Skalierung) des Spielobjekts bestimmt werden kann. Auch physikalische Eigenschaften werden einem Spielobjekt durch eine Komponente verliehen. Bei 2D-Spielen hei\u00dft diese Rigidbody2D. Ebenso werden Grenzen eines Spielobjekts (f\u00fcr Kollisionsabfragen) durch eine Komponente - Collider - angegeben. C # -Skripte werden einem Spielobjekt \u00fcber \"Add Component\" > \"New Script\" \"angeheftet\". Das besondere an Skripten ist, dass du darin auf andere Komponenten des Spielobjekts oder \u00fcberhaupt auf andere Spielobjekte in einer Szene zugreifen kannst. Weiters k\u00f6nnen Eingaben durch Keyboard, Maus oder GamePad verwendet oder andere Aspekte der Unity Spiel-Engine ver\u00e4ndert werden. Somit kannst du gezielt die Spiellogik f\u00fcr dein Spiel programmieren. \u00dcbung Beschreibe in eigenen Worten, wof\u00fcr die Spielobjekt-Komponenten im obigen Bild verwendet werden. SpriteRenderer ist bereits beschrieben.","title":"Spielobjekte und Komponenten"},{"location":"firststeps/#projektdateien","text":"Projektdateien findest du in Unity unter \"Project\" > \"Assets\" . Mit \"Create\" kannst du dort neue Ordner und Dateien anlegen. Nat\u00fcrlich kannst du in Unity auch mit Drag and Drop Dateien importieren. Um sich \u00dcbersicht \u00fcber die verwendeten Dateien zu verschaffen, k\u00f6nnen Ordner angelegt werden. Arbeitsauftrag Lege folgende Ordner im \"Assets\"-Bereich von Unity an: Sprites : f\u00fcr alle 2D Grafiken Scripts : f\u00fcr alle C # Programm-Skripte Vorlagen : f\u00fcr Spielobjekte, die als Vorlage erstellt und verwendet werden Material : f\u00fcr physikalische Materialeigenschaften Tipp Du gelangst per Rechtsklick auf den \"Assets\" -Ordner zu einem Men\u00fc, in dem du ebenso \"Create\" findest. Um ein neues Script f\u00fcr ein GameObject zu erstellen, mache folgendes: Arbeitsauftrag Lege die Sprite-Datei elef.png im Ordner \"Sprites\" in deinem Unity Projekt ab. Ziehe das neue Sprite anschlie\u00dfend vom Project Panel in das Hierarchy Panel. Nenne das neue GameObject \"Elli\". Hefte dem neu erzeugten GameObject Elli ein C#-Skript namens \"HalloElli\" an. Tipp Ein Sprite ist eine 2D Grafik. Das hei\u00dft, diese Grafik hat 2 Dimensionen. Sie kann auf der x- und der y-Achse positioniert und skaliert(=vergr\u00f6\u00dfert und verkleinert) werden. Eine Tiefendimension (z-Achse), die man etwa bei 3D-Spielen verwendet, fehlt.","title":"Projektdateien"},{"location":"firststeps/#erste-schritte-in-c","text":"C # (C Sharp) ist (in erster Linie) eine objektorientierte Programmiersprache. Unity-Skripte kann man in C # (oder in Javascript ) schreiben.","title":"Erste Schritte in C#"},{"location":"firststeps/#hallo-elli","text":"Arbeitsauftrag \u00d6ffne das C#-Skript \"HalloElli.cs\" in Visual Studio per Doppelklick auf diese Datei im Unity Projekt Panel. Bist du bereit f\u00fcr dein erstes C # -Skript? Kopiere nachfolgenden Programmcode nach \"HalloElli.cs\" und ersetze dessen Inhalte. using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class halloelli : MonoBehaviour { int punkte = 1 ; string troeten = \"Tr\u00f6\u00f6\u00f6t.\" ; void OnDisable () { Debug . Log ( \"Hallo Elli!\" ); } } Tipp Du kannst die Tastenkombination strg + c (gleichzeitig dr\u00fccken) zum Kopieren und strg + v zum Einf\u00fcgen verwenden. Zur\u00fcck in Unity, dr\u00fccke auf Start. Anschlie\u00dfend, \u00f6ffne das Console Panel . In diesem werden R\u00fcckmeldungen des Programms, wie etwa Debug -Nachrichten ausgegeben. Nun, klicke das GameObject Elli an. Im Inspector findest du neben dem GameObject Namen eine Tick-Box. Klicke die Tick-Box an. Arbeitsauftrag Notiere die Ausgabe in der Konsole.","title":"Hallo Elli!"},{"location":"firststeps/#programmstruktur-in-c","text":"Nachfolgend findest du die typische Programmstruktur eines C # -Skripts (mit Erkl\u00e4rungen): //BIBLIOTHEKEN = PROGRAMMTEILE, DIE IN DAS SCRIPT IMPORTIERT WERDEN using System ; //using = EIN SCHL\u00dcSSELWORT IN C#; using System HEI\u00dfT: verwende alle Klassen im Namespace(= Programmateil) System using System.Collections ; using System.Collections.Generic ; using UnityEngine ; //DIESE BIBLIOTHEK ERM\u00d6GLICHT ETWA DEN ZUGRIFF AUF DIE UNITY SPIEL-ENGINE //EINE KLASSE = class bezeichnung {... Inhalte der Klasse ...} public class halloelli : MonoBehaviour //DIESE KLASSE \"ERBT\" VON MonoBehaviour - IST ALSO F\u00dcR EIN GAMEOBJECT { //KLASSEN-ATTRIBUTE (EIGENSCHAFTEN) WERDEN IN VARIABLEN GEFASST int punkte = 1 ; string troeten = \"Tr\u00f6\u00f6\u00f6t.\" ; //FUNKTION(EN) DER KLASSE void OnDisable () { //STATEMENT(S) - AUSDR\u00dcCKE Debug . Log ( \"Hallo Elli!\" ); /* Dies * ist ein * mehrzeiliges * Kommentar */ //Dies ist ein einzeiliges Kommentar } } ACHTUNG Gro\u00df- und Kleinschreibung wird beachtet! Alle Statements und Ausdr\u00fccke werden mit ; beendet! Jedes C # -Programm startet mit einer main-Funktion! (Diese wird von Unity im Hintergrund aufgerufen, wenn du dein Spiel startest.)","title":"Programmstruktur in C#"},{"location":"firststeps/#weiterfuhrende-resourcen","text":"Grundlagen der Sprache C # (aus dem Visual C # Handbuch) Introduction to Unity Tutorial Teil 1 (Ray Wenderlich, Englisch) Introduction to Unity Tutorial Teil 2 (Ray Wenderlich, Englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"functions/","text":"Funktionen \u00b6 Lernziele In diesem Kapitel lernst du was Funktionen beim Programmieren sind. Du lernst, wof\u00fcr Funktionen verwendet werden, was Parameter und R\u00fcckgabewerte sind und wie du deine eigenen Funktionen schreiben kannst. Wof\u00fcr braucht man Funktionen? \u00b6 Funktionen (bzw. Methoden) sind kleine Unterprogramme . Vielleicht musst du f\u00fcr dein Spiel den Abstand zwischen zwei Objekten berechnen? Diese Berechnung ben\u00f6tigt man in den meisten Spielen sehr h\u00e4ufig. Eine M\u00f6glichkeit ist: den daf\u00fcr n\u00f6tigen Code jedes Mal eintippen, oder: mit Kopieren und Einf\u00fcgen \u00fcberall einzuf\u00fcgen, wo du ihn ben\u00f6tigst. Das w\u00e4re aber nicht nur sehr viel Arbeit, sondern auch sehr schwer zu warten. Wenn du zum Beispiel sp\u00e4ter merkst, dass deine Berechnung einen Fehler enth\u00e4lt, musst du an allen Stellen im Programm den Fehler ausbessern. Eine bessere M\u00f6glichkeit ist: Du erstellst eine Funktion , die den Abstand zwischen zwei Punkten berechnet. Die Erstellung einer Funktion man als Definition . //Diese Funktion berechnet den Abstand zwischen zwei Objekten public float Abstand ( GameObject object1 , GameObject object2 ) { float abstand = Vector3 . Distance ( object1 . transform . position , object2 . transform . position ); return abstand ; } Anstatt nun jedes Mal diese Berechnung h\u00e4ndisch durchzuf\u00fchren, kannst du diese Funktion verwenden. Das Ausf\u00fchren einer Funktion bezeichnet man als Aufruf . float entfernung = Abstand ( elli , ossi ); Au\u00dferdem musst du \u00c4nderungen nur an einer Stelle, n\u00e4mlich im Code der Funktion, durchf\u00fchren. Aufbau einer Funktion \u00b6 Der Zugriffsmodifikator legt fest, von welchen Klassen man auf die Funktion zugreifen kann. Eine Funktion kann beliebig viele Parameter haben. Parameter legen genauer fest, was die Funktion tun soll. In unserem Beispiel wird \u00fcber die Parameter festgelegt, von welchen zwei Spielobjekten der Abstand berechnet werden soll. Die Parameter stehen im Body der Funktion als Variablen zur Verf\u00fcgung. Funktionen mit R\u00fcckgabewert \u00b6 Das Schl\u00fcsselwort return beendet die Ausf\u00fchrung einer Funktion und gibt den danachstehenden Wert an den Methodenaufrufer zur\u00fcck. Zum Beispiel kannst du das Ergebnis eines Aufrufs der Funktion Abstand() in einer Variable speichern oder direkt in einem if -Statement verwenden: if ( Abstand ( elli , pilz ) < 100 ){ } Funktionen ohne R\u00fcckgabewert \u00b6 Nicht immer ben\u00f6tigt man eine Funktion mit R\u00fcckgabewert. F\u00fcr so ein Funktion gibt man als R\u00fcckgabetyp void an, au\u00dferdem ben\u00f6tigt man das Schl\u00fcsselwort return nicht. zwei Beispielel: // Diese Funktion erh\u00f6ht den Punktestand und aktualisiert den Text des Punktestands. public void ErhoehePunktestand ( int punkte ) { punkteStand = punkteStand + punkte ; AktualisierePunktestandText (); } // Diese Funktion aktualisiert den angezeigten Text des Punktestands. // Sie muss immer aufgerufen werden, nachdem sich die Punkte ge\u00e4ndert haben. private void AktualisierePunktestandText () { scoreText . text = \"Score: \" + punkteStand ; } ACHTUNG Je nach Programmiersprache gibt es unterschiedliche Definitionen der Begriffe Funktion , Prozedur und Methode . Oft werden als Funktionen nur jene Methoden mit R\u00fcckgabewert bezeichnet (In Anlehnung an den Funktionsbegriff aus der Mathematik). Jene ohne R\u00fcckgabewert hei\u00dfen dann Prozedur . Im Kontext von C,C++ und C# werden jedoch meist sowohl Methoden mit als auch ohne R\u00fcckgabewert als Funktionen bezeichnet. Weiterf\u00fchrende Resourcen \u00b6 Variables and Functions Tutorial (englisch) Scope and Access Control in Unity Tutorial (englisch)","title":"Funktionen"},{"location":"functions/#funktionen","text":"Lernziele In diesem Kapitel lernst du was Funktionen beim Programmieren sind. Du lernst, wof\u00fcr Funktionen verwendet werden, was Parameter und R\u00fcckgabewerte sind und wie du deine eigenen Funktionen schreiben kannst.","title":"Funktionen"},{"location":"functions/#wofur-braucht-man-funktionen","text":"Funktionen (bzw. Methoden) sind kleine Unterprogramme . Vielleicht musst du f\u00fcr dein Spiel den Abstand zwischen zwei Objekten berechnen? Diese Berechnung ben\u00f6tigt man in den meisten Spielen sehr h\u00e4ufig. Eine M\u00f6glichkeit ist: den daf\u00fcr n\u00f6tigen Code jedes Mal eintippen, oder: mit Kopieren und Einf\u00fcgen \u00fcberall einzuf\u00fcgen, wo du ihn ben\u00f6tigst. Das w\u00e4re aber nicht nur sehr viel Arbeit, sondern auch sehr schwer zu warten. Wenn du zum Beispiel sp\u00e4ter merkst, dass deine Berechnung einen Fehler enth\u00e4lt, musst du an allen Stellen im Programm den Fehler ausbessern. Eine bessere M\u00f6glichkeit ist: Du erstellst eine Funktion , die den Abstand zwischen zwei Punkten berechnet. Die Erstellung einer Funktion man als Definition . //Diese Funktion berechnet den Abstand zwischen zwei Objekten public float Abstand ( GameObject object1 , GameObject object2 ) { float abstand = Vector3 . Distance ( object1 . transform . position , object2 . transform . position ); return abstand ; } Anstatt nun jedes Mal diese Berechnung h\u00e4ndisch durchzuf\u00fchren, kannst du diese Funktion verwenden. Das Ausf\u00fchren einer Funktion bezeichnet man als Aufruf . float entfernung = Abstand ( elli , ossi ); Au\u00dferdem musst du \u00c4nderungen nur an einer Stelle, n\u00e4mlich im Code der Funktion, durchf\u00fchren.","title":"Wof\u00fcr braucht man Funktionen?"},{"location":"functions/#aufbau-einer-funktion","text":"Der Zugriffsmodifikator legt fest, von welchen Klassen man auf die Funktion zugreifen kann. Eine Funktion kann beliebig viele Parameter haben. Parameter legen genauer fest, was die Funktion tun soll. In unserem Beispiel wird \u00fcber die Parameter festgelegt, von welchen zwei Spielobjekten der Abstand berechnet werden soll. Die Parameter stehen im Body der Funktion als Variablen zur Verf\u00fcgung.","title":"Aufbau einer Funktion"},{"location":"functions/#funktionen-mit-ruckgabewert","text":"Das Schl\u00fcsselwort return beendet die Ausf\u00fchrung einer Funktion und gibt den danachstehenden Wert an den Methodenaufrufer zur\u00fcck. Zum Beispiel kannst du das Ergebnis eines Aufrufs der Funktion Abstand() in einer Variable speichern oder direkt in einem if -Statement verwenden: if ( Abstand ( elli , pilz ) < 100 ){ }","title":"Funktionen mit R\u00fcckgabewert"},{"location":"functions/#funktionen-ohne-ruckgabewert","text":"Nicht immer ben\u00f6tigt man eine Funktion mit R\u00fcckgabewert. F\u00fcr so ein Funktion gibt man als R\u00fcckgabetyp void an, au\u00dferdem ben\u00f6tigt man das Schl\u00fcsselwort return nicht. zwei Beispielel: // Diese Funktion erh\u00f6ht den Punktestand und aktualisiert den Text des Punktestands. public void ErhoehePunktestand ( int punkte ) { punkteStand = punkteStand + punkte ; AktualisierePunktestandText (); } // Diese Funktion aktualisiert den angezeigten Text des Punktestands. // Sie muss immer aufgerufen werden, nachdem sich die Punkte ge\u00e4ndert haben. private void AktualisierePunktestandText () { scoreText . text = \"Score: \" + punkteStand ; } ACHTUNG Je nach Programmiersprache gibt es unterschiedliche Definitionen der Begriffe Funktion , Prozedur und Methode . Oft werden als Funktionen nur jene Methoden mit R\u00fcckgabewert bezeichnet (In Anlehnung an den Funktionsbegriff aus der Mathematik). Jene ohne R\u00fcckgabewert hei\u00dfen dann Prozedur . Im Kontext von C,C++ und C# werden jedoch meist sowohl Methoden mit als auch ohne R\u00fcckgabewert als Funktionen bezeichnet.","title":"Funktionen ohne R\u00fcckgabewert"},{"location":"functions/#weiterfuhrende-resourcen","text":"Variables and Functions Tutorial (englisch) Scope and Access Control in Unity Tutorial (englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"gameloop/","text":"Die Spielschleife \u00b6 Was ist eine Spielschleife? \u00b6 In einer Spielschleife werden neben Kollisionsabfragen und der Bewegungsteuerung sogar noch viel grundlegendere Dinge, wie etwa das Zeichnen des Spieleinhalts erledigt. Eine Spielschleife ist eine Schleife, die fortlaufend wieder wiederholt wird und eine Handvoll wichtiger Grundfunktionen f\u00fcr ein Spiel beinhaltet. Eine typische Spielschleife sieht vom Konzept her etwa folgenderma\u00dfen aus: Weshalb ben\u00f6tigt man eine Spielschleife? \u00b6 Die Spielschleife sorgt daf\u00fcr, dass Ereignisse, die zum Spiel geh\u00f6ren, fortlaufend stattfinden. Frage: \"Kann man die Spielschleife nicht einfach selbst mit einer While-Schleife implementieren?\" Antwort: \"M\u00f6glich ist das schon, aber die Spielschleife von Spieleentwicklungswerkzeugen beinhaltet auch Geschwindigkeitsoptimierungen, d.h. sie tr\u00e4gt die Verantwortung daf\u00fcr, dass Spiele in der uns bekannten Geschwindigkeit auf g\u00e4ngiger Hardware ablaufen k\u00f6nnen. Mit einer selbstgemachten, nicht-optimierten Spielschleife, kann es leicht passieren, dass Spieler und Spielerinnen in einem halbwegs komplexen Spiel gerade mal alle 30 Sekunden einen Schritt machen k\u00f6nnen - Nicht gerade der gr\u00f6\u00dfte Spielspa\u00df!\" Ein weiteres Problem ist, dass das Spiel auf unterschiedlicher Hardware unterschiedlich schnell l\u00e4uft. Um eine professionelle Implementierung einer Spielschleife kommt man in der Spieleentwicklung nicht herum. Einklinken in die Spielschleife in Unity \u00b6 Folgende Funktionen eines Spielobjekt-Skripts werden in der Unity-Spielschleife ausgef\u00fchrt: Eine genaue Beschreibung der Funktionen findest du in der offiziellen Unity Programmier-Referenz .","title":"Die Spiel-Schleife"},{"location":"gameloop/#die-spielschleife","text":"","title":"Die Spielschleife"},{"location":"gameloop/#was-ist-eine-spielschleife","text":"In einer Spielschleife werden neben Kollisionsabfragen und der Bewegungsteuerung sogar noch viel grundlegendere Dinge, wie etwa das Zeichnen des Spieleinhalts erledigt. Eine Spielschleife ist eine Schleife, die fortlaufend wieder wiederholt wird und eine Handvoll wichtiger Grundfunktionen f\u00fcr ein Spiel beinhaltet. Eine typische Spielschleife sieht vom Konzept her etwa folgenderma\u00dfen aus:","title":"Was ist eine Spielschleife?"},{"location":"gameloop/#weshalb-benotigt-man-eine-spielschleife","text":"Die Spielschleife sorgt daf\u00fcr, dass Ereignisse, die zum Spiel geh\u00f6ren, fortlaufend stattfinden. Frage: \"Kann man die Spielschleife nicht einfach selbst mit einer While-Schleife implementieren?\" Antwort: \"M\u00f6glich ist das schon, aber die Spielschleife von Spieleentwicklungswerkzeugen beinhaltet auch Geschwindigkeitsoptimierungen, d.h. sie tr\u00e4gt die Verantwortung daf\u00fcr, dass Spiele in der uns bekannten Geschwindigkeit auf g\u00e4ngiger Hardware ablaufen k\u00f6nnen. Mit einer selbstgemachten, nicht-optimierten Spielschleife, kann es leicht passieren, dass Spieler und Spielerinnen in einem halbwegs komplexen Spiel gerade mal alle 30 Sekunden einen Schritt machen k\u00f6nnen - Nicht gerade der gr\u00f6\u00dfte Spielspa\u00df!\" Ein weiteres Problem ist, dass das Spiel auf unterschiedlicher Hardware unterschiedlich schnell l\u00e4uft. Um eine professionelle Implementierung einer Spielschleife kommt man in der Spieleentwicklung nicht herum.","title":"Weshalb ben\u00f6tigt man eine Spielschleife?"},{"location":"gameloop/#einklinken-in-die-spielschleife-in-unity","text":"Folgende Funktionen eines Spielobjekt-Skripts werden in der Unity-Spielschleife ausgef\u00fchrt: Eine genaue Beschreibung der Funktionen findest du in der offiziellen Unity Programmier-Referenz .","title":"Einklinken in die Spielschleife in Unity"},{"location":"loops/","text":"Schleifen \u00b6 for-Schleife \u00b6 while-Schleife \u00b6 Schl\u00fcsselw\u00f6rter \"break\" (Abbrechen) und \"continue\" (Weitermachen) \u00b6 Weiterf\u00fchrende Resourcen \u00b6","title":"Schleifen"},{"location":"loops/#schleifen","text":"","title":"Schleifen"},{"location":"loops/#for-schleife","text":"","title":"for-Schleife"},{"location":"loops/#while-schleife","text":"","title":"while-Schleife"},{"location":"loops/#schlusselworter-break-abbrechen-und-continue-weitermachen","text":"","title":"Schl\u00fcsselw\u00f6rter \"break\" (Abbrechen) und \"continue\" (Weitermachen)"},{"location":"loops/#weiterfuhrende-resourcen","text":"","title":"Weiterf\u00fchrende Resourcen"},{"location":"operators/","text":"Operatoren \u00b6 Lernziele In diesem Kapitel lernst du, was ein Operator ist. Du lernst verschiedene Operatoren kennen und lernst wie du sie verwenden kannst. Wenn du nicht mehr wei\u00dft welchen Operator du brauchst, kannst du in diesem Kapitel nachschauen. Ein Operator ist eine Aktion, die man mit einer oder mehreren Variable(n) oder Objekt(en) durchf\u00fchren kann. \u00dcbersicht \u00b6 Arithmetische Operatoren \u00b6 Arithmetische Operatoren erlauben uns einfache Berechnungen durchzuf\u00fchren, fast so wie ein Taschenrechner! ACHTUNG Arithmetische Operatoren funktionieren in der Regel von Links nach Rechts. Es gilt Punkt vor Strich Rechnung! Du kannst Klammern verwenden, um die Reihenfolge der Berechnung anzugeben. Wie in Mathematik werden Begriffe in Klammern zuerst berechnet. = Operator \u00b6 = ist der Zuweisungsoperator . Er speichert was rechts davon steht in die Variable links davon. Den Zuweisungsoperator = verwendet man folgenderma\u00dfen: //1. Teil //Wir deklarieren und initialisieren zuerst einmal unsere Variablen int x und String name. //In *name* ist \"Kein Name\" gespeichert. String name = \"Kein Name\" ; //In *lieblingszahl* ist die Zahl 1 gespeichert. int lieblingszahl = 1 ; //2. Teil //Wir weisen wir dem String *name* \"Ossi der Elefant\" mit dem Zuweisungsoperator = zu. name = \"Elli der Elefant\" ; //Ab sofort steht in name \"Elli der Elefant\" anstatt \"Null\". //Wir weisen dem Integer *lieblingszahl* die Zahl 3 zu. x = 3 //Ab sofort steht in *lieblingszahl* die Zahl 3 anstatt 1. Debug . Log ( \"Hallo ich bin \" + name + \" und meine Lieblingszahl ist\" + lieblingszahl ); Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() in \"HalloElli.cs\" mit oben stehendem Programm-Code. In der Konsole steht nach Aufruf: \"Hallo ich bin Elli der Elefant und meine Lieblingszahl ist 3.\" Wir sehen also, die Werte in x und name sind jetzt anders weil wir neue Werte mit = zugewiesen haben. + Operator \u00b6 Der Additionsoperator + addiert Variablen. int a = 1 ; int b = 2 ; int c = 0 ; Debug . Log ( a + b ); Debug . Log ( \" \" ); Debug . Log ( b + 3 ); c = a + b ; Arbeitsauftrag Erg\u00e4nze die Funktion OnEnable() in HalloElli.cs mit oben stehendem Programm-Code. In der Konsole steht nach Aufruf \"3 5\" . 3 ist das Ergebnis von \"a+b\" was wir in c gespeichert haben und ausgeben. 5 ist das Ergebnis von \"b+3\" denn in b ist 2 gespeichert. Arbeitsauftrag Verwende den Additionsparameter + um die Zahlen b und c zu addieren. Gib dein Ergebnis mit Debug.Log() aus. Je nachdem ob du deinen Code vor oder nach c + a+b einf\u00fcgst ist das Ergebnis anders. Warum? Du kannst den Additionsoperator + auch verwenden, um Strings zu kombinieren. String teil1 = \"Wasch\" ; String teil2 = \"maschine\" ; Debug . Log ( teil1 + teil2 ); Debug . Log ( \" Bohr\" + teil2 ); Debug Log ( \"S\u00fc\u00dfes\" + \" oder \" + \"Saures\" ); In der Konsole steht jetzt: Waschmaschine Bohrmaschine S\u00fc\u00dfes oder Saures Tipp Wenn du Strings kombinierst, um einen Satz zu erstellen, musst du Leerzeichen anf\u00fcgen. Sonst kleben die W\u00f6rter zusammen. - Operator \u00b6 Den Subtraktionsoperator - verwendet man um 2 Variablen zu subtrahieren int a = 3 ; a = a - 2 ; Debug . Log ( a ); In der Konsole steht nach Ausf\u00fchren 1 . * Operator \u00b6 Den Multiplikationsoperator * verwendet man um 2 Variablen zu multiplizieren. int a = 3 ; int b = a * 5 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 15 . Ohne Klammern: int a = 3 ; int b = a + 2 * 5 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 25 . Mit Klammern: int a = 3 ; int b = a +( 2 * 5 ); Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 13 . / Operator \u00b6 Den Divisionsoperator / verwendet man um 2 Variablen miteinander zu dividieren. ACHTUNG Es wird immer die Zahl auf der linken Seite durch die Zahl auf der rechten Seite dividiert. int a = 15 ; int b = a / 3 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 5 . int a = 15 ; int b = a / 3 + 2 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 7 . int a = 15 ; int b = a /( 3 + 2 ); Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 3 . % Operator \u00b6 Der Modulo Operator % wird verwendet, um eine Division mit Rest durchzuf\u00fchren. Das Ergebnis dieser Berechnung ist aber nur der Restbetrag . int a = 10 ; int b = 10 % 3 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 1 , denn 10 dividiert durch 3 ist 3 + 1 Rest. Der Modulo Operator % liefert nur den Rest zur\u00fcck. Logische Operatoren \u00b6 Logische Operatoren geben an, ob eine Verkn\u00fcpfung von Wahrheitswerten Wahr oder Falsch ist. Tipp Ein Zustand, der entweder wahr oder falsch ist, ist ein Boolean . Logischen Operatoren sind besonders wichtig bei Verzweigungen . NICHT Operator ( ! ) \u00b6 UND Operator ( && ) \u00b6 ODER Operator ( || ) \u00b6 ACHTUNG Wenn du etwas berechnest, aber das Ergebnis nicht sofort weiterverwendest (oder einer Variablen zuweist) verschwindet es noch vor deinem n\u00e4chsten Programmierbefehl.","title":"Operatoren"},{"location":"operators/#operatoren","text":"Lernziele In diesem Kapitel lernst du, was ein Operator ist. Du lernst verschiedene Operatoren kennen und lernst wie du sie verwenden kannst. Wenn du nicht mehr wei\u00dft welchen Operator du brauchst, kannst du in diesem Kapitel nachschauen. Ein Operator ist eine Aktion, die man mit einer oder mehreren Variable(n) oder Objekt(en) durchf\u00fchren kann.","title":"Operatoren"},{"location":"operators/#ubersicht","text":"","title":"\u00dcbersicht"},{"location":"operators/#arithmetische-operatoren","text":"Arithmetische Operatoren erlauben uns einfache Berechnungen durchzuf\u00fchren, fast so wie ein Taschenrechner! ACHTUNG Arithmetische Operatoren funktionieren in der Regel von Links nach Rechts. Es gilt Punkt vor Strich Rechnung! Du kannst Klammern verwenden, um die Reihenfolge der Berechnung anzugeben. Wie in Mathematik werden Begriffe in Klammern zuerst berechnet.","title":"Arithmetische Operatoren"},{"location":"operators/#operator","text":"= ist der Zuweisungsoperator . Er speichert was rechts davon steht in die Variable links davon. Den Zuweisungsoperator = verwendet man folgenderma\u00dfen: //1. Teil //Wir deklarieren und initialisieren zuerst einmal unsere Variablen int x und String name. //In *name* ist \"Kein Name\" gespeichert. String name = \"Kein Name\" ; //In *lieblingszahl* ist die Zahl 1 gespeichert. int lieblingszahl = 1 ; //2. Teil //Wir weisen wir dem String *name* \"Ossi der Elefant\" mit dem Zuweisungsoperator = zu. name = \"Elli der Elefant\" ; //Ab sofort steht in name \"Elli der Elefant\" anstatt \"Null\". //Wir weisen dem Integer *lieblingszahl* die Zahl 3 zu. x = 3 //Ab sofort steht in *lieblingszahl* die Zahl 3 anstatt 1. Debug . Log ( \"Hallo ich bin \" + name + \" und meine Lieblingszahl ist\" + lieblingszahl ); Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() in \"HalloElli.cs\" mit oben stehendem Programm-Code. In der Konsole steht nach Aufruf: \"Hallo ich bin Elli der Elefant und meine Lieblingszahl ist 3.\" Wir sehen also, die Werte in x und name sind jetzt anders weil wir neue Werte mit = zugewiesen haben.","title":"= Operator"},{"location":"operators/#operator_1","text":"Der Additionsoperator + addiert Variablen. int a = 1 ; int b = 2 ; int c = 0 ; Debug . Log ( a + b ); Debug . Log ( \" \" ); Debug . Log ( b + 3 ); c = a + b ; Arbeitsauftrag Erg\u00e4nze die Funktion OnEnable() in HalloElli.cs mit oben stehendem Programm-Code. In der Konsole steht nach Aufruf \"3 5\" . 3 ist das Ergebnis von \"a+b\" was wir in c gespeichert haben und ausgeben. 5 ist das Ergebnis von \"b+3\" denn in b ist 2 gespeichert. Arbeitsauftrag Verwende den Additionsparameter + um die Zahlen b und c zu addieren. Gib dein Ergebnis mit Debug.Log() aus. Je nachdem ob du deinen Code vor oder nach c + a+b einf\u00fcgst ist das Ergebnis anders. Warum? Du kannst den Additionsoperator + auch verwenden, um Strings zu kombinieren. String teil1 = \"Wasch\" ; String teil2 = \"maschine\" ; Debug . Log ( teil1 + teil2 ); Debug . Log ( \" Bohr\" + teil2 ); Debug Log ( \"S\u00fc\u00dfes\" + \" oder \" + \"Saures\" ); In der Konsole steht jetzt: Waschmaschine Bohrmaschine S\u00fc\u00dfes oder Saures Tipp Wenn du Strings kombinierst, um einen Satz zu erstellen, musst du Leerzeichen anf\u00fcgen. Sonst kleben die W\u00f6rter zusammen.","title":"+ Operator"},{"location":"operators/#-operator","text":"Den Subtraktionsoperator - verwendet man um 2 Variablen zu subtrahieren int a = 3 ; a = a - 2 ; Debug . Log ( a ); In der Konsole steht nach Ausf\u00fchren 1 .","title":"- Operator"},{"location":"operators/#operator_2","text":"Den Multiplikationsoperator * verwendet man um 2 Variablen zu multiplizieren. int a = 3 ; int b = a * 5 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 15 . Ohne Klammern: int a = 3 ; int b = a + 2 * 5 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 25 . Mit Klammern: int a = 3 ; int b = a +( 2 * 5 ); Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 13 .","title":"* Operator"},{"location":"operators/#operator_3","text":"Den Divisionsoperator / verwendet man um 2 Variablen miteinander zu dividieren. ACHTUNG Es wird immer die Zahl auf der linken Seite durch die Zahl auf der rechten Seite dividiert. int a = 15 ; int b = a / 3 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 5 . int a = 15 ; int b = a / 3 + 2 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 7 . int a = 15 ; int b = a /( 3 + 2 ); Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 3 .","title":"/ Operator"},{"location":"operators/#operator_4","text":"Der Modulo Operator % wird verwendet, um eine Division mit Rest durchzuf\u00fchren. Das Ergebnis dieser Berechnung ist aber nur der Restbetrag . int a = 10 ; int b = 10 % 3 ; Debug . Log ( b ); In der Konsole steht nach Ausf\u00fchren 1 , denn 10 dividiert durch 3 ist 3 + 1 Rest. Der Modulo Operator % liefert nur den Rest zur\u00fcck.","title":"% Operator"},{"location":"operators/#logische-operatoren","text":"Logische Operatoren geben an, ob eine Verkn\u00fcpfung von Wahrheitswerten Wahr oder Falsch ist. Tipp Ein Zustand, der entweder wahr oder falsch ist, ist ein Boolean . Logischen Operatoren sind besonders wichtig bei Verzweigungen .","title":"Logische Operatoren"},{"location":"operators/#nicht-operator","text":"","title":"NICHT Operator ( ! )"},{"location":"operators/#und-operator","text":"","title":"UND Operator ( &amp;&amp; )"},{"location":"operators/#oder-operator","text":"ACHTUNG Wenn du etwas berechnest, aber das Ergebnis nicht sofort weiterverwendest (oder einer Variablen zuweist) verschwindet es noch vor deinem n\u00e4chsten Programmierbefehl.","title":"ODER Operator ( || )"},{"location":"spaceshooter/","text":"Space-Asteroids das Spiel \u00b6 Lernziele In diesem Kapitel wirst du mithilfe des Gelernten aus den vorigen Kapiteln die letzten Teile des Spiels Space-Asteroids selber programmieren. In Space-Asteroids fliegst du mit einem Raumschiff durch ein Asteroidenfeld. Du musst die Asteroiden abschie\u00dfen oder ihnen ausweichen. Wenn du von einem getroffen wirst, explodiert dein Raumschiff. Das Spiel ist beinahe schon fertig. Lediglich die Programmierung der Asteroiden fehlt noch. 1. Projekt downloaden \u00b6 Gehe auf https://github.com/learn2proGrAME/SpaceShooter Klicke zuerst auf \"Clone or Download\" und dann auf \"Download ZIP\" Nach dem Download entzippe das heruntergeladene Verzeichnis, \u00f6ffne Unity und klicke auf \"Open\" Gehe in das entpackte Verzeichnis und \u00f6ffne das Projekt. 2. Teste das Spiel \u00b6 Klicke auf den Play-Button in Unity und teste das Spiel Du kannst mit den Pfeiltasten herumfliegen und mit der Leertaste schie\u00dfen. Ansonsten ist das Spiel aber noch recht langweilig. Wenn du w\u00e4hrend das Spiel l\u00e4uft in die Scene-View schaust, siehst du, dass am oberen Spielfeldrand schon Asteroiden erzeugt werden. Allerdings tun diese noch nichts. 3. Die Bewegung \u00b6 3.1. Die ben\u00f6tigten Variablen deklarieren \u00b6 Als erstes k\u00fcmmern wir uns darum, dass die Asteroiden in Bewegung gesetzt werden. Sie sollen senkrecht vom oberen Rand des Spielfelds zum unteren Rand fliegen. \u00d6ffne unter Assets/Scripts das Script Asteroid Da wir die eingebaute Physic-Engine von Unity verwenden, ben\u00f6tigen wir f\u00fcr die Bewegung einen Rigidbody . Erstelle als erstes eine private Variable vom Typ Rigidbody in der dieser gespeichert wird. private Rigidbody rb ; Lege au\u00dferdem noch eine public Variable f\u00fcr die Geschwindigkeit an mit der der Asteroid fliegen soll. public float geschwindigkeit ; 3.2. Bewegung! \u00b6 Bevor du den Asteroiden in Bewegung setzen kannst, musst du die Variable des Rigidbodys initialisieren. Mache dies in der start() Methode mit dem Befehl GetComponent<Rigidbody>() Dein Code sollte so aussehen: //Start() wird von Unity aufgerufen, wenn das Object erzeugt wird. void Start (){ //Setze die Referenz auf den Rigidbody rb = GetComponent < Rigidbody > (); } Nun m\u00fcssen wir dem Rigidbody nur noch eine Geschwindigkeit geben. Verwende hierf\u00fcr den Befehl rb.velocity = new Vector3 (0, 0, -geschwindigkeit); F\u00fcge diesen Befehl ebenfalls in der Start() Methode nach dem Initialisieren von rb ein. Hinweis Vielleicht ist dir aufgefallen, dass wir die Variable geschwindigkeit noch gar nicht initialisiert haben. Das ist kein Problem. Da diese public ist, kann man ihren Wert im Inspector von Unity festlegen. Speichere das Script und gehe wieder in Unity. Im Ordner Assets/Vorlagen findest du die Vorlage f\u00fcr die Asteroiden. Wenn du sie ausw\u00e4hlst siehst du, dass das Script Asteroid.cs bereits angeh\u00e4ngt ist. Wenn du nun noch die geschwindigkeit auf einen Wert gr\u00f6\u00dfer als 0 setzt, bist du mit diesem Teil fertig. Vergiss nicht zu testen und probiere ein paar unterschiedliche Werte f\u00fcr die Geschwindigkeit aus! 4. Rotation \u00b6 Die Asteroiden bewegen sich nun zwar, allerdings sehen sie noch ein bisschen leblos aus. Lassen wir sie rotieren! Sie sollen mit einer bestimmten Geschwindigkeit um eine zuf\u00e4llige Achse rotieren. Erstelle eine public Variable vom Typ float f\u00fcr die Rotationsgeschwindigkeit und gib ihr einen sinnvollen Namen. Dann f\u00fcge am Ende der Methode start() folgenden Befehl ein: rb . angularVelocity = Random . insideUnitSphere * rotationsgeschwindigkeit ; Wobei rotationsGeschwindigkeit der von dir gew\u00e4hlte Variablenname sein muss. Speichere das Skript, gehe in Unity und setze die Rotationsgeschwindigkeit im Inspector so wie in Schritt 3.2. Teste! 5. Kollisionen \u00b6 Die Asteroiden fliegen herum, drehen sich und wenn sie das Raumschiff ber\u00fchren wird dieses zerst\u00f6rt. Allerdings kann man sie noch nicht abschie\u00dfen. In diesem Teil wirst du folgende Dinge programmieren: Wenn ein Asteroid mit einem Lasergescho\u00df kollidiert ... ... werden Lasergescho\u00df und der Asteroid gel\u00f6scht ... wird der Punktestand erh\u00f6ht ... wird ein Sound abgespielt Hinweis Der meiste Code in diesem Teil wird in der Methode OnTriggerEnter(Collider other) eingef\u00fcgt. Diese Methode wird (etwas vereinfacht gesagt) von Unity immer dann aufgerufen, wenn eine Kollision stattfindet. Der Parameter other ist hierbei der Collider des GameObjects mit dem kollidiert wird. 5.1. Was kollidiert? \u00b6 Bevor wir implementieren, was geschehen soll, m\u00fcssen wir \u00fcberpr\u00fcfen womit der Asteroid \u00fcberhaupt kollidiert. F\u00fcge ein if-Statement in der Methode OnTriggerEnter() ein, das \u00fcberpr\u00fcft ob die Variable other.tag gleich \"Gescho\u00df\" ist. Um zu \u00fcberpr\u00fcfen ob other ein Lasergescho\u00df ist. Hinweis Man kann in Unity jedem Gameobject und jeder Vorlage einen tag zuweisen. Dieser tag ist als String Variable tag in jedem GameObject verf\u00fcgbar. In diesem Spiel wurde z.B. den Lasergescho\u00dfen der tag \"Gescho\u00df\" und den Asteroiden der tag \"Hindernis\" gegeben. 5.2. Gescho\u00df und Asteroid l\u00f6schen \u00b6 Um in Unity ein Gameobject zu l\u00f6schen verwendet man die Funktion Destroy(GameObject) . Diese l\u00f6scht das Gameobjekt, das als Parameter angegeben wird am Ende des aktuellen Spielframes. Rufe nun zweimal die Funktion Destroy() auf. Gib einmal other.gameObject und einmal gameObject als Parameter an. 5.3. Punktestand erh\u00f6hen \u00b6 Der GameController stellt die Methode ErhoehePunktestand(int punkte) zur Verf\u00fcgung. Bevor du diese Funktion aufrufen kannst, ben\u00f6tigst du allerdings eine Variable mit einer Referenz auf den GameController. Erstelle eine private Variable vom Typ GameController am Beginn der Klasse und nenne sie \"gameController\". Initialisiere in der Methode Start() die Variable f\u00fcr den GameController mithilfe der Funktion FindeGameController() gameController = FindeGameController (); Rufe nun in der Methode OnTriggerEnter() im Asteroid-Skript die Funktion ErhoehePunktestand(int punkte) des GameControllers auf und gib als Parameter z.B. 10 an. Hinweis Um eine Funktion in einem anderen Objekt aufzurufen, verwende: variablenname-des-objekts.FunktionsName() Also z.B. gameController.ErhoehePunktestand(10); 5.4. Sound abspielen \u00b6 Lege als erstes eine public Variable vom Typ AudioClip am Beginn der Klasse an und speichere das Skript. Gehe in Unity auf Assets/Vorlagen und w\u00e4hle Asteroid aus. Im Inspektor siehst du die Variable f\u00fcr den AudioClip. Klicke auf die Zielscheibe rechts daneben und w\u00e4hle \"Explosion1\" aus. Zum Abspielen des Sounds gibt es im GameController die Methode csharp SpieleSound(AudioClip sound, float lautstaerke) Rufe diese Methode innerhalb von OnTriggerEnter auf und gib als Parameter die Variable f\u00fcr den Sound und 0.2f an. 5.5 Fertiger SourceCode \u00b6 Dein fertiger Sourcecode sollte in etwa so aussehen: using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Asteroid : MonoBehaviour { //Referenz auf den Rigidbody private Rigidbody rb ; //Die Geschwindigkeit mit der die Asteroiden fliegen public float geschwindigkeit ; //Rotationsgeschwindigkeit public float rotationsGeschwindigkeit ; //Referenz auf den GameController private GameController gameController ; //Der Sound der bei der Zerst\u00f6rung eines Asteroiden abgespielt wird. public AudioClip explosionsSound ; //Start() wird von Unity aufgerufen, wenn das Object erzeugt wird. void Start (){ //Setze die Referenz auf den Rigidbody rb = GetComponent < Rigidbody > (); //Setze die Geschwindigkeit rb . velocity = new Vector3 ( 0 , 0 , - geschwindigkeit ); //Setze die Rotationsgeschwindigkeit rb . angularVelocity = Random . insideUnitSphere * rotationsGeschwindigkeit ; //Setze GameController-Referenz gameController = FindeGameController (); } //OnTriggerEnter() wird von Unity aufgerufen, wenn ein anderer Collider mit dem eigenen Collider kollidiert. void OnTriggerEnter ( Collider other ) { //\u00dcberpr\u00fcfe ob das andere Objekt ein Gescho\u00df ist. if ( other . tag == \"Gescho\u00df\" ) { //L\u00f6sche das Gescho\u00df Destroy ( other . gameObject ); //L\u00f6sche den Asteroiden selbst Destroy ( gameObject ); //erh\u00f6he den Punktestand gameController . ErhoehePunktestand ( 10 ); //Spiele den explosionsSound ab gameController . SpieleSound ( explosionsSound , 0.2f ); } } // Diese Methode sucht nach dem GameController // Wenn einer gefunden wird, wird eine Referenz darauf zur\u00fcckgegeben. // Wenn kein GameController vorhanden ist, wird das Spiel mit einer Fehlermeldung beendet. private GameController FindeGameController () { GameObject gameControllerObject = GameObject . FindWithTag ( \"GameController\" ); //Befindet sich kein GameController im Spiel ist gameControllerObject == null if ( gameControllerObject != null ) { return gameControllerObject . GetComponent < GameController >(); } else { Debug . LogError ( \"Cannot find GameController Script\" ); Application . Quit (); return null ; } } }","title":"Spiel - Space-Asteroids"},{"location":"spaceshooter/#space-asteroids-das-spiel","text":"Lernziele In diesem Kapitel wirst du mithilfe des Gelernten aus den vorigen Kapiteln die letzten Teile des Spiels Space-Asteroids selber programmieren. In Space-Asteroids fliegst du mit einem Raumschiff durch ein Asteroidenfeld. Du musst die Asteroiden abschie\u00dfen oder ihnen ausweichen. Wenn du von einem getroffen wirst, explodiert dein Raumschiff. Das Spiel ist beinahe schon fertig. Lediglich die Programmierung der Asteroiden fehlt noch.","title":"Space-Asteroids das Spiel"},{"location":"spaceshooter/#1-projekt-downloaden","text":"Gehe auf https://github.com/learn2proGrAME/SpaceShooter Klicke zuerst auf \"Clone or Download\" und dann auf \"Download ZIP\" Nach dem Download entzippe das heruntergeladene Verzeichnis, \u00f6ffne Unity und klicke auf \"Open\" Gehe in das entpackte Verzeichnis und \u00f6ffne das Projekt.","title":"1. Projekt downloaden"},{"location":"spaceshooter/#2-teste-das-spiel","text":"Klicke auf den Play-Button in Unity und teste das Spiel Du kannst mit den Pfeiltasten herumfliegen und mit der Leertaste schie\u00dfen. Ansonsten ist das Spiel aber noch recht langweilig. Wenn du w\u00e4hrend das Spiel l\u00e4uft in die Scene-View schaust, siehst du, dass am oberen Spielfeldrand schon Asteroiden erzeugt werden. Allerdings tun diese noch nichts.","title":"2. Teste das Spiel"},{"location":"spaceshooter/#3-die-bewegung","text":"","title":"3. Die Bewegung"},{"location":"spaceshooter/#31-die-benotigten-variablen-deklarieren","text":"Als erstes k\u00fcmmern wir uns darum, dass die Asteroiden in Bewegung gesetzt werden. Sie sollen senkrecht vom oberen Rand des Spielfelds zum unteren Rand fliegen. \u00d6ffne unter Assets/Scripts das Script Asteroid Da wir die eingebaute Physic-Engine von Unity verwenden, ben\u00f6tigen wir f\u00fcr die Bewegung einen Rigidbody . Erstelle als erstes eine private Variable vom Typ Rigidbody in der dieser gespeichert wird. private Rigidbody rb ; Lege au\u00dferdem noch eine public Variable f\u00fcr die Geschwindigkeit an mit der der Asteroid fliegen soll. public float geschwindigkeit ;","title":"3.1. Die ben\u00f6tigten Variablen deklarieren"},{"location":"spaceshooter/#32-bewegung","text":"Bevor du den Asteroiden in Bewegung setzen kannst, musst du die Variable des Rigidbodys initialisieren. Mache dies in der start() Methode mit dem Befehl GetComponent<Rigidbody>() Dein Code sollte so aussehen: //Start() wird von Unity aufgerufen, wenn das Object erzeugt wird. void Start (){ //Setze die Referenz auf den Rigidbody rb = GetComponent < Rigidbody > (); } Nun m\u00fcssen wir dem Rigidbody nur noch eine Geschwindigkeit geben. Verwende hierf\u00fcr den Befehl rb.velocity = new Vector3 (0, 0, -geschwindigkeit); F\u00fcge diesen Befehl ebenfalls in der Start() Methode nach dem Initialisieren von rb ein. Hinweis Vielleicht ist dir aufgefallen, dass wir die Variable geschwindigkeit noch gar nicht initialisiert haben. Das ist kein Problem. Da diese public ist, kann man ihren Wert im Inspector von Unity festlegen. Speichere das Script und gehe wieder in Unity. Im Ordner Assets/Vorlagen findest du die Vorlage f\u00fcr die Asteroiden. Wenn du sie ausw\u00e4hlst siehst du, dass das Script Asteroid.cs bereits angeh\u00e4ngt ist. Wenn du nun noch die geschwindigkeit auf einen Wert gr\u00f6\u00dfer als 0 setzt, bist du mit diesem Teil fertig. Vergiss nicht zu testen und probiere ein paar unterschiedliche Werte f\u00fcr die Geschwindigkeit aus!","title":"3.2. Bewegung!"},{"location":"spaceshooter/#4-rotation","text":"Die Asteroiden bewegen sich nun zwar, allerdings sehen sie noch ein bisschen leblos aus. Lassen wir sie rotieren! Sie sollen mit einer bestimmten Geschwindigkeit um eine zuf\u00e4llige Achse rotieren. Erstelle eine public Variable vom Typ float f\u00fcr die Rotationsgeschwindigkeit und gib ihr einen sinnvollen Namen. Dann f\u00fcge am Ende der Methode start() folgenden Befehl ein: rb . angularVelocity = Random . insideUnitSphere * rotationsgeschwindigkeit ; Wobei rotationsGeschwindigkeit der von dir gew\u00e4hlte Variablenname sein muss. Speichere das Skript, gehe in Unity und setze die Rotationsgeschwindigkeit im Inspector so wie in Schritt 3.2. Teste!","title":"4. Rotation"},{"location":"spaceshooter/#5-kollisionen","text":"Die Asteroiden fliegen herum, drehen sich und wenn sie das Raumschiff ber\u00fchren wird dieses zerst\u00f6rt. Allerdings kann man sie noch nicht abschie\u00dfen. In diesem Teil wirst du folgende Dinge programmieren: Wenn ein Asteroid mit einem Lasergescho\u00df kollidiert ... ... werden Lasergescho\u00df und der Asteroid gel\u00f6scht ... wird der Punktestand erh\u00f6ht ... wird ein Sound abgespielt Hinweis Der meiste Code in diesem Teil wird in der Methode OnTriggerEnter(Collider other) eingef\u00fcgt. Diese Methode wird (etwas vereinfacht gesagt) von Unity immer dann aufgerufen, wenn eine Kollision stattfindet. Der Parameter other ist hierbei der Collider des GameObjects mit dem kollidiert wird.","title":"5. Kollisionen"},{"location":"spaceshooter/#51-was-kollidiert","text":"Bevor wir implementieren, was geschehen soll, m\u00fcssen wir \u00fcberpr\u00fcfen womit der Asteroid \u00fcberhaupt kollidiert. F\u00fcge ein if-Statement in der Methode OnTriggerEnter() ein, das \u00fcberpr\u00fcft ob die Variable other.tag gleich \"Gescho\u00df\" ist. Um zu \u00fcberpr\u00fcfen ob other ein Lasergescho\u00df ist. Hinweis Man kann in Unity jedem Gameobject und jeder Vorlage einen tag zuweisen. Dieser tag ist als String Variable tag in jedem GameObject verf\u00fcgbar. In diesem Spiel wurde z.B. den Lasergescho\u00dfen der tag \"Gescho\u00df\" und den Asteroiden der tag \"Hindernis\" gegeben.","title":"5.1. Was kollidiert?"},{"location":"spaceshooter/#52-gescho-und-asteroid-loschen","text":"Um in Unity ein Gameobject zu l\u00f6schen verwendet man die Funktion Destroy(GameObject) . Diese l\u00f6scht das Gameobjekt, das als Parameter angegeben wird am Ende des aktuellen Spielframes. Rufe nun zweimal die Funktion Destroy() auf. Gib einmal other.gameObject und einmal gameObject als Parameter an.","title":"5.2. Gescho\u00df und Asteroid l\u00f6schen"},{"location":"spaceshooter/#53-punktestand-erhohen","text":"Der GameController stellt die Methode ErhoehePunktestand(int punkte) zur Verf\u00fcgung. Bevor du diese Funktion aufrufen kannst, ben\u00f6tigst du allerdings eine Variable mit einer Referenz auf den GameController. Erstelle eine private Variable vom Typ GameController am Beginn der Klasse und nenne sie \"gameController\". Initialisiere in der Methode Start() die Variable f\u00fcr den GameController mithilfe der Funktion FindeGameController() gameController = FindeGameController (); Rufe nun in der Methode OnTriggerEnter() im Asteroid-Skript die Funktion ErhoehePunktestand(int punkte) des GameControllers auf und gib als Parameter z.B. 10 an. Hinweis Um eine Funktion in einem anderen Objekt aufzurufen, verwende: variablenname-des-objekts.FunktionsName() Also z.B. gameController.ErhoehePunktestand(10);","title":"5.3. Punktestand erh\u00f6hen"},{"location":"spaceshooter/#54-sound-abspielen","text":"Lege als erstes eine public Variable vom Typ AudioClip am Beginn der Klasse an und speichere das Skript. Gehe in Unity auf Assets/Vorlagen und w\u00e4hle Asteroid aus. Im Inspektor siehst du die Variable f\u00fcr den AudioClip. Klicke auf die Zielscheibe rechts daneben und w\u00e4hle \"Explosion1\" aus. Zum Abspielen des Sounds gibt es im GameController die Methode csharp SpieleSound(AudioClip sound, float lautstaerke) Rufe diese Methode innerhalb von OnTriggerEnter auf und gib als Parameter die Variable f\u00fcr den Sound und 0.2f an.","title":"5.4. Sound abspielen"},{"location":"spaceshooter/#55-fertiger-sourcecode","text":"Dein fertiger Sourcecode sollte in etwa so aussehen: using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Asteroid : MonoBehaviour { //Referenz auf den Rigidbody private Rigidbody rb ; //Die Geschwindigkeit mit der die Asteroiden fliegen public float geschwindigkeit ; //Rotationsgeschwindigkeit public float rotationsGeschwindigkeit ; //Referenz auf den GameController private GameController gameController ; //Der Sound der bei der Zerst\u00f6rung eines Asteroiden abgespielt wird. public AudioClip explosionsSound ; //Start() wird von Unity aufgerufen, wenn das Object erzeugt wird. void Start (){ //Setze die Referenz auf den Rigidbody rb = GetComponent < Rigidbody > (); //Setze die Geschwindigkeit rb . velocity = new Vector3 ( 0 , 0 , - geschwindigkeit ); //Setze die Rotationsgeschwindigkeit rb . angularVelocity = Random . insideUnitSphere * rotationsGeschwindigkeit ; //Setze GameController-Referenz gameController = FindeGameController (); } //OnTriggerEnter() wird von Unity aufgerufen, wenn ein anderer Collider mit dem eigenen Collider kollidiert. void OnTriggerEnter ( Collider other ) { //\u00dcberpr\u00fcfe ob das andere Objekt ein Gescho\u00df ist. if ( other . tag == \"Gescho\u00df\" ) { //L\u00f6sche das Gescho\u00df Destroy ( other . gameObject ); //L\u00f6sche den Asteroiden selbst Destroy ( gameObject ); //erh\u00f6he den Punktestand gameController . ErhoehePunktestand ( 10 ); //Spiele den explosionsSound ab gameController . SpieleSound ( explosionsSound , 0.2f ); } } // Diese Methode sucht nach dem GameController // Wenn einer gefunden wird, wird eine Referenz darauf zur\u00fcckgegeben. // Wenn kein GameController vorhanden ist, wird das Spiel mit einer Fehlermeldung beendet. private GameController FindeGameController () { GameObject gameControllerObject = GameObject . FindWithTag ( \"GameController\" ); //Befindet sich kein GameController im Spiel ist gameControllerObject == null if ( gameControllerObject != null ) { return gameControllerObject . GetComponent < GameController >(); } else { Debug . LogError ( \"Cannot find GameController Script\" ); Application . Quit (); return null ; } } }","title":"5.5 Fertiger SourceCode"},{"location":"teachers/","text":"F\u00fcr Lehrpersonen \u00b6 Lernergebnis Strukturmodell \u00b6 Voraussetzungen: DigiKomp(DK) 31., 3.3 Inhalte: Objekt-orientierte Programmierung Datenstrukturen Variablen Datentypen Operatoren Kontrollstrukturen Verzweigungen Schleifen Bereiche und Zugriffskontrolle Objekte Funktionen Klassen (Erzeugung, Kapselung, Vererbung) Automatentheorie Objekt-Zust\u00e4nde Pr\u00e4sentation Programmierstil Bedeutungsvolle Bezeichnungen Programmierkonventionen Kognitive Prozesse Probleml\u00f6sungsorientierung Verwendung von Algorithmen Testen De-Buggen Lesen (Interpretation von Programmfunktionalit\u00e4t) Implementierung (Entwicklung von ausf\u00fchrbaren Programmen) Meta-Kognitive Prozesse Teamarbeit Gemeinsam Probleme l\u00f6sen Gemeinsam Ideen umsetzen Arbeitsteilung Selbstbestimmung Weiterf\u00fchrende Entwicklung von Anwendungen Verwendung von Dokumentation Kreativit\u00e4t Originalit\u00e4t Ergebnisse: DK 1.4, 4.1, 4.2, 4.3, 4.4 Siehe auch: Kramer, M., Hubwieser, P., & Brinda, T. (2016). A competency structure model of object-oriented programming. In Learning and Teaching in Computing and Engineering (LaTICE), 2016 International Conference on (pp. 1-8). IEEE. Unterrichtsmethoden \u00b6 Case Studies \u00b6","title":"F\u00fcr Lehrpersonen"},{"location":"teachers/#fur-lehrpersonen","text":"","title":"F\u00fcr Lehrpersonen"},{"location":"teachers/#lernergebnis-strukturmodell","text":"Voraussetzungen: DigiKomp(DK) 31., 3.3 Inhalte: Objekt-orientierte Programmierung Datenstrukturen Variablen Datentypen Operatoren Kontrollstrukturen Verzweigungen Schleifen Bereiche und Zugriffskontrolle Objekte Funktionen Klassen (Erzeugung, Kapselung, Vererbung) Automatentheorie Objekt-Zust\u00e4nde Pr\u00e4sentation Programmierstil Bedeutungsvolle Bezeichnungen Programmierkonventionen Kognitive Prozesse Probleml\u00f6sungsorientierung Verwendung von Algorithmen Testen De-Buggen Lesen (Interpretation von Programmfunktionalit\u00e4t) Implementierung (Entwicklung von ausf\u00fchrbaren Programmen) Meta-Kognitive Prozesse Teamarbeit Gemeinsam Probleme l\u00f6sen Gemeinsam Ideen umsetzen Arbeitsteilung Selbstbestimmung Weiterf\u00fchrende Entwicklung von Anwendungen Verwendung von Dokumentation Kreativit\u00e4t Originalit\u00e4t Ergebnisse: DK 1.4, 4.1, 4.2, 4.3, 4.4 Siehe auch: Kramer, M., Hubwieser, P., & Brinda, T. (2016). A competency structure model of object-oriented programming. In Learning and Teaching in Computing and Engineering (LaTICE), 2016 International Conference on (pp. 1-8). IEEE.","title":"Lernergebnis Strukturmodell"},{"location":"teachers/#unterrichtsmethoden","text":"","title":"Unterrichtsmethoden"},{"location":"teachers/#case-studies","text":"","title":"Case Studies"},{"location":"transform/","text":"Unity Transform Spielobjektkomponente \u00b6 Lernziele Hier lernst du die wichtigste Spielobjekt-Komponente in Unity kennen: Transform . Jedes Spielobjekt (GameObject) in Unity hat die Komponente Transform (oder RectTransform bei User Interface GameObjects). Eigenschaften von Transform \u00b6 Mit Transform k\u00f6nnen die Position eines Spielobjekts, Drehungen und die Gr\u00f6\u00dfe, oder Skalierung , eines Spielobjekts definiert werden. Alle 3 Eigenschaften haben einen x-, y-, und z-Wert. In 2D-Spielen sind vor allem x-, und y-Werte wichtig. Bei Position stehen diese Werte jeweils f\u00fcr eine Koordinate im Koordinatensystem der Szene . Bei Rotation stehen die Werte f\u00fcr die Drehung des Spielobjekts um die X-Achse, die Y-Achse und die Z-Achse. Die Werte werden hierbei als Winkel in Grad angegeben. In 2D-Spielen kann vor allem eine Drehung um die Z-Achse effektiv eingesetzt werden. Bei Scale geht es um die relative Gr\u00f6\u00dfe eines Spielobjekts. Standardm\u00e4\u00dfig ist hier der Wert 1 gesetzt. Werte sind hier als Ver\u00e4nderungs-Faktoren zum Standardwert zu verstehen. Klarerweise k\u00f6nnen die Werte der Eigenschaften der Transform-Komponente in einem C # -Skript ver\u00e4ndert werden. Krapfenklicker Erweiterung \u00b6 Die Mehlspeise soll gr\u00f6\u00dfer werden, wenn man darauf klickt! Wie kann man das programmieren? Im GameController Spielobjekt des Krapfenklicker Spiels hast du bereits eine Variable angelegt, in der das Krapfen Spielobjekt gespeichert ist: public Button clickButton; . ACHTUNG public bedeutet, dass diese Variable f\u00fcr andere Teile des eigenen Spiels (und damit in Unity) aufscheint und beschreibbar ist. Deshalb kannst du dem Skript in Unity ein Spielobjekt zuweisen. Siehe hierf\u00fcr die Fertigstellung des Krapfenklicker Spiels ! GetComponent(), Rechtecke und Vektoren \u00b6 Ok, wie kann man aber jetzt die Gr\u00f6\u00dfe der Mehlspeise ver\u00e4ndern? Daf\u00fcr ben\u00f6tigst du zuerst die aktuelle Gr\u00f6\u00dfe der Mehlspeise. Diese bekommst du aus der Komponente Transform . Die Komponente Transform (oder bei einem Button RectTransform ) bekommst du mit: clickButton . GetComponent < RectTransform >() \u00dcbung Erkundige dich in der Unity Scripting Referenz , wozu die Funktion GetComponent dient. Was bedeuten die Klammern < und > in C # ? \"Rect\" steht f\u00fcr Rectangle, und das hei\u00dft: Rechteck. Bedienfl\u00e4chen wie Buttons werden in Unity in einem Rechteck in der Szene platziert. Ein Rechteck ( rect ) hat in Unity folgende Eigenschaften: einen Startpunkt (als x- und y-Koordinate) und eine Gr\u00f6\u00dfe (size), die als 2-dimensionaler Vektor angegeben wird - also auch mit einem x- und einem y-Wert f\u00fcr die L\u00e4nge auf der X-Achse und auf der Y-Achse. Tipp Vektoren sind Bewegungen in einem Koordinatensystem. Sie haben eine L\u00e4nge , eine Richtung und eine Orientierung . Da Vektoren in Unity f\u00fcr Gr\u00f6\u00dfen\u00e4nderungen, Positions\u00e4nderungen, Geschwindigkeit und anderes verwendet werden, gibt es eigene Referenz-Datentypen (oder Klassen ) daf\u00fcr: Vector2 (f\u00fcr 2D Vektoren) bzw. Vector3 (f\u00fcr 3D Vektoren). Um die aktuelle Gr\u00f6\u00dfe der Mehlspeise zu speichern, schreibst du daher: Vector2 meineGroesse = clickButton . GetComponent < RectTransform >(). rect . size ; Vektoren neu erstellen \u00b6 Um die Mehlspeise bei jedem Button-Klick zu vergr\u00f6\u00dfern, brauchst du als n\u00e4chstes einen Wachstumsfaktor. Dieser gibt an, um wieviel die Mehlspeise je in die X-, und Y-Richtung wachsen soll. Der Wachstumsfaktor wird in einen neuen 2D-Vektor gespeichert: Vector2 wachstumsFaktor = new Vector2 ( 10.0f , 10.0f ); //In der runden Klammer werden dem neuen Vektor x-, und y-Werte des 2D Vektors als Paramter im Datentyp Float \u00fcbergeben. Vektoren und Spielobjekt-Eigenschaften \u00b6 Schlie\u00dflich wird der Wachstumsfaktor zur aktuellen Mehlspeisgr\u00f6\u00dfe addiert. Du kannst den Gr\u00f6\u00dfenunterschied in der Eigenschaft sizeDelta des \"ClickButton\"s speichern: clickButton . GetComponent < RectTransform > (). sizeDelta = meineGroesse + wachstumsFaktor ; Arbeitsauftrag Erg\u00e4nze die Funktion public void buttonclick() im Skript \"GameController.cs\" im Krapfenklicker Spiel, sodass die Mehlspeise bei jedem Buttonklick ein wenig gr\u00f6\u00dfer wird. Tipp Wenn man ein Programm \u00fcberarbeitet, wird dies h\u00e4ufig Refactoring genannt. Refactoring bedeutet die Verbesserung von Quellcode.","title":"Transform Spielobjektkomponente"},{"location":"transform/#unity-transform-spielobjektkomponente","text":"Lernziele Hier lernst du die wichtigste Spielobjekt-Komponente in Unity kennen: Transform . Jedes Spielobjekt (GameObject) in Unity hat die Komponente Transform (oder RectTransform bei User Interface GameObjects).","title":"Unity Transform Spielobjektkomponente"},{"location":"transform/#eigenschaften-von-transform","text":"Mit Transform k\u00f6nnen die Position eines Spielobjekts, Drehungen und die Gr\u00f6\u00dfe, oder Skalierung , eines Spielobjekts definiert werden. Alle 3 Eigenschaften haben einen x-, y-, und z-Wert. In 2D-Spielen sind vor allem x-, und y-Werte wichtig. Bei Position stehen diese Werte jeweils f\u00fcr eine Koordinate im Koordinatensystem der Szene . Bei Rotation stehen die Werte f\u00fcr die Drehung des Spielobjekts um die X-Achse, die Y-Achse und die Z-Achse. Die Werte werden hierbei als Winkel in Grad angegeben. In 2D-Spielen kann vor allem eine Drehung um die Z-Achse effektiv eingesetzt werden. Bei Scale geht es um die relative Gr\u00f6\u00dfe eines Spielobjekts. Standardm\u00e4\u00dfig ist hier der Wert 1 gesetzt. Werte sind hier als Ver\u00e4nderungs-Faktoren zum Standardwert zu verstehen. Klarerweise k\u00f6nnen die Werte der Eigenschaften der Transform-Komponente in einem C # -Skript ver\u00e4ndert werden.","title":"Eigenschaften von Transform"},{"location":"transform/#krapfenklicker-erweiterung","text":"Die Mehlspeise soll gr\u00f6\u00dfer werden, wenn man darauf klickt! Wie kann man das programmieren? Im GameController Spielobjekt des Krapfenklicker Spiels hast du bereits eine Variable angelegt, in der das Krapfen Spielobjekt gespeichert ist: public Button clickButton; . ACHTUNG public bedeutet, dass diese Variable f\u00fcr andere Teile des eigenen Spiels (und damit in Unity) aufscheint und beschreibbar ist. Deshalb kannst du dem Skript in Unity ein Spielobjekt zuweisen. Siehe hierf\u00fcr die Fertigstellung des Krapfenklicker Spiels !","title":"Krapfenklicker Erweiterung"},{"location":"transform/#getcomponent-rechtecke-und-vektoren","text":"Ok, wie kann man aber jetzt die Gr\u00f6\u00dfe der Mehlspeise ver\u00e4ndern? Daf\u00fcr ben\u00f6tigst du zuerst die aktuelle Gr\u00f6\u00dfe der Mehlspeise. Diese bekommst du aus der Komponente Transform . Die Komponente Transform (oder bei einem Button RectTransform ) bekommst du mit: clickButton . GetComponent < RectTransform >() \u00dcbung Erkundige dich in der Unity Scripting Referenz , wozu die Funktion GetComponent dient. Was bedeuten die Klammern < und > in C # ? \"Rect\" steht f\u00fcr Rectangle, und das hei\u00dft: Rechteck. Bedienfl\u00e4chen wie Buttons werden in Unity in einem Rechteck in der Szene platziert. Ein Rechteck ( rect ) hat in Unity folgende Eigenschaften: einen Startpunkt (als x- und y-Koordinate) und eine Gr\u00f6\u00dfe (size), die als 2-dimensionaler Vektor angegeben wird - also auch mit einem x- und einem y-Wert f\u00fcr die L\u00e4nge auf der X-Achse und auf der Y-Achse. Tipp Vektoren sind Bewegungen in einem Koordinatensystem. Sie haben eine L\u00e4nge , eine Richtung und eine Orientierung . Da Vektoren in Unity f\u00fcr Gr\u00f6\u00dfen\u00e4nderungen, Positions\u00e4nderungen, Geschwindigkeit und anderes verwendet werden, gibt es eigene Referenz-Datentypen (oder Klassen ) daf\u00fcr: Vector2 (f\u00fcr 2D Vektoren) bzw. Vector3 (f\u00fcr 3D Vektoren). Um die aktuelle Gr\u00f6\u00dfe der Mehlspeise zu speichern, schreibst du daher: Vector2 meineGroesse = clickButton . GetComponent < RectTransform >(). rect . size ;","title":"GetComponent(), Rechtecke und Vektoren"},{"location":"transform/#vektoren-neu-erstellen","text":"Um die Mehlspeise bei jedem Button-Klick zu vergr\u00f6\u00dfern, brauchst du als n\u00e4chstes einen Wachstumsfaktor. Dieser gibt an, um wieviel die Mehlspeise je in die X-, und Y-Richtung wachsen soll. Der Wachstumsfaktor wird in einen neuen 2D-Vektor gespeichert: Vector2 wachstumsFaktor = new Vector2 ( 10.0f , 10.0f ); //In der runden Klammer werden dem neuen Vektor x-, und y-Werte des 2D Vektors als Paramter im Datentyp Float \u00fcbergeben.","title":"Vektoren neu erstellen"},{"location":"transform/#vektoren-und-spielobjekt-eigenschaften","text":"Schlie\u00dflich wird der Wachstumsfaktor zur aktuellen Mehlspeisgr\u00f6\u00dfe addiert. Du kannst den Gr\u00f6\u00dfenunterschied in der Eigenschaft sizeDelta des \"ClickButton\"s speichern: clickButton . GetComponent < RectTransform > (). sizeDelta = meineGroesse + wachstumsFaktor ; Arbeitsauftrag Erg\u00e4nze die Funktion public void buttonclick() im Skript \"GameController.cs\" im Krapfenklicker Spiel, sodass die Mehlspeise bei jedem Buttonklick ein wenig gr\u00f6\u00dfer wird. Tipp Wenn man ein Programm \u00fcberarbeitet, wird dies h\u00e4ufig Refactoring genannt. Refactoring bedeutet die Verbesserung von Quellcode.","title":"Vektoren und Spielobjekt-Eigenschaften"},{"location":"userinterface/","text":"Bedienoberfl\u00e4chen \u00b6 Lernziele F\u00fcr die Spieleprogrammierung wirst du vorwiegend zwei Anwendungsprogramme verwenden: Unity zur Entwicklung von Spielszenen und Visual Studio zum Schreiben von Programm-Scripts. In diesem Kapitel lernst du die Bedienoberfl\u00e4chen von Unity und Visual Studio kennen. Du lernst auch, worauf du beim Anlegen eines neuen Projekts und beim Speichern in Unity achten musst. Unity Bedienoberfl\u00e4che \u00b6 Als Analogie f\u00fcr das Erschaffen eines Spiels kannst du dir vorstellen, einen Film zu machen. Unity besteht aus Men\u00fcs und Panels (=Bedienfelder), die verschiedene Aspekte des Spiel-projekts umfassen. Wie im Film bestehen in Unity Spiele aus einer oder mehrerer Szene(n) . Im Hierarchy Panel findest du alle GameObjects - Requisiten -, die du in der Szene, an der du gerade arbeitest, verwendest. Diese sind hierarchisch - nach Zugeh\u00f6rigkeit und nach der Reihe - geordnet. Die Reihenfolge kannst du per Drag and Drop ver\u00e4ndern. Im Inspector Panel kannst du Eigenschaften eines GameObjects ver\u00e4ndern, sowie Komponenten an ein GameObject \"anheften\". Die Szene, an der du momentan arbeitest, wird im Scene Panel angezeigt. Hier kannst du Requisiten aus dem Hierarchie-Panel in der Szene anordnen. Das Game Panel zeigt deine aktuelle Szene aus der Kameraperspektive. In diesem Panel kannst du dein Spiel testen, sobald du es startest. Wie es beim Filme-machen ein Requisiten-Lager gibt, so bietet Unity das Project Panel . Hier sind alle Assets - alle \"G\u00fcter\" oder Resourcen - deines Spiel-projekts auffindbar. Das Projekt-Panel ist als Dateisystem organisiert. Hier sammelst du alle Grafiken f\u00fcr dein Spiel, sowie alle Soundeffekte, Spielobjekt-Prototypen oder Szenenaufbauten deiner Spiel-Szenen. Um mehr \u00dcbersicht zu haben, k\u00f6nnen Assets in Ordnern gespeichert werden. Assets werden als GameObjects, Komponenten oder Komponenteneigenschaften in einer Szene verwendet. Szenen in Unity sind hierarchisch - in Ebenen - organisiert. Prinzipiell werden GameObjects in der Folge angezeigt, in der sie erzeugt werden. Per Drag and Drop k\u00f6nnen diese neu angeordnet werden oder gruppiert werden. Tipp Sowohl das Szenen-Panel wie auch das Projekt-Panel haben eine Suchfunktion. Neues Projekt anlegen \u00b6 Arbeitsauftrag Lege ein neues Projekt in Unity an. Es ist ein 2D-Spiel. Nenne es \"Hallo Elli\". ACHTUNG Merke dir, wo du dein Projekt am Computer anlegst. Wenn du wei\u00dft, wo dein Projekt ist, kannst du es leicht kopieren oder auf deinem USB Stick speichern. TIPP Du kannst auch in Unity \u00fcber den Men\u00fcpunkt \"Assets\" > \"Im Dateimanager anzeigen\" die Dateien deines Projekts im Dateisystem auf deinem Computer anzeigen lassen. Spiel starten (und stoppen) \u00b6 ACHTUNG Alle \u00c4nderungen, die du in Unity vornimmst, w\u00e4hrend das Spiel gestartet ist, werden NICHT \u00fcbernommen, sobald du das Spiel wieder stoppst! Speichern \u00b6 In Unity k\u00f6nnen Szeneneinstellungen mit \"Save Scene\" gespeichert werden. Projekteinstellungen werden mit \"Save Project\" gespeichert. Visual Studio Bedienoberfl\u00e4che \u00b6 Visual Studio ist eine Programmierumgebung. C # -Skripte k\u00f6nnen in Visual Studio geschrieben werden. Damit geschriebener Code in Unity ausgef\u00fchrt werden kann, musst du dein Skript in Visual Studio speichern. Tipp Eine Tastenkombination f\u00fcr Speichern (in Visual Studio) ist: strg + s Weiterf\u00fchrende Resourcen \u00b6 Unity User Interface (englisch) Unity Hauptfenster (englisch) Visual Studio Grundlagen","title":"Bedienoberfl\u00e4chen"},{"location":"userinterface/#bedienoberflachen","text":"Lernziele F\u00fcr die Spieleprogrammierung wirst du vorwiegend zwei Anwendungsprogramme verwenden: Unity zur Entwicklung von Spielszenen und Visual Studio zum Schreiben von Programm-Scripts. In diesem Kapitel lernst du die Bedienoberfl\u00e4chen von Unity und Visual Studio kennen. Du lernst auch, worauf du beim Anlegen eines neuen Projekts und beim Speichern in Unity achten musst.","title":"Bedienoberfl\u00e4chen"},{"location":"userinterface/#unity-bedienoberflache","text":"Als Analogie f\u00fcr das Erschaffen eines Spiels kannst du dir vorstellen, einen Film zu machen. Unity besteht aus Men\u00fcs und Panels (=Bedienfelder), die verschiedene Aspekte des Spiel-projekts umfassen. Wie im Film bestehen in Unity Spiele aus einer oder mehrerer Szene(n) . Im Hierarchy Panel findest du alle GameObjects - Requisiten -, die du in der Szene, an der du gerade arbeitest, verwendest. Diese sind hierarchisch - nach Zugeh\u00f6rigkeit und nach der Reihe - geordnet. Die Reihenfolge kannst du per Drag and Drop ver\u00e4ndern. Im Inspector Panel kannst du Eigenschaften eines GameObjects ver\u00e4ndern, sowie Komponenten an ein GameObject \"anheften\". Die Szene, an der du momentan arbeitest, wird im Scene Panel angezeigt. Hier kannst du Requisiten aus dem Hierarchie-Panel in der Szene anordnen. Das Game Panel zeigt deine aktuelle Szene aus der Kameraperspektive. In diesem Panel kannst du dein Spiel testen, sobald du es startest. Wie es beim Filme-machen ein Requisiten-Lager gibt, so bietet Unity das Project Panel . Hier sind alle Assets - alle \"G\u00fcter\" oder Resourcen - deines Spiel-projekts auffindbar. Das Projekt-Panel ist als Dateisystem organisiert. Hier sammelst du alle Grafiken f\u00fcr dein Spiel, sowie alle Soundeffekte, Spielobjekt-Prototypen oder Szenenaufbauten deiner Spiel-Szenen. Um mehr \u00dcbersicht zu haben, k\u00f6nnen Assets in Ordnern gespeichert werden. Assets werden als GameObjects, Komponenten oder Komponenteneigenschaften in einer Szene verwendet. Szenen in Unity sind hierarchisch - in Ebenen - organisiert. Prinzipiell werden GameObjects in der Folge angezeigt, in der sie erzeugt werden. Per Drag and Drop k\u00f6nnen diese neu angeordnet werden oder gruppiert werden. Tipp Sowohl das Szenen-Panel wie auch das Projekt-Panel haben eine Suchfunktion.","title":"Unity Bedienoberfl\u00e4che"},{"location":"userinterface/#neues-projekt-anlegen","text":"Arbeitsauftrag Lege ein neues Projekt in Unity an. Es ist ein 2D-Spiel. Nenne es \"Hallo Elli\". ACHTUNG Merke dir, wo du dein Projekt am Computer anlegst. Wenn du wei\u00dft, wo dein Projekt ist, kannst du es leicht kopieren oder auf deinem USB Stick speichern. TIPP Du kannst auch in Unity \u00fcber den Men\u00fcpunkt \"Assets\" > \"Im Dateimanager anzeigen\" die Dateien deines Projekts im Dateisystem auf deinem Computer anzeigen lassen.","title":"Neues Projekt anlegen"},{"location":"userinterface/#spiel-starten-und-stoppen","text":"ACHTUNG Alle \u00c4nderungen, die du in Unity vornimmst, w\u00e4hrend das Spiel gestartet ist, werden NICHT \u00fcbernommen, sobald du das Spiel wieder stoppst!","title":"Spiel starten (und stoppen)"},{"location":"userinterface/#speichern","text":"In Unity k\u00f6nnen Szeneneinstellungen mit \"Save Scene\" gespeichert werden. Projekteinstellungen werden mit \"Save Project\" gespeichert.","title":"Speichern"},{"location":"userinterface/#visual-studio-bedienoberflache","text":"Visual Studio ist eine Programmierumgebung. C # -Skripte k\u00f6nnen in Visual Studio geschrieben werden. Damit geschriebener Code in Unity ausgef\u00fchrt werden kann, musst du dein Skript in Visual Studio speichern. Tipp Eine Tastenkombination f\u00fcr Speichern (in Visual Studio) ist: strg + s","title":"Visual Studio Bedienoberfl\u00e4che"},{"location":"userinterface/#weiterfuhrende-resourcen","text":"Unity User Interface (englisch) Unity Hauptfenster (englisch) Visual Studio Grundlagen","title":"Weiterf\u00fchrende Resourcen"},{"location":"variables/","text":"Variablen \u00b6 Lernziele In diesem Kapitel lernst du was Variablen beim Programmieren sind. Du lernst, wie du eine Variable erzeugen kannst durch Deklarieren und Initialisieren . Au\u00dferdem lernst du, was Datentypen sind. Das bedeutet: Der Integer-Variable \"meineVariable\" wird der Wert 1 zugewiesen. Man kann auch sagen: Die Integer-Variable \"meineVariable\" wird mit dem Wert 1 initialisiert. Wozu Variablen? \u00b6 Mit Variablen kannst du Daten speichern und \u00e4ndern. Ein Beispiel: int x = 1 ; int y = 2 ; int z = x + y ; \u00dcbung Welchen Wert hat z? Letztlich bezeichnen Variablen einen Speicherplatz. Man kann sich das etwa wie ein Postfach vorstellen, auf dem eine Address-Bezeichnung steht. Diesem Speicherplatz k\u00f6nnen Werte (also Daten) zugewiesen werden. Zuweisen kann man in C # mit dem Zuweisungs-Operator = . Deklarieren und Initialisieren \u00b6 Deklarieren bedeutet, dass man eine Variable benennt und ihr einen Datentyp zuordnet. Datentypen bezeichnen die Form der Daten, also was die Nullen und Einser in einer Bit-Folge jeweils bedeuten. Tipp Ein Bit ist die kleinste Einheit, mit der Computer rechnen. Ein Bit ist entweder 0 oder 1. Mit Bits kann man im Bin\u00e4rsystem rechnen . Initialisieren bedeutet, dass man einer Variable das erste Mal einen Wert zuweist. \u00dcbung Analysiere folgenden Quellcode. In welcher Zeile wird eine Variable deklariert? Wo wird eine Variable deklariert und initialisiert? int ersteVariable; int zweiteVariable = 2; Datentypen \u00b6 Datentypen zeigen an, welche Art von Daten einer Variable zugewiesen werden k\u00f6nnen. Sie zeigen an, wie Daten (also Folgen von Nullen und Einsen) interpretiert werden sollen. Wichtige Datentypen sind: Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 32-bit Float (Gleitkommazahlen) -3,4mal10hoch38 bis 3,4mal10hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,0mal10hoch-324 bis (+/-)1,7mal10hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Skript halloelli.cs um zwei Variablen: string spiel und int preis . Weise der Variable \"spiel\" den Wert \"Elli Dance\" zu. Weise der Variable \"preis\" den Wert 5 zu. Erg\u00e4nze Debug.Log() um folgenden string: \"Das Spiel\" + spiel + \"kostet\" + preis + \"Euro.\" Tipp + ist der Additions-Operator . Bei Zahlen addiert dieser, strings werden durch diesen zusammengef\u00fcgt. Umwandlung von Datentypen \u00b6 Datentypen k\u00f6nnen manchmal in andere Datentypen umgewandelt werden. Folgende Funktionen erm\u00f6glichen neben anderen eine Typ-Umwandlung: .ToInt(), .ToBool(), .ToString() Ein Beispiel: int i = 75 ; string zahl = i . ToString (); Variablen-Bereich (Scope) \u00b6 Variablen, die au\u00dferhalb eines Code-Blocks - gekennzeichnet durch { ... } - deklariert (also angegeben) werden, k\u00f6nnen im Code-Block verwendet werden. Variablen, die im Code-Block angegeben werden, k\u00f6nnen nur dort verwendet werden. Wird einer Variable bei der Deklarierung das Schl\u00fcsselwort public vorgesetzt, so k\u00f6nnen auch Objekte darauf zugreifen, denen das Skript nicht \"angeheftet\" ist. Wenn eine Variable private ist, so kann nur das GameObject, dem das Skript angeheftet ist, darauf zugreifen. Mehr dazu Weiterf\u00fchrende Resourcen \u00b6 Variablen schnell erkl\u00e4rt (Video) Unity Variables and Functions Tutorial (englisch) Scope and Access Control in Unity Tutorial (englisch)","title":"Variablen"},{"location":"variables/#variablen","text":"Lernziele In diesem Kapitel lernst du was Variablen beim Programmieren sind. Du lernst, wie du eine Variable erzeugen kannst durch Deklarieren und Initialisieren . Au\u00dferdem lernst du, was Datentypen sind. Das bedeutet: Der Integer-Variable \"meineVariable\" wird der Wert 1 zugewiesen. Man kann auch sagen: Die Integer-Variable \"meineVariable\" wird mit dem Wert 1 initialisiert.","title":"Variablen"},{"location":"variables/#wozu-variablen","text":"Mit Variablen kannst du Daten speichern und \u00e4ndern. Ein Beispiel: int x = 1 ; int y = 2 ; int z = x + y ; \u00dcbung Welchen Wert hat z? Letztlich bezeichnen Variablen einen Speicherplatz. Man kann sich das etwa wie ein Postfach vorstellen, auf dem eine Address-Bezeichnung steht. Diesem Speicherplatz k\u00f6nnen Werte (also Daten) zugewiesen werden. Zuweisen kann man in C # mit dem Zuweisungs-Operator = .","title":"Wozu Variablen?"},{"location":"variables/#deklarieren-und-initialisieren","text":"Deklarieren bedeutet, dass man eine Variable benennt und ihr einen Datentyp zuordnet. Datentypen bezeichnen die Form der Daten, also was die Nullen und Einser in einer Bit-Folge jeweils bedeuten. Tipp Ein Bit ist die kleinste Einheit, mit der Computer rechnen. Ein Bit ist entweder 0 oder 1. Mit Bits kann man im Bin\u00e4rsystem rechnen . Initialisieren bedeutet, dass man einer Variable das erste Mal einen Wert zuweist. \u00dcbung Analysiere folgenden Quellcode. In welcher Zeile wird eine Variable deklariert? Wo wird eine Variable deklariert und initialisiert? int ersteVariable; int zweiteVariable = 2;","title":"Deklarieren und Initialisieren"},{"location":"variables/#datentypen","text":"Datentypen zeigen an, welche Art von Daten einer Variable zugewiesen werden k\u00f6nnen. Sie zeigen an, wie Daten (also Folgen von Nullen und Einsen) interpretiert werden sollen. Wichtige Datentypen sind: Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 32-bit Float (Gleitkommazahlen) -3,4mal10hoch38 bis 3,4mal10hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,0mal10hoch-324 bis (+/-)1,7mal10hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null Arbeitsauftrag Erg\u00e4nze die Funktion OnDisable() im Skript halloelli.cs um zwei Variablen: string spiel und int preis . Weise der Variable \"spiel\" den Wert \"Elli Dance\" zu. Weise der Variable \"preis\" den Wert 5 zu. Erg\u00e4nze Debug.Log() um folgenden string: \"Das Spiel\" + spiel + \"kostet\" + preis + \"Euro.\" Tipp + ist der Additions-Operator . Bei Zahlen addiert dieser, strings werden durch diesen zusammengef\u00fcgt.","title":"Datentypen"},{"location":"variables/#umwandlung-von-datentypen","text":"Datentypen k\u00f6nnen manchmal in andere Datentypen umgewandelt werden. Folgende Funktionen erm\u00f6glichen neben anderen eine Typ-Umwandlung: .ToInt(), .ToBool(), .ToString() Ein Beispiel: int i = 75 ; string zahl = i . ToString ();","title":"Umwandlung von Datentypen"},{"location":"variables/#variablen-bereich-scope","text":"Variablen, die au\u00dferhalb eines Code-Blocks - gekennzeichnet durch { ... } - deklariert (also angegeben) werden, k\u00f6nnen im Code-Block verwendet werden. Variablen, die im Code-Block angegeben werden, k\u00f6nnen nur dort verwendet werden. Wird einer Variable bei der Deklarierung das Schl\u00fcsselwort public vorgesetzt, so k\u00f6nnen auch Objekte darauf zugreifen, denen das Skript nicht \"angeheftet\" ist. Wenn eine Variable private ist, so kann nur das GameObject, dem das Skript angeheftet ist, darauf zugreifen. Mehr dazu","title":"Variablen-Bereich (Scope)"},{"location":"variables/#weiterfuhrende-resourcen","text":"Variablen schnell erkl\u00e4rt (Video) Unity Variables and Functions Tutorial (englisch) Scope and Access Control in Unity Tutorial (englisch)","title":"Weiterf\u00fchrende Resourcen"},{"location":"tables/comparisonoperators/","text":"Vergleichsoperator Bedeutung == ist gleich != ist ungleich > ist gr\u00f6\u00dfer als > ist kleiner als >= ist gr\u00f6\u00dfer gleich <= ist kleiner gleich","title":"Comparisonoperators"},{"location":"tables/datatypes/","text":"Datentyp Steht f\u00fcr Umfang Default Wert bool Boolean (wahr oder falsch True/False False int 32-bit Integer (Ganze Zahlen) -2147483648 bis 2147483647 0 float 31-bit Float (Gleitkommazahlen) -3,4 10hoch38 bis 3,4 10hoch38 0.0f double 64-bit Gleitkommazahlen (+/-)5,0 10hoch-324 bis (+/-)1,7 10hoch308 0.0D string Text \"Text\" null (string ist ein Referenz-Datentyp) Sonderfall: Klassenbezeichnung Objekte einer Klasse Eigenschaften der Instanz einer Klasse null","title":"Datatypes"}]}